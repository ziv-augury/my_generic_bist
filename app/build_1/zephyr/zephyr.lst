
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 26 00 20 65 2e 00 00 8d 68 00 00 39 2e 00 00     .&. e....h..9...
  10:	39 2e 00 00 39 2e 00 00 39 2e 00 00 00 00 00 00     9...9...9.......
	...
  2c:	6d 27 00 00 39 2e 00 00 00 00 00 00 19 27 00 00     m'..9........'..
  3c:	39 2e 00 00                                         9...

00000040 <_irq_vector_table>:
  40:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  50:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  60:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  70:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  80:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  90:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  a0:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  b0:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  c0:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  d0:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  e0:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..
  f0:	1d 28 00 00 1d 28 00 00 1d 28 00 00 1d 28 00 00     .(...(...(...(..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     280:	d204      	bcs.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2ac:	d204      	bcs.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16f>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x169>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x183>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18f>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     350:	d204      	bcs.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     37c:	d204      	bcs.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     39c:	d106      	bne.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>

000003d4 <main>:

#include "bist_manager.h"


void main(void)
{
     3d4:	b508      	push	{r3, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
     3d6:	4908      	ldr	r1, [pc, #32]	; (3f8 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x10>)
     3d8:	4808      	ldr	r0, [pc, #32]	; (3fc <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x14>)
     3da:	f005 fe22 	bl	6022 <printk>
	// {
	// 	printk("dev not init well");
	// 	return;
	// }
	// sensor_attr_set(dev, 0, 0, NULL);
	run_all_bists();
     3de:	f000 f811 	bl	404 <run_all_bists>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3e2:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     3e6:	2100      	movs	r1, #0
     3e8:	f005 f92e 	bl	5648 <z_impl_k_sleep>
	k_sleep(K_MSEC(5000));
	printk("done by by");
}
     3ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("done by by");
     3f0:	4803      	ldr	r0, [pc, #12]	; (400 <CONFIG_FLASH_SIZE>)
     3f2:	f005 be16 	b.w	6022 <printk>
     3f6:	bf00      	nop
     3f8:	0000763c 	.word	0x0000763c
     3fc:	00007647 	.word	0x00007647
     400:	00007658 	.word	0x00007658

00000404 <run_all_bists>:
//     printk("Hello World! %s\n", CONFIG_BOARD);
// }


void run_all_bists(void)
{
     404:	b510      	push	{r4, lr}
    // }
    // LOG_INF("\n===========================================\n BIST END \n ================================");

    for (size_t i = 0; i < ARRAY_SIZE(devs_with_bist_prop); i++) 
    {
        my_bist_run(devs_with_bist_prop[i], NULL);
     406:	4c0a      	ldr	r4, [pc, #40]	; (430 <run_all_bists+0x2c>)
    printk("Enter the Bist!\n");
     408:	480a      	ldr	r0, [pc, #40]	; (434 <run_all_bists+0x30>)
     40a:	f005 fe0a 	bl	6022 <printk>
        my_bist_run(devs_with_bist_prop[i], NULL);
     40e:	6820      	ldr	r0, [r4, #0]


static inline int my_bist_run(const struct device *dev, void* context)
{
    const struct my_device_api *api =(const struct my_device_api *)dev->api;
    if (api->bist_run == NULL) {
     410:	6883      	ldr	r3, [r0, #8]
     412:	695b      	ldr	r3, [r3, #20]
     414:	b10b      	cbz	r3, 41a <run_all_bists+0x16>
        return -ENOSYS;
    }
    return api->bist_run(dev, context);
     416:	2100      	movs	r1, #0
     418:	4798      	blx	r3
     41a:	6860      	ldr	r0, [r4, #4]
    if (api->bist_run == NULL) {
     41c:	6883      	ldr	r3, [r0, #8]
     41e:	695b      	ldr	r3, [r3, #20]
     420:	b10b      	cbz	r3, 426 <run_all_bists+0x22>
    return api->bist_run(dev, context);
     422:	2100      	movs	r1, #0
     424:	4798      	blx	r3

//     }
//     my_bist_run(devs_with_bist_prop, NULL);
    printk("done the Bist!\n");

     426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("done the Bist!\n");
     42a:	4803      	ldr	r0, [pc, #12]	; (438 <run_all_bists+0x34>)
     42c:	f005 bdf9 	b.w	6022 <printk>
     430:	20000000 	.word	0x20000000
     434:	00007663 	.word	0x00007663
     438:	00007674 	.word	0x00007674

0000043c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     440:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     442:	0784      	lsls	r4, r0, #30
{
     444:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     446:	f002 0304 	and.w	r3, r2, #4
     44a:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     44c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     450:	f103 0301 	add.w	r3, r3, #1
     454:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
     458:	9203      	str	r2, [sp, #12]
     45a:	4605      	mov	r5, r0
     45c:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     45e:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     460:	f040 81be 	bne.w	7e0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f8>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     464:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     466:	b130      	cbz	r0, 476 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     468:	2907      	cmp	r1, #7
     46a:	d809      	bhi.n	480 <cbvprintf_package+0x44>
		return -ENOSPC;
     46c:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     470:	b011      	add	sp, #68	; 0x44
     472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     476:	f001 0607 	and.w	r6, r1, #7
     47a:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     47c:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     480:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     482:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
     486:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
     488:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     48c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     490:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     492:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     496:	464f      	mov	r7, r9
	bool parsing = false;
     498:	46cb      	mov	fp, r9
	size = sizeof(char *);
     49a:	4653      	mov	r3, sl
			if (buf0 != NULL) {
     49c:	b10d      	cbz	r5, 4a2 <cbvprintf_package+0x66>
				*(const char **)buf = s;
     49e:	9a00      	ldr	r2, [sp, #0]
     4a0:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     4a2:	9805      	ldr	r0, [sp, #20]
     4a4:	2800      	cmp	r0, #0
     4a6:	f300 80eb 	bgt.w	680 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x198>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     4aa:	489a      	ldr	r0, [pc, #616]	; (714 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22c>)
     4ac:	9a00      	ldr	r2, [sp, #0]
     4ae:	4282      	cmp	r2, r0
     4b0:	d303      	bcc.n	4ba <cbvprintf_package+0x7e>
     4b2:	4899      	ldr	r0, [pc, #612]	; (718 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x230>)
     4b4:	4282      	cmp	r2, r0
     4b6:	f0c0 80e3 	bcc.w	680 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x198>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     4ba:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     4bc:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     4c0:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     4c2:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     4c6:	f100 8106 	bmi.w	6d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ee>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     4ca:	2f0f      	cmp	r7, #15
     4cc:	f200 80b4 	bhi.w	638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>
				if (buf0 != NULL) {
     4d0:	2d00      	cmp	r5, #0
     4d2:	f000 8108 	beq.w	6e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fe>
					str_ptr_pos[s_idx] = s_ptr_idx;
     4d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
     4da:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     4de:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     4e0:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     4e4:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     4e8:	9804      	ldr	r0, [sp, #16]
     4ea:	3001      	adds	r0, #1
     4ec:	9004      	str	r0, [sp, #16]
     4ee:	e0ea      	b.n	6c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1de>
			switch (*fmt) {
     4f0:	287a      	cmp	r0, #122	; 0x7a
     4f2:	d860      	bhi.n	5b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xce>
     4f4:	284b      	cmp	r0, #75	; 0x4b
     4f6:	d80e      	bhi.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     4f8:	2847      	cmp	r0, #71	; 0x47
     4fa:	d85c      	bhi.n	5b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xce>
     4fc:	2829      	cmp	r0, #41	; 0x29
     4fe:	d82f      	bhi.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     500:	2825      	cmp	r0, #37	; 0x25
     502:	d055      	beq.n	5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>
     504:	d857      	bhi.n	5b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xce>
     506:	2820      	cmp	r0, #32
     508:	d07d      	beq.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
     50a:	3823      	subs	r0, #35	; 0x23
     50c:	f1d0 0b00 	rsbs	fp, r0, #0
     510:	eb4b 0b00 	adc.w	fp, fp, r0
     514:	e077      	b.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
     516:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     51a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     51e:	d84a      	bhi.n	5b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xce>
     520:	e8df f00c 	tbb	[pc, ip]
     524:	49494971 	.word	0x49494971
     528:	49494949 	.word	0x49494949
     52c:	49494949 	.word	0x49494949
     530:	4949494c 	.word	0x4949494c
     534:	49494949 	.word	0x49494949
     538:	4c495a49 	.word	0x4c495a49
     53c:	5a5a5a4c 	.word	0x5a5a5a4c
     540:	496e4c71 	.word	0x496e4c71
     544:	4c184971 	.word	0x4c184971
     548:	83494918 	.word	0x83494918
     54c:	49494c80 	.word	0x49494c80
     550:	494c      	.short	0x494c
     552:	80          	.byte	0x80
     553:	00          	.byte	0x00
     554:	2000      	movs	r0, #0
     556:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     55a:	f04f 0a04 	mov.w	sl, #4
     55e:	e039      	b.n	5d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xec>
			switch (*fmt) {
     560:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     564:	fa5f fc8c 	uxtb.w	ip, ip
     568:	2201      	movs	r2, #1
     56a:	fa02 fc0c 	lsl.w	ip, r2, ip
     56e:	ea1c 0f0e 	tst.w	ip, lr
     572:	d148      	bne.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
     574:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     578:	d12e      	bne.n	5d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf0>
     57a:	ea1c 0b02 	ands.w	fp, ip, r2
     57e:	d042      	beq.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
		buf = (void *) ROUND_UP(buf, align);
     580:	3c01      	subs	r4, #1
     582:	4454      	add	r4, sl
     584:	f1ca 0c00 	rsb	ip, sl, #0
     588:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     58c:	2d00      	cmp	r5, #0
     58e:	d061      	beq.n	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     590:	eba3 0c05 	sub.w	ip, r3, r5
     594:	44a4      	add	ip, r4
     596:	45b4      	cmp	ip, r6
     598:	f63f af68 	bhi.w	46c <cbvprintf_package+0x30>
		if (is_str_arg) {
     59c:	2800      	cmp	r0, #0
     59e:	d168      	bne.n	672 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18a>
		} else if (size == sizeof(int)) {
     5a0:	2b04      	cmp	r3, #4
     5a2:	d147      	bne.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
			int v = va_arg(ap, int);
     5a4:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     5a8:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     5aa:	3404      	adds	r4, #4
     5ac:	2304      	movs	r3, #4
     5ae:	e02a      	b.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
				arg_idx--;
     5b0:	9a01      	ldr	r2, [sp, #4]
     5b2:	3a01      	subs	r2, #1
     5b4:	9201      	str	r2, [sp, #4]
				parsing = false;
     5b6:	f04f 0b00 	mov.w	fp, #0
				continue;
     5ba:	e024      	b.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
				if (fmt[-1] == 'l') {
     5bc:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     5c0:	286c      	cmp	r0, #108	; 0x6c
     5c2:	d134      	bne.n	62e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x146>
					if (fmt[-2] == 'l') {
     5c4:	f811 3c02 	ldrb.w	r3, [r1, #-2]
     5c8:	2000      	movs	r0, #0
     5ca:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
     5cc:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     5ce:	d1c4      	bne.n	55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
						align = VA_STACK_ALIGN(long long);
     5d0:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     5d4:	4653      	mov	r3, sl
     5d6:	e7d3      	b.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
					v.ld = va_arg(ap, long double);
     5d8:	f108 0807 	add.w	r8, r8, #7
     5dc:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     5e0:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
     5e2:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
     5e6:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     5ea:	b135      	cbz	r5, 5fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x112>
					if (BUF_OFFSET + size > len) {
     5ec:	9806      	ldr	r0, [sp, #24]
     5ee:	4420      	add	r0, r4
     5f0:	42b0      	cmp	r0, r6
     5f2:	f63f af3b 	bhi.w	46c <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
     5f6:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
     5fa:	3408      	adds	r4, #8
				parsing = false;
     5fc:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
     600:	f04f 0a08 	mov.w	sl, #8
     604:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     606:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     60a:	2800      	cmp	r0, #0
     60c:	d078      	beq.n	700 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x218>
			if (!parsing) {
     60e:	f1bb 0f00 	cmp.w	fp, #0
     612:	f47f af6d 	bne.w	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
				if (*fmt == '%') {
     616:	2825      	cmp	r0, #37	; 0x25
     618:	d1f5      	bne.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
					arg_idx++;
     61a:	9b01      	ldr	r3, [sp, #4]
     61c:	3301      	adds	r3, #1
     61e:	9301      	str	r3, [sp, #4]
					parsing = true;
     620:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
     624:	f04f 0a04 	mov.w	sl, #4
     628:	e7ec      	b.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
			switch (*fmt) {
     62a:	4658      	mov	r0, fp
     62c:	e793      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     62e:	2000      	movs	r0, #0
				parsing = false;
     630:	4683      	mov	fp, r0
     632:	e7a5      	b.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
		} else if (size == sizeof(long long)) {
     634:	2b08      	cmp	r3, #8
     636:	d002      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
					return -EINVAL;
     638:	f06f 0015 	mvn.w	r0, #21
     63c:	e718      	b.n	470 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
     63e:	f108 0807 	add.w	r8, r8, #7
     642:	f028 0807 	bic.w	r8, r8, #7
     646:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     64a:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     64e:	3408      	adds	r4, #8
     650:	2308      	movs	r3, #8
     652:	e7d8      	b.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
		if (is_str_arg) {
     654:	b968      	cbnz	r0, 672 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18a>
		} else if (size == sizeof(int)) {
     656:	2b04      	cmp	r3, #4
     658:	d102      	bne.n	660 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x178>
			int v = va_arg(ap, int);
     65a:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     65e:	e7a4      	b.n	5aa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc2>
		} else if (size == sizeof(long long)) {
     660:	2b08      	cmp	r3, #8
     662:	d1e9      	bne.n	638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>
			long long v = va_arg(ap, long long);
     664:	f108 0807 	add.w	r8, r8, #7
     668:	f028 0807 	bic.w	r8, r8, #7
     66c:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     670:	e7ed      	b.n	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     672:	9a05      	ldr	r2, [sp, #20]
     674:	3a01      	subs	r2, #1
     676:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     678:	f858 2b04 	ldr.w	r2, [r8], #4
     67c:	9200      	str	r2, [sp, #0]
     67e:	e70d      	b.n	49c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
     680:	9a03      	ldr	r2, [sp, #12]
     682:	0790      	lsls	r0, r2, #30
     684:	d520      	bpl.n	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     686:	eba4 0e05 	sub.w	lr, r4, r5
     68a:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     68e:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     692:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     696:	d2cf      	bcs.n	638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     698:	2f0f      	cmp	r7, #15
     69a:	d8cd      	bhi.n	638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>
				if (buf0 != NULL) {
     69c:	b1f5      	cbz	r5, 6dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f4>
					str_ptr_pos[s_idx] = s_ptr_idx;
     69e:	f107 0240 	add.w	r2, r7, #64	; 0x40
     6a2:	eb0d 0e02 	add.w	lr, sp, r2
     6a6:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     6a8:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     6aa:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     6ae:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     6b2:	f1bc 0f00 	cmp.w	ip, #0
     6b6:	f43f af17 	beq.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     6ba:	f060 007f 	orn	r0, r0, #127	; 0x7f
     6be:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     6c2:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     6c6:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     6c8:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
     6cc:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     6ce:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
     6d0:	f64f 7eda 	movw	lr, #65498	; 0xffda
     6d4:	e797      	b.n	606 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6d6:	f04f 0c00 	mov.w	ip, #0
     6da:	e7da      	b.n	692 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1aa>
				} else if (is_ro) {
     6dc:	f1bc 0f00 	cmp.w	ip, #0
     6e0:	d001      	beq.n	6e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fe>
					len += 1;
     6e2:	3601      	adds	r6, #1
     6e4:	e7ef      	b.n	6c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1de>
				} else if (rws_pos_en) {
     6e6:	9802      	ldr	r0, [sp, #8]
					len += 2;
     6e8:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     6ea:	2800      	cmp	r0, #0
     6ec:	d1eb      	bne.n	6c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1de>
					len += strlen(s) + 1 + 1;
     6ee:	9800      	ldr	r0, [sp, #0]
     6f0:	e9cd 3106 	strd	r3, r1, [sp, #24]
     6f4:	f006 f8de 	bl	68b4 <strlen>
     6f8:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     6fc:	4406      	add	r6, r0
     6fe:	e7e2      	b.n	6c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1de>
	if (BUF_OFFSET / sizeof(int) > 255) {
     700:	1b63      	subs	r3, r4, r5
     702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     706:	d297      	bcs.n	638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>
	if (buf0 == NULL) {
     708:	b945      	cbnz	r5, 71c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x234>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     70a:	f1a6 0408 	sub.w	r4, r6, #8
     70e:	18e0      	adds	r0, r4, r3
     710:	e6ae      	b.n	470 <cbvprintf_package+0x34>
     712:	bf00      	nop
     714:	00007090 	.word	0x00007090
     718:	00008074 	.word	0x00008074
	if (rws_pos_en) {
     71c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     71e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     720:	089b      	lsrs	r3, r3, #2
     722:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     724:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
     728:	b1c2      	cbz	r2, 75c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x274>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     72a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     72c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
     730:	f1b9 0f00 	cmp.w	r9, #0
     734:	d005      	beq.n	742 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25a>
     736:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     738:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
     73a:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
     73e:	4297      	cmp	r7, r2
     740:	d10e      	bne.n	760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>
		if (BUF_OFFSET + 1 + size > len) {
     742:	f1c5 0301 	rsb	r3, r5, #1
     746:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
     74a:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
     74e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
     750:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
     754:	4557      	cmp	r7, sl
     756:	d112      	bne.n	77e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x296>
	return BUF_OFFSET;
     758:	1b60      	subs	r0, r4, r5
     75a:	e689      	b.n	470 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     75c:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     75e:	e7e5      	b.n	72c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x244>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     760:	f810 3b01 	ldrb.w	r3, [r0], #1
     764:	0619      	lsls	r1, r3, #24
     766:	d508      	bpl.n	77a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x292>
			if (BUF_OFFSET + 1 > len) {
     768:	eb04 0e0c 	add.w	lr, r4, ip
     76c:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     76e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     772:	f63f ae7b 	bhi.w	46c <cbvprintf_package+0x30>
			*buf++ = pos;
     776:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
     77a:	3201      	adds	r2, #1
     77c:	e7df      	b.n	73e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x256>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     77e:	f1b9 0f00 	cmp.w	r9, #0
     782:	d003      	beq.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
     784:	f998 2000 	ldrsb.w	r2, [r8]
     788:	2a00      	cmp	r2, #0
     78a:	db17      	blt.n	7bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2d4>
		if (rws_pos_en) {
     78c:	9b02      	ldr	r3, [sp, #8]
     78e:	b1d3      	cbz	r3, 7c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2de>
			*buf++ = str_ptr_arg[i];
     790:	f81a 200b 	ldrb.w	r2, [sl, fp]
     794:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
     798:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
     79a:	9b01      	ldr	r3, [sp, #4]
     79c:	1898      	adds	r0, r3, r2
     79e:	4420      	add	r0, r4
     7a0:	42b0      	cmp	r0, r6
     7a2:	f63f ae63 	bhi.w	46c <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
     7a6:	f898 0000 	ldrb.w	r0, [r8]
     7aa:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
     7ae:	9900      	ldr	r1, [sp, #0]
     7b0:	9203      	str	r2, [sp, #12]
     7b2:	4620      	mov	r0, r4
     7b4:	f006 f88e 	bl	68d4 <memcpy>
		buf += size;
     7b8:	9a03      	ldr	r2, [sp, #12]
     7ba:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     7bc:	f10a 0a01 	add.w	sl, sl, #1
     7c0:	f108 0801 	add.w	r8, r8, #1
     7c4:	e7c6      	b.n	754 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26c>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     7c6:	f898 2000 	ldrb.w	r2, [r8]
     7ca:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
     7ce:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     7d0:	9b02      	ldr	r3, [sp, #8]
     7d2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     7d6:	9800      	ldr	r0, [sp, #0]
     7d8:	f006 f86c 	bl	68b4 <strlen>
     7dc:	1c42      	adds	r2, r0, #1
     7de:	e7dc      	b.n	79a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b2>
		return -EFAULT;
     7e0:	f06f 000d 	mvn.w	r0, #13
     7e4:	e644      	b.n	470 <cbvprintf_package+0x34>
     7e6:	bf00      	nop

000007e8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7ec:	b095      	sub	sp, #84	; 0x54
     7ee:	af00      	add	r7, sp, #0
     7f0:	4604      	mov	r4, r0
     7f2:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
     7f6:	61bb      	str	r3, [r7, #24]
     7f8:	f3cb 03c0 	ubfx	r3, fp, #3, #1
     7fc:	627a      	str	r2, [r7, #36]	; 0x24
     7fe:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     800:	6239      	str	r1, [r7, #32]
     802:	b951      	cbnz	r1, 81a <CONFIG_ISR_STACK_SIZE+0x1a>
	buf += ros_nbr;
     804:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     806:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     808:	7880      	ldrb	r0, [r0, #2]
     80a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     80e:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
     810:	460d      	mov	r5, r1
     812:	42ae      	cmp	r6, r5
     814:	d81a      	bhi.n	84c <__z_interrupt_stack_SIZEOF+0xc>
	return (size_t)(uintptr_t)(buf - start);
     816:	1b03      	subs	r3, r0, r4
     818:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     81a:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     81e:	78e3      	ldrb	r3, [r4, #3]
     820:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
     822:	464e      	mov	r6, r9
	ro_cpy = ros_nbr &&
     824:	f1b9 0f00 	cmp.w	r9, #0
     828:	d002      	beq.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     82a:	f01b 0f01 	tst.w	fp, #1
     82e:	d116      	bne.n	85e <__z_interrupt_stack_SIZEOF+0x1e>
	rw_cpy = rws_nbr > 0 &&
     830:	697b      	ldr	r3, [r7, #20]
     832:	bb53      	cbnz	r3, 88a <__z_interrupt_stack_SIZEOF+0x4a>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
     834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     836:	b11b      	cbz	r3, 840 <__z_interrupt_stack_SIZEOF>
			cb(in_packaged, in_len, ctx);
     838:	69ba      	ldr	r2, [r7, #24]
     83a:	6a39      	ldr	r1, [r7, #32]
     83c:	4620      	mov	r0, r4
     83e:	4798      	blx	r3
		}

		return in_len;
     840:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     842:	4628      	mov	r0, r5
     844:	3754      	adds	r7, #84	; 0x54
     846:	46bd      	mov	sp, r7
     848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     84c:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
     850:	4640      	mov	r0, r8
     852:	f006 f82f 	bl	68b4 <strlen>
     856:	3001      	adds	r0, #1
     858:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
     85a:	3501      	adds	r5, #1
     85c:	e7d9      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
	rw_cpy = rws_nbr > 0 &&
     85e:	f894 a000 	ldrb.w	sl, [r4]
     862:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     864:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
     868:	ea4f 028a 	mov.w	r2, sl, lsl #2
     86c:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
     86e:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
     872:	2b00      	cmp	r3, #0
     874:	f040 8101 	bne.w	a7a <__z_interrupt_stack_SIZEOF+0x23a>
		out_len = (int)in_len;
     878:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
     87a:	46d0      	mov	r8, sl
     87c:	eb09 030a 	add.w	r3, r9, sl
	size_t strl_cnt = 0;
     880:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
     882:	4543      	cmp	r3, r8
     884:	d14e      	bne.n	924 <__z_interrupt_stack_SIZEOF+0xe4>
     886:	44ca      	add	sl, r9
     888:	e013      	b.n	8b2 <__z_interrupt_stack_SIZEOF+0x72>
	rw_cpy = rws_nbr > 0 &&
     88a:	f01b 0f02 	tst.w	fp, #2
     88e:	d0d1      	beq.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
	args_size = in_desc->len * sizeof(int);
     890:	f894 a000 	ldrb.w	sl, [r4]
     894:	ea4f 038a 	mov.w	r3, sl, lsl #2
     898:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     89a:	6863      	ldr	r3, [r4, #4]
     89c:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
     8a0:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
     8a4:	2b00      	cmp	r3, #0
     8a6:	d178      	bne.n	99a <__z_interrupt_stack_SIZEOF+0x15a>
		out_len = (int)in_len;
     8a8:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     8aa:	f1b9 0f00 	cmp.w	r9, #0
     8ae:	d14e      	bne.n	94e <__z_interrupt_stack_SIZEOF+0x10e>
	size_t strl_cnt = 0;
     8b0:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
     8b2:	f01b 0f05 	tst.w	fp, #5
     8b6:	bf0c      	ite	eq
     8b8:	2302      	moveq	r3, #2
     8ba:	2301      	movne	r3, #1
     8bc:	627b      	str	r3, [r7, #36]	; 0x24
     8be:	697b      	ldr	r3, [r7, #20]
     8c0:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     8c4:	f00b 0302 	and.w	r3, fp, #2
     8c8:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
     8ca:	45ca      	cmp	sl, r9
     8cc:	d0b9      	beq.n	842 <__z_interrupt_stack_SIZEOF+0x2>
			uint8_t arg_idx = *str_pos++;
     8ce:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
     8d2:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
     8d6:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
     8da:	4bad      	ldr	r3, [pc, #692]	; (b90 <__z_interrupt_stack_SIZEOF+0x350>)
     8dc:	4598      	cmp	r8, r3
     8de:	d302      	bcc.n	8e6 <__z_interrupt_stack_SIZEOF+0xa6>
     8e0:	4bac      	ldr	r3, [pc, #688]	; (b94 <__z_interrupt_stack_SIZEOF+0x354>)
     8e2:	4598      	cmp	r8, r3
     8e4:	d339      	bcc.n	95a <__z_interrupt_stack_SIZEOF+0x11a>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     8e6:	693b      	ldr	r3, [r7, #16]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d043      	beq.n	974 <__z_interrupt_stack_SIZEOF+0x134>
     8ec:	69f8      	ldr	r0, [r7, #28]
     8ee:	f005 fb5e 	bl	5fae <is_ptr>
     8f2:	2800      	cmp	r0, #0
     8f4:	d03e      	beq.n	974 <__z_interrupt_stack_SIZEOF+0x134>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     8f6:	46e8      	mov	r8, sp
     8f8:	b08a      	sub	sp, #40	; 0x28
     8fa:	466a      	mov	r2, sp
     8fc:	4ba6      	ldr	r3, [pc, #664]	; (b98 <__z_interrupt_stack_SIZEOF+0x358>)
     8fe:	6153      	str	r3, [r2, #20]
     900:	69fb      	ldr	r3, [r7, #28]
     902:	e9c2 3106 	strd	r3, r1, [r2, #24]
     906:	f44f 7300 	mov.w	r3, #512	; 0x200
     90a:	8413      	strh	r3, [r2, #32]
     90c:	4ba3      	ldr	r3, [pc, #652]	; (b9c <__z_interrupt_stack_SIZEOF+0x35c>)
     90e:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     912:	48a3      	ldr	r0, [pc, #652]	; (ba0 <__z_interrupt_stack_SIZEOF+0x360>)
     914:	2300      	movs	r3, #0
     916:	f44f 5112 	mov.w	r1, #9344	; 0x2480
     91a:	f001 f8c7 	bl	1aac <z_impl_z_log_msg_static_create>
				out_len -= 2;
     91e:	3d02      	subs	r5, #2
     920:	46c5      	mov	sp, r8
				continue;
     922:	e7d2      	b.n	8ca <__z_interrupt_stack_SIZEOF+0x8a>
				const char *str = *(const char **)&buf32[*str_pos];
     924:	f818 2b01 	ldrb.w	r2, [r8], #1
     928:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     92a:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
     92e:	f005 ffc1 	bl	68b4 <strlen>
				if (strl && strl_cnt < strl_len) {
     932:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
     934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     936:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     938:	b13a      	cbz	r2, 94a <__z_interrupt_stack_SIZEOF+0x10a>
     93a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     93e:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
     940:	bf3e      	ittt	cc
     942:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
     944:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
     948:	3601      	addcc	r6, #1
				out_len += len;
     94a:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
     94c:	e799      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     94e:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
     952:	bf1c      	itt	ne
     954:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
     956:	44ca      	addne	sl, r9
     958:	e7ab      	b.n	8b2 <__z_interrupt_stack_SIZEOF+0x72>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     95a:	693b      	ldr	r3, [r7, #16]
     95c:	b123      	cbz	r3, 968 <__z_interrupt_stack_SIZEOF+0x128>
     95e:	69f8      	ldr	r0, [r7, #28]
     960:	f005 fb25 	bl	5fae <is_ptr>
     964:	2800      	cmp	r0, #0
     966:	d1c6      	bne.n	8f6 <__z_interrupt_stack_SIZEOF+0xb6>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     968:	f01b 0f01 	tst.w	fp, #1
     96c:	d105      	bne.n	97a <__z_interrupt_stack_SIZEOF+0x13a>
					out_len -= drop_ro_str_pos ? 2 : 1;
     96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     970:	1aed      	subs	r5, r5, r3
     972:	e7aa      	b.n	8ca <__z_interrupt_stack_SIZEOF+0x8a>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     974:	6a3b      	ldr	r3, [r7, #32]
     976:	2b00      	cmp	r3, #0
     978:	d0a7      	beq.n	8ca <__z_interrupt_stack_SIZEOF+0x8a>
		return 1 + strlen(str);
     97a:	4640      	mov	r0, r8
     97c:	f005 ff9a 	bl	68b4 <strlen>
				if (strl && strl_cnt < strl_len) {
     980:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     982:	b143      	cbz	r3, 996 <__z_interrupt_stack_SIZEOF+0x156>
     984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     988:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
     98a:	bf3f      	itttt	cc
     98c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
     98e:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
     990:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
     994:	3601      	addcc	r6, #1
				out_len += (len - 1);
     996:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
     998:	e797      	b.n	8ca <__z_interrupt_stack_SIZEOF+0x8a>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     99a:	f1b9 0f00 	cmp.w	r9, #0
     99e:	d071      	beq.n	a84 <__z_interrupt_stack_SIZEOF+0x244>
     9a0:	f01b 0604 	ands.w	r6, fp, #4
     9a4:	d071      	beq.n	a8a <__z_interrupt_stack_SIZEOF+0x24a>
		keep_cnt = ros_nbr;
     9a6:	46c8      	mov	r8, r9
		scpy_cnt = 0;
     9a8:	2600      	movs	r6, #0
		dst = keep_str_pos;
     9aa:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
     9ae:	464a      	mov	r2, r9
     9b0:	4651      	mov	r1, sl
     9b2:	f005 ff8f 	bl	68d4 <memcpy>
	str_pos += ros_nbr;
     9b6:	697b      	ldr	r3, [r7, #20]
     9b8:	005b      	lsls	r3, r3, #1
     9ba:	60bb      	str	r3, [r7, #8]
     9bc:	697b      	ldr	r3, [r7, #20]
     9be:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
     9c0:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
     9c4:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     9c6:	f00b 0302 	and.w	r3, fp, #2
     9ca:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
     9cc:	697b      	ldr	r3, [r7, #20]
     9ce:	459a      	cmp	sl, r3
     9d0:	d15d      	bne.n	a8e <__z_interrupt_stack_SIZEOF+0x24e>
	out_desc.len = in_desc->len;
     9d2:	7823      	ldrb	r3, [r4, #0]
     9d4:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     9d6:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     9d8:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     9dc:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     9e0:	bf0c      	ite	eq
     9e2:	ea4f 0158 	moveq.w	r1, r8, lsr #1
     9e6:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     9e8:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     9ec:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     9ee:	f040 809d 	bne.w	b2c <__z_interrupt_stack_SIZEOF+0x2ec>
     9f2:	f01b 0f04 	tst.w	fp, #4
     9f6:	bf14      	ite	ne
     9f8:	4640      	movne	r0, r8
     9fa:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     9fc:	f894 b002 	ldrb.w	fp, [r4, #2]
     a00:	f894 a003 	ldrb.w	sl, [r4, #3]
     a04:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
     a06:	7062      	strb	r2, [r4, #1]
     a08:	70a0      	strb	r0, [r4, #2]
     a0a:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     a0c:	69ba      	ldr	r2, [r7, #24]
     a0e:	68f9      	ldr	r1, [r7, #12]
     a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a12:	4620      	mov	r0, r4
     a14:	4798      	blx	r3
	if (rv < 0) {
     a16:	1e05      	subs	r5, r0, #0
     a18:	f6ff af13 	blt.w	842 <__z_interrupt_stack_SIZEOF+0x2>
	*in_desc = in_desc_backup;
     a1c:	69fb      	ldr	r3, [r7, #28]
     a1e:	7023      	strb	r3, [r4, #0]
     a20:	693b      	ldr	r3, [r7, #16]
     a22:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     a24:	4641      	mov	r1, r8
     a26:	69ba      	ldr	r2, [r7, #24]
     a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
     a2a:	f884 b002 	strb.w	fp, [r4, #2]
     a2e:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     a32:	f107 0040 	add.w	r0, r7, #64	; 0x40
     a36:	4798      	blx	r3
	if (rv < 0) {
     a38:	f1b0 0800 	subs.w	r8, r0, #0
     a3c:	f2c0 80a3 	blt.w	b86 <__z_interrupt_stack_SIZEOF+0x346>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     a40:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
     a42:	69ba      	ldr	r2, [r7, #24]
     a44:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     a46:	eba3 0109 	sub.w	r1, r3, r9
     a4a:	68fb      	ldr	r3, [r7, #12]
     a4c:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
     a4e:	68bb      	ldr	r3, [r7, #8]
     a50:	1ac9      	subs	r1, r1, r3
     a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a54:	4798      	blx	r3
	if (rv < 0) {
     a56:	2800      	cmp	r0, #0
     a58:	f2c0 8097 	blt.w	b8a <__z_interrupt_stack_SIZEOF+0x34a>
	out_len += rv;
     a5c:	44a8      	add	r8, r5
	out_len += rv;
     a5e:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
     a62:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
     a66:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
     a6a:	45b3      	cmp	fp, r6
     a6c:	db60      	blt.n	b30 <__z_interrupt_stack_SIZEOF+0x2f0>
	(void)cb(NULL, 0, ctx);
     a6e:	2100      	movs	r1, #0
     a70:	69ba      	ldr	r2, [r7, #24]
     a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a74:	4608      	mov	r0, r1
     a76:	4798      	blx	r3
	return out_len;
     a78:	e6e3      	b.n	842 <__z_interrupt_stack_SIZEOF+0x2>
	if (cb == NULL) {
     a7a:	f04f 0800 	mov.w	r8, #0
     a7e:	f107 0030 	add.w	r0, r7, #48	; 0x30
     a82:	e794      	b.n	9ae <__z_interrupt_stack_SIZEOF+0x16e>
		scpy_cnt = 0;
     a84:	464e      	mov	r6, r9
		keep_cnt = 0;
     a86:	46c8      	mov	r8, r9
     a88:	e795      	b.n	9b6 <__z_interrupt_stack_SIZEOF+0x176>
     a8a:	46b0      	mov	r8, r6
     a8c:	e793      	b.n	9b6 <__z_interrupt_stack_SIZEOF+0x176>
		uint8_t arg_idx = *str_pos++;
     a8e:	f81a 1b02 	ldrb.w	r1, [sl], #2
     a92:	4a3f      	ldr	r2, [pc, #252]	; (b90 <__z_interrupt_stack_SIZEOF+0x350>)
		uint8_t arg_pos = *str_pos++;
     a94:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
     a98:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
     a9c:	4293      	cmp	r3, r2
     a9e:	d302      	bcc.n	aa6 <__z_interrupt_stack_SIZEOF+0x266>
     aa0:	4a3c      	ldr	r2, [pc, #240]	; (b94 <__z_interrupt_stack_SIZEOF+0x354>)
     aa2:	4293      	cmp	r3, r2
     aa4:	d31c      	bcc.n	ae0 <__z_interrupt_stack_SIZEOF+0x2a0>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     aa6:	693b      	ldr	r3, [r7, #16]
     aa8:	b123      	cbz	r3, ab4 <__z_interrupt_stack_SIZEOF+0x274>
     aaa:	69f8      	ldr	r0, [r7, #28]
     aac:	f005 fa7f 	bl	5fae <is_ptr>
     ab0:	2800      	cmp	r0, #0
     ab2:	d18b      	bne.n	9cc <__z_interrupt_stack_SIZEOF+0x18c>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	b9f3      	cbnz	r3, af6 <__z_interrupt_stack_SIZEOF+0x2b6>
				keep_str_pos[keep_cnt++] = arg_idx;
     ab8:	f108 0228 	add.w	r2, r8, #40	; 0x28
     abc:	f107 0028 	add.w	r0, r7, #40	; 0x28
     ac0:	4402      	add	r2, r0
     ac2:	f108 0301 	add.w	r3, r8, #1
     ac6:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
     aca:	f107 0250 	add.w	r2, r7, #80	; 0x50
     ace:	fa52 f383 	uxtab	r3, r2, r3
     ad2:	f108 0802 	add.w	r8, r8, #2
     ad6:	fa5f f888 	uxtb.w	r8, r8
     ada:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
     ade:	e775      	b.n	9cc <__z_interrupt_stack_SIZEOF+0x18c>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     ae0:	693b      	ldr	r3, [r7, #16]
     ae2:	b12b      	cbz	r3, af0 <__z_interrupt_stack_SIZEOF+0x2b0>
     ae4:	69f8      	ldr	r0, [r7, #28]
     ae6:	f005 fa62 	bl	5fae <is_ptr>
     aea:	2800      	cmp	r0, #0
     aec:	f47f af6e 	bne.w	9cc <__z_interrupt_stack_SIZEOF+0x18c>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     af0:	f01b 0f01 	tst.w	fp, #1
     af4:	d009      	beq.n	b0a <__z_interrupt_stack_SIZEOF+0x2ca>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     af6:	f106 0228 	add.w	r2, r6, #40	; 0x28
     afa:	f107 0128 	add.w	r1, r7, #40	; 0x28
     afe:	1c73      	adds	r3, r6, #1
     b00:	1856      	adds	r6, r2, r1
     b02:	f806 5c20 	strb.w	r5, [r6, #-32]
     b06:	b2de      	uxtb	r6, r3
     b08:	e760      	b.n	9cc <__z_interrupt_stack_SIZEOF+0x18c>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     b0a:	f01b 0f04 	tst.w	fp, #4
     b0e:	f43f af5d 	beq.w	9cc <__z_interrupt_stack_SIZEOF+0x18c>
				keep_str_pos[keep_cnt++] = arg_pos;
     b12:	f108 0228 	add.w	r2, r8, #40	; 0x28
     b16:	f107 0128 	add.w	r1, r7, #40	; 0x28
     b1a:	f108 0301 	add.w	r3, r8, #1
     b1e:	eb02 0801 	add.w	r8, r2, r1
     b22:	f808 5c10 	strb.w	r5, [r8, #-16]
     b26:	fa5f f883 	uxtb.w	r8, r3
     b2a:	e74f      	b.n	9cc <__z_interrupt_stack_SIZEOF+0x18c>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     b2c:	2000      	movs	r0, #0
     b2e:	e765      	b.n	9fc <__z_interrupt_stack_SIZEOF+0x1bc>
		uint8_t loc = cpy_str_pos[i];
     b30:	f81b 300a 	ldrb.w	r3, [fp, sl]
     b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
     b38:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     b3e:	b1fb      	cbz	r3, b80 <__z_interrupt_stack_SIZEOF+0x340>
     b40:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
     b44:	69ba      	ldr	r2, [r7, #24]
     b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b48:	2101      	movs	r1, #1
     b4a:	f107 002f 	add.w	r0, r7, #47	; 0x2f
     b4e:	4798      	blx	r3
		if (rv < 0) {
     b50:	2800      	cmp	r0, #0
     b52:	db1a      	blt.n	b8a <__z_interrupt_stack_SIZEOF+0x34a>
		out_len += rv;
     b54:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
     b56:	f1b8 0f00 	cmp.w	r8, #0
     b5a:	d106      	bne.n	b6a <__z_interrupt_stack_SIZEOF+0x32a>
     b5c:	4648      	mov	r0, r9
     b5e:	f005 fea9 	bl	68b4 <strlen>
     b62:	f100 0801 	add.w	r8, r0, #1
     b66:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
     b6a:	69ba      	ldr	r2, [r7, #24]
     b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b6e:	4641      	mov	r1, r8
     b70:	4648      	mov	r0, r9
     b72:	4798      	blx	r3
		if (rv < 0) {
     b74:	2800      	cmp	r0, #0
     b76:	db08      	blt.n	b8a <__z_interrupt_stack_SIZEOF+0x34a>
		out_len += rv;
     b78:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
     b7a:	f10b 0b01 	add.w	fp, fp, #1
     b7e:	e774      	b.n	a6a <__z_interrupt_stack_SIZEOF+0x22a>
		uint16_t str_len = strl ? strl[i] : 0;
     b80:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
     b84:	e7de      	b.n	b44 <__z_interrupt_stack_SIZEOF+0x304>
     b86:	4645      	mov	r5, r8
     b88:	e65b      	b.n	842 <__z_interrupt_stack_SIZEOF+0x2>
     b8a:	4605      	mov	r5, r0
     b8c:	e659      	b.n	842 <__z_interrupt_stack_SIZEOF+0x2>
     b8e:	bf00      	nop
     b90:	00007090 	.word	0x00007090
     b94:	00008074 	.word	0x00008074
     b98:	00007684 	.word	0x00007684
     b9c:	01000004 	.word	0x01000004
     ba0:	0000734c 	.word	0x0000734c

00000ba4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
     ba4:	4b01      	ldr	r3, [pc, #4]	; (bac <__printk_hook_install+0x8>)
     ba6:	6018      	str	r0, [r3, #0]
}
     ba8:	4770      	bx	lr
     baa:	bf00      	nop
     bac:	20000008 	.word	0x20000008

00000bb0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     bb0:	b530      	push	{r4, r5, lr}
     bb2:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     bb4:	2500      	movs	r5, #0
     bb6:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
     bba:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     bbc:	9500      	str	r5, [sp, #0]
     bbe:	a903      	add	r1, sp, #12
     bc0:	4805      	ldr	r0, [pc, #20]	; (bd8 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
     bc2:	9505      	str	r5, [sp, #20]
     bc4:	f000 f918 	bl	df8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     bc8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
     bcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     bce:	bfb8      	it	lt
     bd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     bd2:	b007      	add	sp, #28
     bd4:	bd30      	pop	{r4, r5, pc}
     bd6:	bf00      	nop
     bd8:	00005ffd 	.word	0x00005ffd

00000bdc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     be0:	8b05      	ldrh	r5, [r0, #24]
{
     be2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     be4:	0728      	lsls	r0, r5, #28
{
     be6:	4690      	mov	r8, r2
	if (processing) {
     be8:	d411      	bmi.n	c0e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     bea:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     bec:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     bf0:	f040 80cd 	bne.w	d8e <process_event+0x1b2>
			evt = process_recheck(mgr);
     bf4:	4620      	mov	r0, r4
     bf6:	f005 fa38 	bl	606a <process_recheck>
		}

		if (evt == EVT_NOP) {
     bfa:	b178      	cbz	r0, c1c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     bfc:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bfe:	8b21      	ldrh	r1, [r4, #24]
     c00:	2804      	cmp	r0, #4
     c02:	d811      	bhi.n	c28 <process_event+0x4c>
     c04:	e8df f000 	tbb	[pc, r0]
     c08:	856d10c3 	.word	0x856d10c3
     c0c:	95          	.byte	0x95
     c0d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     c0e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     c10:	bf0c      	ite	eq
     c12:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c16:	f045 0520 	orrne.w	r5, r5, #32
     c1a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     c1c:	f388 8811 	msr	BASEPRI, r8
     c20:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c28:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     c2c:	45aa      	cmp	sl, r5
     c2e:	f000 80a6 	beq.w	d7e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     c32:	2700      	movs	r7, #0
     c34:	46b9      	mov	r9, r7
     c36:	463e      	mov	r6, r7
     c38:	68a3      	ldr	r3, [r4, #8]
     c3a:	2b00      	cmp	r3, #0
     c3c:	f000 80bd 	beq.w	dba <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     c40:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     c44:	8321      	strh	r1, [r4, #24]
     c46:	f388 8811 	msr	BASEPRI, r8
     c4a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     c4e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     c50:	2900      	cmp	r1, #0
     c52:	f000 80bb 	beq.w	dcc <process_event+0x1f0>
	return node->next;
     c56:	680d      	ldr	r5, [r1, #0]
     c58:	2900      	cmp	r1, #0
     c5a:	f000 80b7 	beq.w	dcc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     c5e:	f8d1 8004 	ldr.w	r8, [r1, #4]
     c62:	4633      	mov	r3, r6
     c64:	4652      	mov	r2, sl
     c66:	4620      	mov	r0, r4
     c68:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     c6a:	2d00      	cmp	r5, #0
     c6c:	d076      	beq.n	d5c <process_event+0x180>
     c6e:	682b      	ldr	r3, [r5, #0]
     c70:	4629      	mov	r1, r5
     c72:	461d      	mov	r5, r3
     c74:	e7f0      	b.n	c58 <process_event+0x7c>
     c76:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     c7a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     c7c:	2a01      	cmp	r2, #1
     c7e:	d81b      	bhi.n	cb8 <process_event+0xdc>
	list->head = NULL;
     c80:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c82:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     c86:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     c88:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c8a:	b289      	uxth	r1, r1
	list->tail = NULL;
     c8c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     c90:	d109      	bne.n	ca6 <process_event+0xca>
     c92:	463b      	mov	r3, r7
     c94:	e003      	b.n	c9e <process_event+0xc2>
				mgr->refs += 1U;
     c96:	8b62      	ldrh	r2, [r4, #26]
     c98:	3201      	adds	r2, #1
     c9a:	8362      	strh	r2, [r4, #26]
	return node->next;
     c9c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c9e:	2b00      	cmp	r3, #0
     ca0:	d1f9      	bne.n	c96 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ca2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     ca6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     ca8:	4620      	mov	r0, r4
     caa:	f005 f9de 	bl	606a <process_recheck>
     cae:	2800      	cmp	r0, #0
     cb0:	d07b      	beq.n	daa <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     cb2:	f041 0120 	orr.w	r1, r1, #32
     cb6:	e077      	b.n	da8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     cb8:	2b04      	cmp	r3, #4
     cba:	d10a      	bne.n	cd2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cbc:	f021 0107 	bic.w	r1, r1, #7
     cc0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     cc2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     cc4:	4620      	mov	r0, r4
     cc6:	f005 f9d0 	bl	606a <process_recheck>
     cca:	b110      	cbz	r0, cd2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     ccc:	f041 0120 	orr.w	r1, r1, #32
     cd0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     cd2:	8b21      	ldrh	r1, [r4, #24]
     cd4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     cd8:	45aa      	cmp	sl, r5
     cda:	d050      	beq.n	d7e <process_event+0x1a2>
     cdc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     cde:	46b9      	mov	r9, r7
     ce0:	e7aa      	b.n	c38 <process_event+0x5c>
			transit = mgr->transitions->start;
     ce2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ce4:	f021 0107 	bic.w	r1, r1, #7
     ce8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     cec:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     cee:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     cf2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     cf4:	d12d      	bne.n	d52 <process_event+0x176>
		    || (transit != NULL)) {
     cf6:	f1b9 0f00 	cmp.w	r9, #0
     cfa:	d040      	beq.n	d7e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     cfc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     d00:	8321      	strh	r1, [r4, #24]
     d02:	f388 8811 	msr	BASEPRI, r8
     d06:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     d0a:	493a      	ldr	r1, [pc, #232]	; (df4 <process_event+0x218>)
     d0c:	4620      	mov	r0, r4
     d0e:	47c8      	blx	r9
     d10:	e029      	b.n	d66 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d12:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     d16:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d18:	f041 0104 	orr.w	r1, r1, #4
     d1c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     d1e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     d20:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     d24:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     d26:	d0e6      	beq.n	cf6 <process_event+0x11a>
     d28:	2700      	movs	r7, #0
		res = 0;
     d2a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d2c:	f04f 0a04 	mov.w	sl, #4
     d30:	e782      	b.n	c38 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d32:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     d36:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d38:	f041 0105 	orr.w	r1, r1, #5
     d3c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     d3e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     d40:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     d44:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     d46:	d0d6      	beq.n	cf6 <process_event+0x11a>
     d48:	2700      	movs	r7, #0
		res = 0;
     d4a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d4c:	f04f 0a05 	mov.w	sl, #5
     d50:	e772      	b.n	c38 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     d52:	2700      	movs	r7, #0
		res = 0;
     d54:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d56:	f04f 0a06 	mov.w	sl, #6
     d5a:	e76d      	b.n	c38 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d5c:	462b      	mov	r3, r5
     d5e:	e787      	b.n	c70 <process_event+0x94>
			if (transit != NULL) {
     d60:	f1b9 0f00 	cmp.w	r9, #0
     d64:	d1d1      	bne.n	d0a <process_event+0x12e>
	__asm__ volatile(
     d66:	f04f 0320 	mov.w	r3, #32
     d6a:	f3ef 8811 	mrs	r8, BASEPRI
     d6e:	f383 8812 	msr	BASEPRI_MAX, r3
     d72:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     d76:	8b23      	ldrh	r3, [r4, #24]
     d78:	f023 0308 	bic.w	r3, r3, #8
     d7c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     d7e:	8b25      	ldrh	r5, [r4, #24]
     d80:	06ea      	lsls	r2, r5, #27
     d82:	d52e      	bpl.n	de2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     d84:	f025 0310 	bic.w	r3, r5, #16
     d88:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     d8a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     d8e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d90:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     d92:	2e00      	cmp	r6, #0
     d94:	f6bf af6f 	bge.w	c76 <process_event+0x9a>
	list->head = NULL;
     d98:	2300      	movs	r3, #0
		*clients = mgr->clients;
     d9a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     d9c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     da0:	f021 0107 	bic.w	r1, r1, #7
     da4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     da8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     daa:	8b21      	ldrh	r1, [r4, #24]
     dac:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     db0:	45aa      	cmp	sl, r5
     db2:	f04f 0900 	mov.w	r9, #0
     db6:	f47f af3f 	bne.w	c38 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     dba:	2f00      	cmp	r7, #0
     dbc:	d09b      	beq.n	cf6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     dbe:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     dc2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     dc4:	f388 8811 	msr	BASEPRI, r8
     dc8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     dcc:	2f00      	cmp	r7, #0
     dce:	d0c7      	beq.n	d60 <process_event+0x184>
	return node->next;
     dd0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     dd2:	4639      	mov	r1, r7
     dd4:	4633      	mov	r3, r6
     dd6:	4652      	mov	r2, sl
     dd8:	4620      	mov	r0, r4
     dda:	f005 f972 	bl	60c2 <notify_one>
	list->head = node;
     dde:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     de0:	e7f4      	b.n	dcc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     de2:	06ab      	lsls	r3, r5, #26
     de4:	f57f af1a 	bpl.w	c1c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     de8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     dec:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     dee:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     df2:	e6ff      	b.n	bf4 <process_event+0x18>
     df4:	000060ef 	.word	0x000060ef

00000df8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dfc:	4681      	mov	r9, r0
     dfe:	b095      	sub	sp, #84	; 0x54
     e00:	468b      	mov	fp, r1
     e02:	4617      	mov	r7, r2
     e04:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     e06:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     e08:	7838      	ldrb	r0, [r7, #0]
     e0a:	b908      	cbnz	r0, e10 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     e0c:	4628      	mov	r0, r5
     e0e:	e358      	b.n	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
			OUTC(*fp++);
     e10:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     e12:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     e14:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     e16:	d006      	beq.n	e26 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     e18:	4659      	mov	r1, fp
     e1a:	47c8      	blx	r9
     e1c:	2800      	cmp	r0, #0
     e1e:	f2c0 8350 	blt.w	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
     e22:	3501      	adds	r5, #1
		if (bps == NULL) {
     e24:	e1fb      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
		} state = {
     e26:	2218      	movs	r2, #24
     e28:	2100      	movs	r1, #0
     e2a:	a80e      	add	r0, sp, #56	; 0x38
     e2c:	f005 fd5d 	bl	68ea <memset>
	if (*sp == '%') {
     e30:	787b      	ldrb	r3, [r7, #1]
     e32:	2b25      	cmp	r3, #37	; 0x25
     e34:	d07d      	beq.n	f32 <z_cbvprintf_impl+0x13a>
     e36:	2300      	movs	r3, #0
     e38:	1c78      	adds	r0, r7, #1
     e3a:	4698      	mov	r8, r3
     e3c:	469e      	mov	lr, r3
     e3e:	469c      	mov	ip, r3
     e40:	461e      	mov	r6, r3
     e42:	4601      	mov	r1, r0
		switch (*sp) {
     e44:	f810 2b01 	ldrb.w	r2, [r0], #1
     e48:	2a2b      	cmp	r2, #43	; 0x2b
     e4a:	f000 80a1 	beq.w	f90 <z_cbvprintf_impl+0x198>
     e4e:	f200 8098 	bhi.w	f82 <z_cbvprintf_impl+0x18a>
     e52:	2a20      	cmp	r2, #32
     e54:	f000 809f 	beq.w	f96 <z_cbvprintf_impl+0x19e>
     e58:	2a23      	cmp	r2, #35	; 0x23
     e5a:	f000 809f 	beq.w	f9c <z_cbvprintf_impl+0x1a4>
     e5e:	b12b      	cbz	r3, e6c <z_cbvprintf_impl+0x74>
     e60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     e68:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     e6c:	f1b8 0f00 	cmp.w	r8, #0
     e70:	d005      	beq.n	e7e <z_cbvprintf_impl+0x86>
     e72:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e76:	f043 0320 	orr.w	r3, r3, #32
     e7a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     e7e:	f1be 0f00 	cmp.w	lr, #0
     e82:	d005      	beq.n	e90 <z_cbvprintf_impl+0x98>
     e84:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e88:	f043 0310 	orr.w	r3, r3, #16
     e8c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     e90:	f1bc 0f00 	cmp.w	ip, #0
     e94:	d005      	beq.n	ea2 <z_cbvprintf_impl+0xaa>
     e96:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     e9a:	f043 0308 	orr.w	r3, r3, #8
     e9e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     ea2:	b12e      	cbz	r6, eb0 <z_cbvprintf_impl+0xb8>
     ea4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ea8:	f043 0304 	orr.w	r3, r3, #4
     eac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     eb0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     eb4:	f003 0044 	and.w	r0, r3, #68	; 0x44
     eb8:	2844      	cmp	r0, #68	; 0x44
     eba:	d103      	bne.n	ec4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     ebc:	f36f 1386 	bfc	r3, #6, #1
     ec0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     ec4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     ec8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ece:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     ed2:	d17f      	bne.n	fd4 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
     ed4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     ed8:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     edc:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     ede:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     ee2:	781a      	ldrb	r2, [r3, #0]
     ee4:	2a2e      	cmp	r2, #46	; 0x2e
     ee6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     eea:	bf0c      	ite	eq
     eec:	2101      	moveq	r1, #1
     eee:	2100      	movne	r1, #0
     ef0:	f361 0241 	bfi	r2, r1, #1, #1
     ef4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     ef8:	d178      	bne.n	fec <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
     efa:	785a      	ldrb	r2, [r3, #1]
     efc:	2a2a      	cmp	r2, #42	; 0x2a
     efe:	d06e      	beq.n	fde <z_cbvprintf_impl+0x1e6>
	++sp;
     f00:	3301      	adds	r3, #1
	size_t val = 0;
     f02:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     f04:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     f08:	4619      	mov	r1, r3
     f0a:	f811 0b01 	ldrb.w	r0, [r1], #1
     f0e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     f12:	2e09      	cmp	r6, #9
     f14:	f240 8095 	bls.w	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
	conv->unsupported |= ((conv->prec_value < 0)
     f18:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     f1c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     f1e:	f3c1 0040 	ubfx	r0, r1, #1, #1
     f22:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     f26:	460a      	mov	r2, r1
     f28:	f360 0241 	bfi	r2, r0, #1, #1
     f2c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     f30:	e05c      	b.n	fec <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
     f32:	1cba      	adds	r2, r7, #2
     f34:	9203      	str	r2, [sp, #12]
     f36:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     f3a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     f3e:	07da      	lsls	r2, r3, #31
     f40:	f140 812e 	bpl.w	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
			width = va_arg(ap, int);
     f44:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     f48:	f1b8 0f00 	cmp.w	r8, #0
     f4c:	da07      	bge.n	f5e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
     f4e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     f52:	f042 0204 	orr.w	r2, r2, #4
     f56:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     f5a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     f5e:	075e      	lsls	r6, r3, #29
     f60:	f140 8127 	bpl.w	11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
			int arg = va_arg(ap, int);
     f64:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     f68:	f1ba 0f00 	cmp.w	sl, #0
     f6c:	f280 8126 	bge.w	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
				conv->prec_present = false;
     f70:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     f74:	f36f 0341 	bfc	r3, #1, #1
     f78:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     f7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     f80:	e11c      	b.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
		switch (*sp) {
     f82:	2a2d      	cmp	r2, #45	; 0x2d
     f84:	d00d      	beq.n	fa2 <z_cbvprintf_impl+0x1aa>
     f86:	2a30      	cmp	r2, #48	; 0x30
     f88:	f47f af69 	bne.w	e5e <z_cbvprintf_impl+0x66>
     f8c:	2301      	movs	r3, #1
	} while (loop);
     f8e:	e758      	b.n	e42 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     f90:	f04f 0c01 	mov.w	ip, #1
     f94:	e755      	b.n	e42 <z_cbvprintf_impl+0x4a>
     f96:	f04f 0e01 	mov.w	lr, #1
     f9a:	e752      	b.n	e42 <z_cbvprintf_impl+0x4a>
     f9c:	f04f 0801 	mov.w	r8, #1
     fa0:	e74f      	b.n	e42 <z_cbvprintf_impl+0x4a>
     fa2:	2601      	movs	r6, #1
     fa4:	e74d      	b.n	e42 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     fa6:	fb0e 6202 	mla	r2, lr, r2, r6
     faa:	3a30      	subs	r2, #48	; 0x30
     fac:	4603      	mov	r3, r0
     fae:	4618      	mov	r0, r3
     fb0:	f810 6b01 	ldrb.w	r6, [r0], #1
     fb4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     fb8:	f1bc 0f09 	cmp.w	ip, #9
     fbc:	d9f3      	bls.n	fa6 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
     fbe:	4299      	cmp	r1, r3
     fc0:	d08f      	beq.n	ee2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     fc2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     fc6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     fc8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     fca:	f362 0141 	bfi	r1, r2, #1, #1
     fce:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     fd2:	e786      	b.n	ee2 <z_cbvprintf_impl+0xea>
     fd4:	460b      	mov	r3, r1
	size_t val = 0;
     fd6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     fd8:	f04f 0e0a 	mov.w	lr, #10
     fdc:	e7e7      	b.n	fae <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
     fde:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     fe2:	f042 0204 	orr.w	r2, r2, #4
     fe6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     fea:	3302      	adds	r3, #2
	switch (*sp) {
     fec:	781a      	ldrb	r2, [r3, #0]
     fee:	2a6c      	cmp	r2, #108	; 0x6c
     ff0:	d047      	beq.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
     ff2:	d82b      	bhi.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
     ff4:	2a68      	cmp	r2, #104	; 0x68
     ff6:	d031      	beq.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
     ff8:	2a6a      	cmp	r2, #106	; 0x6a
     ffa:	d04b      	beq.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     ffc:	2a4c      	cmp	r2, #76	; 0x4c
     ffe:	d051      	beq.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
	conv->specifier = *sp++;
    1000:	461a      	mov	r2, r3
    1002:	f812 3b01 	ldrb.w	r3, [r2], #1
    1006:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1008:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    100a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    100e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1012:	f200 80be 	bhi.w	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
    1016:	2b6d      	cmp	r3, #109	; 0x6d
    1018:	d851      	bhi.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    101a:	2b69      	cmp	r3, #105	; 0x69
    101c:	f200 80b9 	bhi.w	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
    1020:	2b57      	cmp	r3, #87	; 0x57
    1022:	d867      	bhi.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    1024:	2b41      	cmp	r3, #65	; 0x41
    1026:	d003      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1028:	3b45      	subs	r3, #69	; 0x45
    102a:	2b02      	cmp	r3, #2
    102c:	f200 80b1 	bhi.w	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
		conv->specifier_cat = SPECIFIER_FP;
    1030:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1034:	2204      	movs	r2, #4
    1036:	f362 0302 	bfi	r3, r2, #0, #3
    103a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    103e:	2301      	movs	r3, #1
			break;
    1040:	e073      	b.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
		val = 10U * val + *sp++ - '0';
    1042:	fb0c 0202 	mla	r2, ip, r2, r0
    1046:	3a30      	subs	r2, #48	; 0x30
    1048:	460b      	mov	r3, r1
    104a:	e75d      	b.n	f08 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    104c:	2a74      	cmp	r2, #116	; 0x74
    104e:	d025      	beq.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    1050:	2a7a      	cmp	r2, #122	; 0x7a
    1052:	d1d5      	bne.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
		conv->length_mod = LENGTH_Z;
    1054:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1058:	2106      	movs	r1, #6
    105a:	e00c      	b.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
		if (*++sp == 'h') {
    105c:	785a      	ldrb	r2, [r3, #1]
    105e:	2a68      	cmp	r2, #104	; 0x68
    1060:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1064:	d106      	bne.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
			conv->length_mod = LENGTH_HH;
    1066:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1068:	f361 02c6 	bfi	r2, r1, #3, #4
    106c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1070:	3302      	adds	r3, #2
    1072:	e7c5      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
			conv->length_mod = LENGTH_H;
    1074:	2102      	movs	r1, #2
    1076:	f361 02c6 	bfi	r2, r1, #3, #4
    107a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    107e:	3301      	adds	r3, #1
    1080:	e7be      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
		if (*++sp == 'l') {
    1082:	785a      	ldrb	r2, [r3, #1]
    1084:	2a6c      	cmp	r2, #108	; 0x6c
    1086:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    108a:	d101      	bne.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
			conv->length_mod = LENGTH_LL;
    108c:	2104      	movs	r1, #4
    108e:	e7eb      	b.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
			conv->length_mod = LENGTH_L;
    1090:	2103      	movs	r1, #3
    1092:	e7f0      	b.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
		conv->length_mod = LENGTH_J;
    1094:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1098:	2105      	movs	r1, #5
    109a:	e7ec      	b.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
		conv->length_mod = LENGTH_T;
    109c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    10a0:	2107      	movs	r1, #7
    10a2:	e7e8      	b.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
		conv->unsupported = true;
    10a4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    10a8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    10ac:	f022 0202 	bic.w	r2, r2, #2
    10b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    10b4:	f042 0202 	orr.w	r2, r2, #2
    10b8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    10bc:	e7df      	b.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
	switch (conv->specifier) {
    10be:	3b6e      	subs	r3, #110	; 0x6e
    10c0:	b2d9      	uxtb	r1, r3
    10c2:	2301      	movs	r3, #1
    10c4:	408b      	lsls	r3, r1
    10c6:	f240 4182 	movw	r1, #1154	; 0x482
    10ca:	420b      	tst	r3, r1
    10cc:	d137      	bne.n	113e <CONFIG_FPROTECT_BLOCK_SIZE+0x13e>
    10ce:	f013 0f24 	tst.w	r3, #36	; 0x24
    10d2:	d151      	bne.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    10d4:	07d8      	lsls	r0, r3, #31
    10d6:	d55c      	bpl.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
		conv->specifier_cat = SPECIFIER_PTR;
    10d8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    10dc:	2103      	movs	r1, #3
    10de:	f361 0302 	bfi	r3, r1, #0, #3
    10e2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    10e6:	f002 0378 	and.w	r3, r2, #120	; 0x78
    10ea:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    10ee:	424b      	negs	r3, r1
    10f0:	414b      	adcs	r3, r1
    10f2:	e01a      	b.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
	switch (conv->specifier) {
    10f4:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    10f8:	b2c9      	uxtb	r1, r1
    10fa:	2001      	movs	r0, #1
    10fc:	fa00 f101 	lsl.w	r1, r0, r1
    1100:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1104:	d194      	bne.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1106:	f640 0601 	movw	r6, #2049	; 0x801
    110a:	4231      	tst	r1, r6
    110c:	d11d      	bne.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    110e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1112:	d03e      	beq.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
		conv->specifier_cat = SPECIFIER_SINT;
    1114:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1118:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    111c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1120:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1122:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1126:	d034      	beq.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
	bool unsupported = false;
    1128:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    112a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    112e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1132:	430b      	orrs	r3, r1
    1134:	f363 0241 	bfi	r2, r3, #1, #1
    1138:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    113c:	e6fd      	b.n	f3a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    113e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1142:	2102      	movs	r1, #2
    1144:	f361 0302 	bfi	r3, r1, #0, #3
    1148:	e7e8      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    114a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    114e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1150:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1154:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1158:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    115a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    115e:	bf02      	ittt	eq
    1160:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1164:	f041 0101 	orreq.w	r1, r1, #1
    1168:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    116c:	2b63      	cmp	r3, #99	; 0x63
    116e:	d1db      	bne.n	1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1170:	1e13      	subs	r3, r2, #0
    1172:	bf18      	it	ne
    1174:	2301      	movne	r3, #1
    1176:	e7d8      	b.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
		conv->specifier_cat = SPECIFIER_PTR;
    1178:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    117c:	2103      	movs	r1, #3
    117e:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1182:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1186:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    118a:	bf14      	ite	ne
    118c:	2301      	movne	r3, #1
    118e:	2300      	moveq	r3, #0
    1190:	e7cb      	b.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
		conv->invalid = true;
    1192:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1196:	f043 0301 	orr.w	r3, r3, #1
    119a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    119e:	e7c3      	b.n	1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>
		} else if (conv->width_present) {
    11a0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    11a4:	2a00      	cmp	r2, #0
			width = conv->width_value;
    11a6:	bfb4      	ite	lt
    11a8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    11ac:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    11b0:	e6d5      	b.n	f5e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    11b2:	0798      	lsls	r0, r3, #30
    11b4:	f57f aee2 	bpl.w	f7c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    11b8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    11bc:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    11c0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    11c2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    11c6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    11ca:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    11ce:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    11d0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    11d4:	d133      	bne.n	123e <CONFIG_FPROTECT_BLOCK_SIZE+0x23e>
			switch (length_mod) {
    11d6:	1ecb      	subs	r3, r1, #3
    11d8:	2b04      	cmp	r3, #4
    11da:	d804      	bhi.n	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
    11dc:	e8df f003 	tbb	[pc, r3]
    11e0:	21464621 	.word	0x21464621
    11e4:	21          	.byte	0x21
    11e5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    11e6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    11e8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    11ea:	ea4f 72e3 	mov.w	r2, r3, asr #31
    11ee:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    11f2:	d11c      	bne.n	122e <CONFIG_FPROTECT_BLOCK_SIZE+0x22e>
				value->sint = (signed char)value->sint;
    11f4:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    11f8:	17da      	asrs	r2, r3, #31
    11fa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    11fe:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1200:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1204:	f013 0603 	ands.w	r6, r3, #3
    1208:	d050      	beq.n	12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
			OUTS(sp, fp);
    120a:	9b03      	ldr	r3, [sp, #12]
    120c:	463a      	mov	r2, r7
    120e:	4659      	mov	r1, fp
    1210:	4648      	mov	r0, r9
    1212:	f005 f86e 	bl	62f2 <outs>
    1216:	2800      	cmp	r0, #0
    1218:	f2c0 8153 	blt.w	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
    121c:	4405      	add	r5, r0
			continue;
    121e:	9f03      	ldr	r7, [sp, #12]
    1220:	e5f2      	b.n	e08 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1222:	f854 3b04 	ldr.w	r3, [r4], #4
    1226:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1228:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    122c:	e7e8      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
			} else if (length_mod == LENGTH_H) {
    122e:	2902      	cmp	r1, #2
    1230:	d1e5      	bne.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
				value->sint = (short)value->sint;
    1232:	b21a      	sxth	r2, r3
    1234:	f343 33c0 	sbfx	r3, r3, #15, #1
    1238:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    123c:	e7df      	b.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
		} else if (specifier_cat == SPECIFIER_UINT) {
    123e:	2b02      	cmp	r3, #2
    1240:	d124      	bne.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
			switch (length_mod) {
    1242:	1ecb      	subs	r3, r1, #3
    1244:	2b04      	cmp	r3, #4
    1246:	d804      	bhi.n	1252 <CONFIG_FPROTECT_BLOCK_SIZE+0x252>
    1248:	e8df f003 	tbb	[pc, r3]
    124c:	18101018 	.word	0x18101018
    1250:	18          	.byte	0x18
    1251:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1252:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1254:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1258:	f04f 0200 	mov.w	r2, #0
    125c:	d014      	beq.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
			} else if (length_mod == LENGTH_H) {
    125e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1260:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1264:	d1cc      	bne.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
				value->uint = (unsigned short)value->uint;
    1266:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1268:	930e      	str	r3, [sp, #56]	; 0x38
    126a:	e7c9      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
					(uint_value_type)va_arg(ap,
    126c:	3407      	adds	r4, #7
    126e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1272:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1276:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    127a:	e7c1      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
					(uint_value_type)va_arg(ap, size_t);
    127c:	f854 3b04 	ldr.w	r3, [r4], #4
    1280:	930e      	str	r3, [sp, #56]	; 0x38
    1282:	2300      	movs	r3, #0
    1284:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1286:	e7bb      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
				value->uint = (unsigned char)value->uint;
    1288:	b2db      	uxtb	r3, r3
    128a:	e7cd      	b.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
		} else if (specifier_cat == SPECIFIER_FP) {
    128c:	2b04      	cmp	r3, #4
    128e:	d108      	bne.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
					(sint_value_type)va_arg(ap, long long);
    1290:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1292:	f024 0407 	bic.w	r4, r4, #7
    1296:	e9d4 2300 	ldrd	r2, r3, [r4]
    129a:	3408      	adds	r4, #8
    129c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    12a0:	e7ae      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
		} else if (specifier_cat == SPECIFIER_PTR) {
    12a2:	2b03      	cmp	r3, #3
    12a4:	d1ac      	bne.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
			value->ptr = va_arg(ap, void *);
    12a6:	f854 3b04 	ldr.w	r3, [r4], #4
    12aa:	e7dd      	b.n	1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>
		switch (conv->specifier) {
    12ac:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    12b0:	2878      	cmp	r0, #120	; 0x78
    12b2:	d8b4      	bhi.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    12b4:	2862      	cmp	r0, #98	; 0x62
    12b6:	d81c      	bhi.n	12f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f2>
    12b8:	2825      	cmp	r0, #37	; 0x25
    12ba:	f43f adad 	beq.w	e18 <z_cbvprintf_impl+0x20>
    12be:	2858      	cmp	r0, #88	; 0x58
    12c0:	d1ad      	bne.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
			bps = encode_uint(value->uint, conv, buf, bpe);
    12c2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    12c6:	9300      	str	r3, [sp, #0]
    12c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    12cc:	ab08      	add	r3, sp, #32
    12ce:	aa10      	add	r2, sp, #64	; 0x40
    12d0:	f004 ffc9 	bl	6266 <encode_uint>
			if (precision >= 0) {
    12d4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    12d8:	4607      	mov	r7, r0
			if (precision >= 0) {
    12da:	f280 809a 	bge.w	1412 <CONFIG_FPROTECT_BLOCK_SIZE+0x412>
		if (bps == NULL) {
    12de:	2f00      	cmp	r7, #0
    12e0:	d09d      	beq.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
		size_t nj_len = (bpe - bps);
    12e2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    12e6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    12e8:	2e00      	cmp	r6, #0
    12ea:	f000 80c1 	beq.w	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
			nj_len += 1U;
    12ee:	3001      	adds	r0, #1
    12f0:	e0be      	b.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
		switch (conv->specifier) {
    12f2:	3863      	subs	r0, #99	; 0x63
    12f4:	2815      	cmp	r0, #21
    12f6:	d892      	bhi.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    12f8:	a201      	add	r2, pc, #4	; (adr r2, 1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>)
    12fa:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    12fe:	bf00      	nop
    1300:	000013d5 	.word	0x000013d5
    1304:	000013e7 	.word	0x000013e7
    1308:	0000121f 	.word	0x0000121f
    130c:	0000121f 	.word	0x0000121f
    1310:	0000121f 	.word	0x0000121f
    1314:	0000121f 	.word	0x0000121f
    1318:	000013e7 	.word	0x000013e7
    131c:	0000121f 	.word	0x0000121f
    1320:	0000121f 	.word	0x0000121f
    1324:	0000121f 	.word	0x0000121f
    1328:	0000121f 	.word	0x0000121f
    132c:	00001475 	.word	0x00001475
    1330:	0000140d 	.word	0x0000140d
    1334:	00001433 	.word	0x00001433
    1338:	0000121f 	.word	0x0000121f
    133c:	0000121f 	.word	0x0000121f
    1340:	00001359 	.word	0x00001359
    1344:	0000121f 	.word	0x0000121f
    1348:	0000140d 	.word	0x0000140d
    134c:	0000121f 	.word	0x0000121f
    1350:	0000121f 	.word	0x0000121f
    1354:	0000140d 	.word	0x0000140d
			if (precision >= 0) {
    1358:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    135c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    135e:	db35      	blt.n	13cc <CONFIG_FPROTECT_BLOCK_SIZE+0x3cc>
				len = strnlen(bps, precision);
    1360:	4651      	mov	r1, sl
    1362:	4638      	mov	r0, r7
    1364:	f005 faad 	bl	68c2 <strnlen>
			bpe = bps + len;
    1368:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    136c:	2f00      	cmp	r7, #0
    136e:	f43f af56 	beq.w	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
		char sign = 0;
    1372:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1374:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1378:	f013 0210 	ands.w	r2, r3, #16
    137c:	9205      	str	r2, [sp, #20]
    137e:	f000 8093 	beq.w	14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>
			nj_len += 2U;
    1382:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1384:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1386:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1388:	bf48      	it	mi
    138a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    138c:	9204      	str	r2, [sp, #16]
    138e:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1390:	bf48      	it	mi
    1392:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1394:	f1b8 0f00 	cmp.w	r8, #0
    1398:	f340 80a0 	ble.w	14dc <CONFIG_FPROTECT_BLOCK_SIZE+0x4dc>
			if (!conv->flag_dash) {
    139c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    13a0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    13a4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    13a8:	0750      	lsls	r0, r2, #29
    13aa:	9306      	str	r3, [sp, #24]
    13ac:	f100 8096 	bmi.w	14dc <CONFIG_FPROTECT_BLOCK_SIZE+0x4dc>
				if (conv->flag_zero) {
    13b0:	0651      	lsls	r1, r2, #25
    13b2:	f140 8089 	bpl.w	14c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c8>
					if (sign != 0) {
    13b6:	b13e      	cbz	r6, 13c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c8>
						OUTC(sign);
    13b8:	4659      	mov	r1, fp
    13ba:	4630      	mov	r0, r6
    13bc:	47c8      	blx	r9
    13be:	2800      	cmp	r0, #0
    13c0:	db7f      	blt.n	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
    13c2:	9b06      	ldr	r3, [sp, #24]
    13c4:	3501      	adds	r5, #1
    13c6:	461e      	mov	r6, r3
					pad = '0';
    13c8:	2230      	movs	r2, #48	; 0x30
    13ca:	e07e      	b.n	14ca <CONFIG_FPROTECT_BLOCK_SIZE+0x4ca>
				len = strlen(bps);
    13cc:	4638      	mov	r0, r7
    13ce:	f005 fa71 	bl	68b4 <strlen>
    13d2:	e7c9      	b.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    13d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    13d6:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    13da:	2600      	movs	r6, #0
			bps = buf;
    13dc:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    13de:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    13e2:	2001      	movs	r0, #1
    13e4:	e7c6      	b.n	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
			if (conv->flag_plus) {
    13e6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    13e8:	bf5c      	itt	pl
    13ea:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    13ee:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    13f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    13f4:	bf48      	it	mi
    13f6:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    13f8:	2b00      	cmp	r3, #0
    13fa:	f6bf af62 	bge.w	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
				value->uint = (uint_value_type)-sint;
    13fe:	4252      	negs	r2, r2
    1400:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1404:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1408:	262d      	movs	r6, #45	; 0x2d
    140a:	e75a      	b.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
		switch (conv->specifier) {
    140c:	2600      	movs	r6, #0
    140e:	e758      	b.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
		char sign = 0;
    1410:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1412:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1416:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    141a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    141c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1420:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1422:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1426:	f67f af5a 	bls.w	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
					conv->pad0_value = precision - (int)len;
    142a:	ebaa 0303 	sub.w	r3, sl, r3
    142e:	9311      	str	r3, [sp, #68]	; 0x44
    1430:	e755      	b.n	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
			if (value->ptr != NULL) {
    1432:	980e      	ldr	r0, [sp, #56]	; 0x38
    1434:	b390      	cbz	r0, 149c <CONFIG_FPROTECT_BLOCK_SIZE+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1436:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    143a:	9300      	str	r3, [sp, #0]
    143c:	aa10      	add	r2, sp, #64	; 0x40
    143e:	ab08      	add	r3, sp, #32
    1440:	2100      	movs	r1, #0
    1442:	f004 ff10 	bl	6266 <encode_uint>
				conv->altform_0c = true;
    1446:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    144a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    144e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1452:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1456:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    145a:	4607      	mov	r7, r0
				conv->altform_0c = true;
    145c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1460:	dad6      	bge.n	1410 <CONFIG_FPROTECT_BLOCK_SIZE+0x410>
		if (bps == NULL) {
    1462:	2800      	cmp	r0, #0
    1464:	f43f aedb 	beq.w	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
		size_t nj_len = (bpe - bps);
    1468:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    146c:	1a18      	subs	r0, r3, r0
		char sign = 0;
    146e:	2600      	movs	r6, #0
    1470:	469a      	mov	sl, r3
    1472:	e77f      	b.n	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
				store_count(conv, value->ptr, count);
    1474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1476:	2907      	cmp	r1, #7
    1478:	f63f aed1 	bhi.w	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    147c:	e8df f001 	tbb	[pc, r1]
    1480:	0c06040c 	.word	0x0c06040c
    1484:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1488:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    148a:	e6c8      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
		*(short *)dp = (short)count;
    148c:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    148e:	e6c6      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
		*(intmax_t *)dp = (intmax_t)count;
    1490:	17ea      	asrs	r2, r5, #31
    1492:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1496:	e6c2      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1498:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    149a:	e6c0      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    149c:	4f2e      	ldr	r7, [pc, #184]	; (1558 <CONFIG_FPROTECT_BLOCK_SIZE+0x558>)
		char sign = 0;
    149e:	4606      	mov	r6, r0
			bpe = bps + 5;
    14a0:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    14a4:	2005      	movs	r0, #5
    14a6:	e765      	b.n	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
		} else if (conv->altform_0) {
    14a8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    14aa:	bf48      	it	mi
    14ac:	3001      	addmi	r0, #1
    14ae:	e769      	b.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    14b0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    14b2:	4610      	mov	r0, r2
    14b4:	9206      	str	r2, [sp, #24]
    14b6:	4659      	mov	r1, fp
    14b8:	47c8      	blx	r9
    14ba:	2800      	cmp	r0, #0
    14bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    14c0:	da04      	bge.n	14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>
#undef OUTS
#undef OUTC
}
    14c2:	b015      	add	sp, #84	; 0x54
    14c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    14c8:	2220      	movs	r2, #32
					pad = '0';
    14ca:	4643      	mov	r3, r8
				while (width-- > 0) {
    14cc:	4619      	mov	r1, r3
    14ce:	2900      	cmp	r1, #0
    14d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    14d4:	dcec      	bgt.n	14b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b0>
    14d6:	4445      	add	r5, r8
    14d8:	1a6d      	subs	r5, r5, r1
    14da:	4698      	mov	r8, r3
		if (sign != 0) {
    14dc:	b12e      	cbz	r6, 14ea <CONFIG_FPROTECT_BLOCK_SIZE+0x4ea>
			OUTC(sign);
    14de:	4659      	mov	r1, fp
    14e0:	4630      	mov	r0, r6
    14e2:	47c8      	blx	r9
    14e4:	2800      	cmp	r0, #0
    14e6:	dbec      	blt.n	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
    14e8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    14ea:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    14ee:	06da      	lsls	r2, r3, #27
    14f0:	d401      	bmi.n	14f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f6>
    14f2:	071b      	lsls	r3, r3, #28
    14f4:	d505      	bpl.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
				OUTC('0');
    14f6:	4659      	mov	r1, fp
    14f8:	2030      	movs	r0, #48	; 0x30
    14fa:	47c8      	blx	r9
    14fc:	2800      	cmp	r0, #0
    14fe:	dbe0      	blt.n	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
    1500:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1502:	9b05      	ldr	r3, [sp, #20]
    1504:	b133      	cbz	r3, 1514 <CONFIG_FPROTECT_BLOCK_SIZE+0x514>
				OUTC(conv->specifier);
    1506:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    150a:	4659      	mov	r1, fp
    150c:	47c8      	blx	r9
    150e:	2800      	cmp	r0, #0
    1510:	dbd7      	blt.n	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
    1512:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1514:	9e04      	ldr	r6, [sp, #16]
    1516:	442e      	add	r6, r5
    1518:	e005      	b.n	1526 <CONFIG_FPROTECT_BLOCK_SIZE+0x526>
				OUTC('0');
    151a:	4659      	mov	r1, fp
    151c:	2030      	movs	r0, #48	; 0x30
    151e:	47c8      	blx	r9
    1520:	2800      	cmp	r0, #0
    1522:	dbce      	blt.n	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
    1524:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1526:	1b73      	subs	r3, r6, r5
    1528:	2b00      	cmp	r3, #0
    152a:	dcf6      	bgt.n	151a <CONFIG_FPROTECT_BLOCK_SIZE+0x51a>
			OUTS(bps, bpe);
    152c:	4653      	mov	r3, sl
    152e:	463a      	mov	r2, r7
    1530:	4659      	mov	r1, fp
    1532:	4648      	mov	r0, r9
    1534:	f004 fedd 	bl	62f2 <outs>
    1538:	2800      	cmp	r0, #0
    153a:	dbc2      	blt.n	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
    153c:	4405      	add	r5, r0
		while (width > 0) {
    153e:	44a8      	add	r8, r5
    1540:	eba8 0305 	sub.w	r3, r8, r5
    1544:	2b00      	cmp	r3, #0
    1546:	f77f ae6a 	ble.w	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
			OUTC(' ');
    154a:	4659      	mov	r1, fp
    154c:	2020      	movs	r0, #32
    154e:	47c8      	blx	r9
    1550:	2800      	cmp	r0, #0
    1552:	dbb6      	blt.n	14c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c2>
    1554:	3501      	adds	r5, #1
			--width;
    1556:	e7f3      	b.n	1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>
    1558:	00007738 	.word	0x00007738

0000155c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    155c:	b508      	push	{r3, lr}
	__asm__ volatile(
    155e:	f04f 0220 	mov.w	r2, #32
    1562:	f3ef 8311 	mrs	r3, BASEPRI
    1566:	f382 8812 	msr	BASEPRI_MAX, r2
    156a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    156e:	f001 fe01 	bl	3174 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1572:	4803      	ldr	r0, [pc, #12]	; (1580 <sys_reboot+0x24>)
    1574:	f004 fd55 	bl	6022 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1578:	f000 ffce 	bl	2518 <arch_cpu_idle>
    157c:	e7fc      	b.n	1578 <sys_reboot+0x1c>
    157e:	bf00      	nop
    1580:	0000773e 	.word	0x0000773e

00001584 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1584:	f002 bd64 	b.w	4050 <SystemInit>

00001588 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    1588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    158c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 15e8 <activate_foreach_backend+0x60>
{
    1590:	4604      	mov	r4, r0
	while (mask_cpy) {
    1592:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    1594:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    1598:	b914      	cbnz	r4, 15a0 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    159a:	4638      	mov	r0, r7
    159c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    15a0:	fa94 f5a4 	rbit	r5, r4
    15a4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    15a8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    15ac:	012e      	lsls	r6, r5, #4
    15ae:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    15b2:	ea6f 0a03 	mvn.w	sl, r3
    15b6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    15ba:	7b2b      	ldrb	r3, [r5, #12]
    15bc:	2b00      	cmp	r3, #0
    15be:	d0eb      	beq.n	1598 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    15c0:	f858 3006 	ldr.w	r3, [r8, r6]
    15c4:	691b      	ldr	r3, [r3, #16]
    15c6:	b94b      	cbnz	r3, 15dc <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    15c8:	4446      	add	r6, r8
			log_backend_enable(backend,
    15ca:	2204      	movs	r2, #4
    15cc:	6873      	ldr	r3, [r6, #4]
    15ce:	4628      	mov	r0, r5
    15d0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    15d2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    15d6:	f000 fa55 	bl	1a84 <log_backend_enable>
    15da:	e7dd      	b.n	1598 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    15dc:	4628      	mov	r0, r5
    15de:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    15e0:	2800      	cmp	r0, #0
    15e2:	d1d9      	bne.n	1598 <activate_foreach_backend+0x10>
    15e4:	e7f0      	b.n	15c8 <activate_foreach_backend+0x40>
    15e6:	bf00      	nop
    15e8:	000073a4 	.word	0x000073a4

000015ec <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    15ec:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    15ee:	4910      	ldr	r1, [pc, #64]	; (1630 <enable_logger+0x44>)
    15f0:	4810      	ldr	r0, [pc, #64]	; (1634 <enable_logger+0x48>)
{
    15f2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    15f4:	2200      	movs	r2, #0
    15f6:	f005 fd1d 	bl	7034 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    15fa:	4d0f      	ldr	r5, [pc, #60]	; (1638 <enable_logger+0x4c>)
    15fc:	490f      	ldr	r1, [pc, #60]	; (163c <enable_logger+0x50>)
    15fe:	2200      	movs	r2, #0
    1600:	2300      	movs	r3, #0
    1602:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1606:	2400      	movs	r4, #0
    1608:	230e      	movs	r3, #14
    160a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    160e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1612:	4b0b      	ldr	r3, [pc, #44]	; (1640 <enable_logger+0x54>)
    1614:	9400      	str	r4, [sp, #0]
    1616:	f44f 7240 	mov.w	r2, #768	; 0x300
    161a:	4628      	mov	r0, r5
    161c:	f003 fbaa 	bl	4d74 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1620:	4908      	ldr	r1, [pc, #32]	; (1644 <enable_logger+0x58>)
    1622:	4628      	mov	r0, r5
    1624:	f005 fbce 	bl	6dc4 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1628:	4620      	mov	r0, r4
    162a:	b009      	add	sp, #36	; 0x24
    162c:	bd30      	pop	{r4, r5, pc}
    162e:	bf00      	nop
    1630:	00001649 	.word	0x00001649
    1634:	200006b0 	.word	0x200006b0
    1638:	20000228 	.word	0x20000228
    163c:	20001580 	.word	0x20001580
    1640:	00001931 	.word	0x00001931
    1644:	00007767 	.word	0x00007767

00001648 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1648:	4801      	ldr	r0, [pc, #4]	; (1650 <log_process_thread_timer_expiry_fn+0x8>)
    164a:	f003 bced 	b.w	5028 <z_impl_k_sem_give>
    164e:	bf00      	nop
    1650:	20000218 	.word	0x20000218

00001654 <z_log_init>:
{
    1654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1658:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    165a:	481f      	ldr	r0, [pc, #124]	; (16d8 <z_log_init+0x84>)
{
    165c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    165e:	f005 f86f 	bl	6740 <atomic_inc>
    1662:	4606      	mov	r6, r0
    1664:	2800      	cmp	r0, #0
    1666:	d030      	beq.n	16ca <z_log_init+0x76>
	uint32_t mask = 0;
    1668:	2500      	movs	r5, #0
}
    166a:	4628      	mov	r0, r5
    166c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    1670:	7b23      	ldrb	r3, [r4, #12]
    1672:	b173      	cbz	r3, 1692 <z_log_init+0x3e>
	if (backend->api->init) {
    1674:	6823      	ldr	r3, [r4, #0]
    1676:	68db      	ldr	r3, [r3, #12]
    1678:	b10b      	cbz	r3, 167e <z_log_init+0x2a>
		backend->api->init(backend);
    167a:	4620      	mov	r0, r4
    167c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    167e:	6823      	ldr	r3, [r4, #0]
    1680:	691b      	ldr	r3, [r3, #16]
    1682:	b9d3      	cbnz	r3, 16ba <z_log_init+0x66>
				log_backend_enable(backend,
    1684:	6863      	ldr	r3, [r4, #4]
    1686:	2204      	movs	r2, #4
    1688:	6819      	ldr	r1, [r3, #0]
    168a:	4620      	mov	r0, r4
    168c:	f000 f9fa 	bl	1a84 <log_backend_enable>
			i++;
    1690:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1692:	3410      	adds	r4, #16
    1694:	454c      	cmp	r4, r9
    1696:	d3eb      	bcc.n	1670 <z_log_init+0x1c>
	if (blocking) {
    1698:	f1b8 0f00 	cmp.w	r8, #0
    169c:	d0e5      	beq.n	166a <z_log_init+0x16>
		while (mask) {
    169e:	2d00      	cmp	r5, #0
    16a0:	d0e2      	beq.n	1668 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    16a2:	4628      	mov	r0, r5
    16a4:	f7ff ff70 	bl	1588 <activate_foreach_backend>
    16a8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    16aa:	2f00      	cmp	r7, #0
    16ac:	d0f7      	beq.n	169e <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    16ae:	2100      	movs	r1, #0
    16b0:	f44f 70a4 	mov.w	r0, #328	; 0x148
    16b4:	f003 ffc8 	bl	5648 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    16b8:	e7f1      	b.n	169e <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    16ba:	4620      	mov	r0, r4
    16bc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    16be:	2800      	cmp	r0, #0
    16c0:	d0e0      	beq.n	1684 <z_log_init+0x30>
				mask |= BIT(i);
    16c2:	fa0a f306 	lsl.w	r3, sl, r6
    16c6:	431d      	orrs	r5, r3
    16c8:	e7e2      	b.n	1690 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    16ca:	4c04      	ldr	r4, [pc, #16]	; (16dc <z_log_init+0x88>)
    16cc:	f8df 9010 	ldr.w	r9, [pc, #16]	; 16e0 <z_log_init+0x8c>
	uint32_t mask = 0;
    16d0:	4605      	mov	r5, r0
				mask |= BIT(i);
    16d2:	f04f 0a01 	mov.w	sl, #1
    16d6:	e7dd      	b.n	1694 <z_log_init+0x40>
    16d8:	20000820 	.word	0x20000820
    16dc:	000073a4 	.word	0x000073a4
    16e0:	000073b4 	.word	0x000073b4

000016e4 <log_format_func_t_get>:
}
    16e4:	4b01      	ldr	r3, [pc, #4]	; (16ec <log_format_func_t_get+0x8>)
    16e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    16ea:	4770      	bx	lr
    16ec:	000073dc 	.word	0x000073dc

000016f0 <log_set_timestamp_func>:
{
    16f0:	b508      	push	{r3, lr}
    16f2:	4603      	mov	r3, r0
    16f4:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    16f6:	b12b      	cbz	r3, 1704 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    16f8:	4a04      	ldr	r2, [pc, #16]	; (170c <log_set_timestamp_func+0x1c>)
    16fa:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    16fc:	f000 fc48 	bl	1f90 <log_output_timestamp_freq_set>
	return 0;
    1700:	2000      	movs	r0, #0
}
    1702:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1704:	f06f 0015 	mvn.w	r0, #21
    1708:	e7fb      	b.n	1702 <log_set_timestamp_func+0x12>
    170a:	bf00      	nop
    170c:	2000000c 	.word	0x2000000c

00001710 <z_log_notify_backend_enabled>:
{
    1710:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1712:	4c04      	ldr	r4, [pc, #16]	; (1724 <z_log_notify_backend_enabled+0x14>)
    1714:	7823      	ldrb	r3, [r4, #0]
    1716:	b913      	cbnz	r3, 171e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1718:	4803      	ldr	r0, [pc, #12]	; (1728 <z_log_notify_backend_enabled+0x18>)
    171a:	f003 fc85 	bl	5028 <z_impl_k_sem_give>
	backend_attached = true;
    171e:	2301      	movs	r3, #1
    1720:	7023      	strb	r3, [r4, #0]
}
    1722:	bd10      	pop	{r4, pc}
    1724:	20001140 	.word	0x20001140
    1728:	20000218 	.word	0x20000218

0000172c <z_log_dropped>:
{
    172c:	b510      	push	{r4, lr}
    172e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1730:	4808      	ldr	r0, [pc, #32]	; (1754 <z_log_dropped+0x28>)
    1732:	f005 f805 	bl	6740 <atomic_inc>
	if (buffered) {
    1736:	b15c      	cbz	r4, 1750 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1738:	f3bf 8f5b 	dmb	ish
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <z_log_dropped+0x2c>)
    173e:	e853 1f00 	ldrex	r1, [r3]
    1742:	3901      	subs	r1, #1
    1744:	e843 1200 	strex	r2, r1, [r3]
    1748:	2a00      	cmp	r2, #0
    174a:	d1f8      	bne.n	173e <z_log_dropped+0x12>
    174c:	f3bf 8f5b 	dmb	ish
}
    1750:	bd10      	pop	{r4, pc}
    1752:	bf00      	nop
    1754:	20000818 	.word	0x20000818
    1758:	2000081c 	.word	0x2000081c

0000175c <z_log_dropped_read_and_clear>:
}
    175c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    175e:	4b06      	ldr	r3, [pc, #24]	; (1778 <z_log_dropped_read_and_clear+0x1c>)
    1760:	f3bf 8f5b 	dmb	ish
    1764:	4601      	mov	r1, r0
    1766:	e853 0f00 	ldrex	r0, [r3]
    176a:	e843 1200 	strex	r2, r1, [r3]
    176e:	2a00      	cmp	r2, #0
    1770:	d1f9      	bne.n	1766 <z_log_dropped_read_and_clear+0xa>
    1772:	f3bf 8f5b 	dmb	ish
    1776:	4770      	bx	lr
    1778:	20000818 	.word	0x20000818

0000177c <dropped_notify>:
{
    177c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    177e:	f7ff ffed 	bl	175c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1782:	4c08      	ldr	r4, [pc, #32]	; (17a4 <dropped_notify+0x28>)
    1784:	4e08      	ldr	r6, [pc, #32]	; (17a8 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    1786:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1788:	42b4      	cmp	r4, r6
    178a:	d300      	bcc.n	178e <dropped_notify+0x12>
}
    178c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    178e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1790:	795b      	ldrb	r3, [r3, #5]
    1792:	b12b      	cbz	r3, 17a0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    1794:	6823      	ldr	r3, [r4, #0]
    1796:	685b      	ldr	r3, [r3, #4]
    1798:	b113      	cbz	r3, 17a0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    179a:	4629      	mov	r1, r5
    179c:	4620      	mov	r0, r4
    179e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    17a0:	3410      	adds	r4, #16
    17a2:	e7f1      	b.n	1788 <dropped_notify+0xc>
    17a4:	000073a4 	.word	0x000073a4
    17a8:	000073b4 	.word	0x000073b4

000017ac <z_log_msg_init>:
{
    17ac:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    17ae:	4c04      	ldr	r4, [pc, #16]	; (17c0 <z_log_msg_init+0x14>)
    17b0:	4904      	ldr	r1, [pc, #16]	; (17c4 <z_log_msg_init+0x18>)
    17b2:	4620      	mov	r0, r4
    17b4:	f004 fe61 	bl	647a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    17b8:	4b03      	ldr	r3, [pc, #12]	; (17c8 <z_log_msg_init+0x1c>)
    17ba:	601c      	str	r4, [r3, #0]
}
    17bc:	bd10      	pop	{r4, pc}
    17be:	bf00      	nop
    17c0:	20000178 	.word	0x20000178
    17c4:	000073c8 	.word	0x000073c8
    17c8:	20000810 	.word	0x20000810

000017cc <log_core_init>:
{
    17cc:	b508      	push	{r3, lr}
	panic_mode = false;
    17ce:	4a07      	ldr	r2, [pc, #28]	; (17ec <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    17d0:	4807      	ldr	r0, [pc, #28]	; (17f0 <log_core_init+0x24>)
	panic_mode = false;
    17d2:	2300      	movs	r3, #0
    17d4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    17d6:	4a07      	ldr	r2, [pc, #28]	; (17f4 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    17d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
    17dc:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    17de:	f7ff ff87 	bl	16f0 <log_set_timestamp_func>
}
    17e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    17e6:	f7ff bfe1 	b.w	17ac <z_log_msg_init>
    17ea:	bf00      	nop
    17ec:	20001141 	.word	0x20001141
    17f0:	0000673d 	.word	0x0000673d
    17f4:	20000818 	.word	0x20000818

000017f8 <z_log_msg_alloc>:
{
    17f8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    17fa:	2200      	movs	r2, #0
    17fc:	4801      	ldr	r0, [pc, #4]	; (1804 <z_log_msg_alloc+0xc>)
    17fe:	2300      	movs	r3, #0
    1800:	f004 be5c 	b.w	64bc <mpsc_pbuf_alloc>
    1804:	20000178 	.word	0x20000178

00001808 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1808:	4801      	ldr	r0, [pc, #4]	; (1810 <z_log_msg_local_claim+0x8>)
    180a:	f004 bef5 	b.w	65f8 <mpsc_pbuf_claim>
    180e:	bf00      	nop
    1810:	20000178 	.word	0x20000178

00001814 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    1814:	4b02      	ldr	r3, [pc, #8]	; (1820 <z_log_msg_free+0xc>)
{
    1816:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    1818:	6818      	ldr	r0, [r3, #0]
    181a:	f004 bf3d 	b.w	6698 <mpsc_pbuf_free>
    181e:	bf00      	nop
    1820:	20000810 	.word	0x20000810

00001824 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    1824:	4801      	ldr	r0, [pc, #4]	; (182c <z_log_msg_pending+0x8>)
    1826:	f004 bf6b 	b.w	6700 <mpsc_pbuf_is_pending>
    182a:	bf00      	nop
    182c:	20000178 	.word	0x20000178

00001830 <z_impl_log_process>:
{
    1830:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    1832:	4b28      	ldr	r3, [pc, #160]	; (18d4 <z_impl_log_process+0xa4>)
    1834:	7818      	ldrb	r0, [r3, #0]
    1836:	2800      	cmp	r0, #0
    1838:	d04b      	beq.n	18d2 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    183a:	f7ff ffe5 	bl	1808 <z_log_msg_local_claim>
	if (msg) {
    183e:	4605      	mov	r5, r0
    1840:	b190      	cbz	r0, 1868 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1842:	f3bf 8f5b 	dmb	ish
    1846:	4b24      	ldr	r3, [pc, #144]	; (18d8 <z_impl_log_process+0xa8>)
    1848:	e853 1f00 	ldrex	r1, [r3]
    184c:	3901      	subs	r1, #1
    184e:	e843 1200 	strex	r2, r1, [r3]
    1852:	2a00      	cmp	r2, #0
    1854:	d1f8      	bne.n	1848 <z_impl_log_process+0x18>
    1856:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    185a:	4c20      	ldr	r4, [pc, #128]	; (18dc <z_impl_log_process+0xac>)
    185c:	4e20      	ldr	r6, [pc, #128]	; (18e0 <z_impl_log_process+0xb0>)
    185e:	42b4      	cmp	r4, r6
    1860:	d32d      	bcc.n	18be <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    1862:	4628      	mov	r0, r5
    1864:	f7ff ffd6 	bl	1814 <z_log_msg_free>
	return dropped_cnt > 0;
    1868:	4b1e      	ldr	r3, [pc, #120]	; (18e4 <z_impl_log_process+0xb4>)
    186a:	4c1f      	ldr	r4, [pc, #124]	; (18e8 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    186c:	681b      	ldr	r3, [r3, #0]
    186e:	2b00      	cmp	r3, #0
    1870:	dd19      	ble.n	18a6 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    1872:	f005 fbd9 	bl	7028 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    187a:	fba0 0302 	umull	r0, r3, r0, r2
    187e:	fb02 3101 	mla	r1, r2, r1, r3
    1882:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1884:	e9d4 2000 	ldrd	r2, r0, [r4]
    1888:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    188c:	1a9b      	subs	r3, r3, r2
    188e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    1892:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1896:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    189a:	4293      	cmp	r3, r2
    189c:	f171 0100 	sbcs.w	r1, r1, #0
    18a0:	d301      	bcc.n	18a6 <z_impl_log_process+0x76>
				dropped_notify();
    18a2:	f7ff ff6b 	bl	177c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    18a6:	e9d4 3200 	ldrd	r3, r2, [r4]
    18aa:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    18ae:	f142 0200 	adc.w	r2, r2, #0
    18b2:	e9c4 3200 	strd	r3, r2, [r4]
}
    18b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    18ba:	f7ff bfb3 	b.w	1824 <z_log_msg_pending>
	return backend->cb->active;
    18be:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    18c0:	795b      	ldrb	r3, [r3, #5]
    18c2:	b123      	cbz	r3, 18ce <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    18c4:	6823      	ldr	r3, [r4, #0]
    18c6:	4629      	mov	r1, r5
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	4620      	mov	r0, r4
    18cc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18ce:	3410      	adds	r4, #16
    18d0:	e7c5      	b.n	185e <z_impl_log_process+0x2e>
}
    18d2:	bd70      	pop	{r4, r5, r6, pc}
    18d4:	20001140 	.word	0x20001140
    18d8:	2000081c 	.word	0x2000081c
    18dc:	000073a4 	.word	0x000073a4
    18e0:	000073b4 	.word	0x000073b4
    18e4:	20000818 	.word	0x20000818
    18e8:	200006a8 	.word	0x200006a8

000018ec <z_impl_log_panic>:
{
    18ec:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    18ee:	4d0d      	ldr	r5, [pc, #52]	; (1924 <z_impl_log_panic+0x38>)
    18f0:	7829      	ldrb	r1, [r5, #0]
    18f2:	b961      	cbnz	r1, 190e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    18f4:	2001      	movs	r0, #1
    18f6:	f7ff fead 	bl	1654 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18fa:	4c0b      	ldr	r4, [pc, #44]	; (1928 <z_impl_log_panic+0x3c>)
    18fc:	4e0b      	ldr	r6, [pc, #44]	; (192c <z_impl_log_panic+0x40>)
    18fe:	42b4      	cmp	r4, r6
    1900:	d306      	bcc.n	1910 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1902:	f7ff ff95 	bl	1830 <z_impl_log_process>
		while (log_process() == true) {
    1906:	2800      	cmp	r0, #0
    1908:	d1fb      	bne.n	1902 <z_impl_log_panic+0x16>
	panic_mode = true;
    190a:	2301      	movs	r3, #1
    190c:	702b      	strb	r3, [r5, #0]
}
    190e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    1910:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1912:	795b      	ldrb	r3, [r3, #5]
    1914:	b11b      	cbz	r3, 191e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    1916:	6823      	ldr	r3, [r4, #0]
    1918:	4620      	mov	r0, r4
    191a:	689b      	ldr	r3, [r3, #8]
    191c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    191e:	3410      	adds	r4, #16
    1920:	e7ed      	b.n	18fe <z_impl_log_panic+0x12>
    1922:	bf00      	nop
    1924:	20001141 	.word	0x20001141
    1928:	000073a4 	.word	0x000073a4
    192c:	000073b4 	.word	0x000073b4

00001930 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1930:	2100      	movs	r1, #0
{
    1932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1936:	4608      	mov	r0, r1
    1938:	f7ff fe8c 	bl	1654 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    193c:	4604      	mov	r4, r0
    193e:	b348      	cbz	r0, 1994 <log_process_thread_func+0x64>
    1940:	f240 6867 	movw	r8, #1639	; 0x667
    1944:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1948:	f003 fe98 	bl	567c <z_impl_z_current_get>
	proc_tid = process_tid;
    194c:	4b1a      	ldr	r3, [pc, #104]	; (19b8 <log_process_thread_func+0x88>)
    194e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1950:	b130      	cbz	r0, 1960 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1952:	4b1a      	ldr	r3, [pc, #104]	; (19bc <log_process_thread_func+0x8c>)
	    process_tid &&
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	2b09      	cmp	r3, #9
    1958:	dd02      	ble.n	1960 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    195a:	4819      	ldr	r0, [pc, #100]	; (19c0 <log_process_thread_func+0x90>)
    195c:	f003 fb64 	bl	5028 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1960:	4f18      	ldr	r7, [pc, #96]	; (19c4 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    1962:	f8df a05c 	ldr.w	sl, [pc, #92]	; 19c0 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1966:	2500      	movs	r5, #0
		if (activate_mask) {
    1968:	b144      	cbz	r4, 197c <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    196a:	4620      	mov	r0, r4
    196c:	f7ff fe0c 	bl	1588 <activate_foreach_backend>
			if (!activate_mask) {
    1970:	4604      	mov	r4, r0
    1972:	b918      	cbnz	r0, 197c <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    1974:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1978:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    197c:	f7ff ff58 	bl	1830 <z_impl_log_process>
		if (log_process() == false) {
    1980:	4606      	mov	r6, r0
    1982:	b928      	cbnz	r0, 1990 <log_process_thread_func+0x60>
			if (processed_any) {
    1984:	b9b5      	cbnz	r5, 19b4 <log_process_thread_func+0x84>
    1986:	4642      	mov	r2, r8
    1988:	464b      	mov	r3, r9
    198a:	4650      	mov	r0, sl
    198c:	f003 fb6c 	bl	5068 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1990:	4635      	mov	r5, r6
    1992:	e7e9      	b.n	1968 <log_process_thread_func+0x38>
    1994:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1998:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    199c:	e7d4      	b.n	1948 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    199e:	682b      	ldr	r3, [r5, #0]
    19a0:	699b      	ldr	r3, [r3, #24]
    19a2:	b11b      	cbz	r3, 19ac <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    19a4:	2200      	movs	r2, #0
    19a6:	4611      	mov	r1, r2
    19a8:	4628      	mov	r0, r5
    19aa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    19ac:	3510      	adds	r5, #16
    19ae:	42bd      	cmp	r5, r7
    19b0:	d3f5      	bcc.n	199e <log_process_thread_func+0x6e>
    19b2:	e7e8      	b.n	1986 <log_process_thread_func+0x56>
    19b4:	4d04      	ldr	r5, [pc, #16]	; (19c8 <log_process_thread_func+0x98>)
    19b6:	e7fa      	b.n	19ae <log_process_thread_func+0x7e>
    19b8:	20000814 	.word	0x20000814
    19bc:	2000081c 	.word	0x2000081c
    19c0:	20000218 	.word	0x20000218
    19c4:	000073b4 	.word	0x000073b4
    19c8:	000073a4 	.word	0x000073a4

000019cc <z_log_msg_post_finalize>:
{
    19cc:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    19ce:	4818      	ldr	r0, [pc, #96]	; (1a30 <z_log_msg_post_finalize+0x64>)
    19d0:	f004 feb6 	bl	6740 <atomic_inc>
	if (panic_mode) {
    19d4:	4b17      	ldr	r3, [pc, #92]	; (1a34 <z_log_msg_post_finalize+0x68>)
    19d6:	781b      	ldrb	r3, [r3, #0]
    19d8:	b17b      	cbz	r3, 19fa <z_log_msg_post_finalize+0x2e>
    19da:	f04f 0320 	mov.w	r3, #32
    19de:	f3ef 8411 	mrs	r4, BASEPRI
    19e2:	f383 8812 	msr	BASEPRI_MAX, r3
    19e6:	f3bf 8f6f 	isb	sy
    19ea:	f7ff ff21 	bl	1830 <z_impl_log_process>
	__asm__ volatile(
    19ee:	f384 8811 	msr	BASEPRI, r4
    19f2:	f3bf 8f6f 	isb	sy
}
    19f6:	b002      	add	sp, #8
    19f8:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    19fa:	4b0f      	ldr	r3, [pc, #60]	; (1a38 <z_log_msg_post_finalize+0x6c>)
    19fc:	681b      	ldr	r3, [r3, #0]
    19fe:	2b00      	cmp	r3, #0
    1a00:	d0f9      	beq.n	19f6 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    1a02:	b950      	cbnz	r0, 1a1a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    1a04:	2200      	movs	r2, #0
    1a06:	2300      	movs	r3, #0
    1a08:	e9cd 2300 	strd	r2, r3, [sp]
    1a0c:	480b      	ldr	r0, [pc, #44]	; (1a3c <z_log_msg_post_finalize+0x70>)
    1a0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1a12:	2300      	movs	r3, #0
    1a14:	f004 f85c 	bl	5ad0 <z_impl_k_timer_start>
    1a18:	e7ed      	b.n	19f6 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1a1a:	280a      	cmp	r0, #10
    1a1c:	d1eb      	bne.n	19f6 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    1a1e:	4807      	ldr	r0, [pc, #28]	; (1a3c <z_log_msg_post_finalize+0x70>)
    1a20:	f005 fb14 	bl	704c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1a24:	4806      	ldr	r0, [pc, #24]	; (1a40 <z_log_msg_post_finalize+0x74>)
}
    1a26:	b002      	add	sp, #8
    1a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a2c:	f003 bafc 	b.w	5028 <z_impl_k_sem_give>
    1a30:	2000081c 	.word	0x2000081c
    1a34:	20001141 	.word	0x20001141
    1a38:	20000814 	.word	0x20000814
    1a3c:	200006b0 	.word	0x200006b0
    1a40:	20000218 	.word	0x20000218

00001a44 <z_log_msg_commit>:
{
    1a44:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <z_log_msg_commit+0x1c>)
    1a48:	681b      	ldr	r3, [r3, #0]
{
    1a4a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1a4c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    1a4e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1a50:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    1a52:	4804      	ldr	r0, [pc, #16]	; (1a64 <z_log_msg_commit+0x20>)
    1a54:	f004 fdb0 	bl	65b8 <mpsc_pbuf_commit>
}
    1a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1a5c:	f7ff bfb6 	b.w	19cc <z_log_msg_post_finalize>
    1a60:	2000000c 	.word	0x2000000c
    1a64:	20000178 	.word	0x20000178

00001a68 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1a68:	4a04      	ldr	r2, [pc, #16]	; (1a7c <log_source_name_get+0x14>)
    1a6a:	4b05      	ldr	r3, [pc, #20]	; (1a80 <log_source_name_get+0x18>)
    1a6c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1a6e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    1a72:	bf34      	ite	cc
    1a74:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    1a78:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1a7a:	4770      	bx	lr
    1a7c:	0000733c 	.word	0x0000733c
    1a80:	000073a4 	.word	0x000073a4

00001a84 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1a84:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <log_backend_enable+0x24>)
    1a86:	1ac3      	subs	r3, r0, r3
{
    1a88:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    1a8a:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    1a8c:	6844      	ldr	r4, [r0, #4]
    1a8e:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    1a90:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    1a92:	6843      	ldr	r3, [r0, #4]
    1a94:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1a96:	6843      	ldr	r3, [r0, #4]
    1a98:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1a9a:	6843      	ldr	r3, [r0, #4]
    1a9c:	2201      	movs	r2, #1
    1a9e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1aa0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    1aa2:	f7ff be35 	b.w	1710 <z_log_notify_backend_enabled>
    1aa6:	bf00      	nop
    1aa8:	000073a4 	.word	0x000073a4

00001aac <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    1aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ab0:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    1ab2:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    1ab6:	f3c1 2649 	ubfx	r6, r1, #9, #10
    1aba:	9005      	str	r0, [sp, #20]
    1abc:	460d      	mov	r5, r1
    1abe:	4690      	mov	r8, r2
    1ac0:	4699      	mov	r9, r3
    1ac2:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    1ac4:	2e00      	cmp	r6, #0
    1ac6:	d03c      	beq.n	1b42 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    1ac8:	f04f 0b04 	mov.w	fp, #4
    1acc:	af09      	add	r7, sp, #36	; 0x24
    1ace:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    1ad2:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    1ad4:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
    1ad6:	ab0b      	add	r3, sp, #44	; 0x2c
    1ad8:	f8cd b008 	str.w	fp, [sp, #8]
    1adc:	9701      	str	r7, [sp, #4]
    1ade:	f8cd a000 	str.w	sl, [sp]
    1ae2:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
    1ae4:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    1ae8:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    1aea:	9607      	str	r6, [sp, #28]
    1aec:	f7fe fe7c 	bl	7e8 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    1af0:	f3c0 0309 	ubfx	r3, r0, #0, #10
    1af4:	1918      	adds	r0, r3, r4
    1af6:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1afa:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    1afc:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1afe:	f363 2552 	bfi	r5, r3, #9, #10
    1b02:	9306      	str	r3, [sp, #24]
    1b04:	f7ff fe78 	bl	17f8 <z_log_msg_alloc>
		if (msg) {
    1b08:	4604      	mov	r4, r0
    1b0a:	b178      	cbz	r0, 1b2c <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
    1b0c:	9b06      	ldr	r3, [sp, #24]
    1b0e:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    1b10:	3010      	adds	r0, #16
    1b12:	2200      	movs	r2, #0
    1b14:	900b      	str	r0, [sp, #44]	; 0x2c
    1b16:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    1b18:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    1b1c:	4a0c      	ldr	r2, [pc, #48]	; (1b50 <z_impl_z_log_msg_static_create+0xa4>)
    1b1e:	9907      	ldr	r1, [sp, #28]
    1b20:	f8cd a000 	str.w	sl, [sp]
    1b24:	ab0b      	add	r3, sp, #44	; 0x2c
    1b26:	4640      	mov	r0, r8
    1b28:	f7fe fe5e 	bl	7e8 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    1b2c:	f366 2552 	bfi	r5, r6, #9, #10
    1b30:	9905      	ldr	r1, [sp, #20]
    1b32:	464b      	mov	r3, r9
    1b34:	462a      	mov	r2, r5
    1b36:	4620      	mov	r0, r4
}
    1b38:	b00f      	add	sp, #60	; 0x3c
    1b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    1b3e:	f004 be35 	b.w	67ac <z_log_msg_finalize>
    1b42:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1b46:	0880      	lsrs	r0, r0, #2
    1b48:	f7ff fe56 	bl	17f8 <z_log_msg_alloc>
    1b4c:	4604      	mov	r4, r0
    1b4e:	e7ed      	b.n	1b2c <z_impl_z_log_msg_static_create+0x80>
    1b50:	00006781 	.word	0x00006781

00001b54 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b58:	b087      	sub	sp, #28
    1b5a:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    1b5e:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    1b62:	4604      	mov	r4, r0
    1b64:	460f      	mov	r7, r1
    1b66:	4693      	mov	fp, r2
    1b68:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    1b6a:	b3b6      	cbz	r6, 1bda <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1b6c:	2110      	movs	r1, #16
    1b6e:	f8cd 9000 	str.w	r9, [sp]
    1b72:	4633      	mov	r3, r6
    1b74:	4652      	mov	r2, sl
    1b76:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1b78:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1b7c:	f7fe fc5e 	bl	43c <cbvprintf_package>
    1b80:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    1b82:	4b17      	ldr	r3, [pc, #92]	; (1be0 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1b84:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    1b86:	f004 0407 	and.w	r4, r4, #7
    1b8a:	f00b 0b07 	and.w	fp, fp, #7
    1b8e:	00e4      	lsls	r4, r4, #3
    1b90:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1b94:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
    1b98:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    1b9c:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1b9e:	4408      	add	r0, r1
	struct log_msg_desc desc =
    1ba0:	4b10      	ldr	r3, [pc, #64]	; (1be4 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1ba2:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    1ba6:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    1baa:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    1bac:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    1bae:	f7ff fe23 	bl	17f8 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1bb2:	4605      	mov	r5, r0
    1bb4:	b140      	cbz	r0, 1bc8 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1bb6:	b13e      	cbz	r6, 1bc8 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1bb8:	9903      	ldr	r1, [sp, #12]
    1bba:	f8cd 9000 	str.w	r9, [sp]
    1bbe:	4633      	mov	r3, r6
    1bc0:	4652      	mov	r2, sl
    1bc2:	3010      	adds	r0, #16
    1bc4:	f7fe fc3a 	bl	43c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    1bc8:	4643      	mov	r3, r8
    1bca:	4622      	mov	r2, r4
    1bcc:	4639      	mov	r1, r7
    1bce:	4628      	mov	r0, r5
	}
}
    1bd0:	b007      	add	sp, #28
    1bd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    1bd6:	f004 bde9 	b.w	67ac <z_log_msg_finalize>
		plen = 0;
    1bda:	4631      	mov	r1, r6
    1bdc:	e7d1      	b.n	1b82 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    1bde:	bf00      	nop
    1be0:	0007fe00 	.word	0x0007fe00
    1be4:	7ff80000 	.word	0x7ff80000

00001be8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1be8:	b40e      	push	{r1, r2, r3}
    1bea:	b503      	push	{r0, r1, lr}
    1bec:	ab03      	add	r3, sp, #12
    1bee:	4601      	mov	r1, r0
    1bf0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1bf4:	4804      	ldr	r0, [pc, #16]	; (1c08 <print_formatted+0x20>)
	va_start(args, fmt);
    1bf6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1bf8:	f004 fdff 	bl	67fa <cbvprintf>
	va_end(args);

	return length;
}
    1bfc:	b002      	add	sp, #8
    1bfe:	f85d eb04 	ldr.w	lr, [sp], #4
    1c02:	b003      	add	sp, #12
    1c04:	4770      	bx	lr
    1c06:	bf00      	nop
    1c08:	00006823 	.word	0x00006823

00001c0c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c0c:	06ca      	lsls	r2, r1, #27
    1c0e:	d405      	bmi.n	1c1c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c10:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    1c12:	bf4c      	ite	mi
    1c14:	4902      	ldrmi	r1, [pc, #8]	; (1c20 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    1c16:	4903      	ldrpl	r1, [pc, #12]	; (1c24 <newline_print+0x18>)
    1c18:	f7ff bfe6 	b.w	1be8 <print_formatted>
	}
}
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop
    1c20:	0000777d 	.word	0x0000777d
    1c24:	0000777c 	.word	0x0000777c

00001c28 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    1c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c2c:	b089      	sub	sp, #36	; 0x24
    1c2e:	469b      	mov	fp, r3
    1c30:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1c34:	9304      	str	r3, [sp, #16]
    1c36:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    1c3a:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    1c3c:	9b04      	ldr	r3, [sp, #16]
{
    1c3e:	9206      	str	r2, [sp, #24]
    1c40:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    1c44:	4604      	mov	r4, r0
    1c46:	460d      	mov	r5, r1
	if (!raw_string) {
    1c48:	2b00      	cmp	r3, #0
    1c4a:	f000 8087 	beq.w	1d5c <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1c4e:	f006 0308 	and.w	r3, r6, #8
    1c52:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    1c54:	f004 fd92 	bl	677c <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1c58:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    1c5c:	4602      	mov	r2, r0
    1c5e:	2800      	cmp	r0, #0
    1c60:	d04b      	beq.n	1cfa <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    1c62:	4986      	ldr	r1, [pc, #536]	; (1e7c <log_output_process+0x254>)
    1c64:	4620      	mov	r0, r4
    1c66:	f7ff ffbf 	bl	1be8 <print_formatted>
    1c6a:	4680      	mov	r8, r0
	if (stamp) {
    1c6c:	f1ba 0f00 	cmp.w	sl, #0
    1c70:	d008      	beq.n	1c84 <log_output_process+0x5c>
	if (!format) {
    1c72:	f016 0f44 	tst.w	r6, #68	; 0x44
    1c76:	d142      	bne.n	1cfe <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1c78:	4981      	ldr	r1, [pc, #516]	; (1e80 <log_output_process+0x258>)
    1c7a:	462a      	mov	r2, r5
    1c7c:	4620      	mov	r0, r4
    1c7e:	f7ff ffb3 	bl	1be8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1c82:	4480      	add	r8, r0
	if (color) {
    1c84:	f006 0301 	and.w	r3, r6, #1
    1c88:	b15b      	cbz	r3, 1ca2 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    1c8a:	4b7e      	ldr	r3, [pc, #504]	; (1e84 <log_output_process+0x25c>)
    1c8c:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    1c8e:	497e      	ldr	r1, [pc, #504]	; (1e88 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    1c90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    1c94:	4b7d      	ldr	r3, [pc, #500]	; (1e8c <log_output_process+0x264>)
    1c96:	4620      	mov	r0, r4
    1c98:	2a00      	cmp	r2, #0
    1c9a:	bf08      	it	eq
    1c9c:	461a      	moveq	r2, r3
    1c9e:	f7ff ffa3 	bl	1be8 <print_formatted>
	if (level_on) {
    1ca2:	f006 0308 	and.w	r3, r6, #8
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d055      	beq.n	1d56 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    1caa:	4b79      	ldr	r3, [pc, #484]	; (1e90 <log_output_process+0x268>)
    1cac:	9a04      	ldr	r2, [sp, #16]
    1cae:	4979      	ldr	r1, [pc, #484]	; (1e94 <log_output_process+0x26c>)
    1cb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1cb4:	4620      	mov	r0, r4
    1cb6:	f7ff ff97 	bl	1be8 <print_formatted>
    1cba:	4605      	mov	r5, r0
	if (domain) {
    1cbc:	9b06      	ldr	r3, [sp, #24]
    1cbe:	b12b      	cbz	r3, 1ccc <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    1cc0:	4975      	ldr	r1, [pc, #468]	; (1e98 <log_output_process+0x270>)
    1cc2:	461a      	mov	r2, r3
    1cc4:	4620      	mov	r0, r4
    1cc6:	f7ff ff8f 	bl	1be8 <print_formatted>
    1cca:	4405      	add	r5, r0
	if (source) {
    1ccc:	f1bb 0f00 	cmp.w	fp, #0
    1cd0:	d005      	beq.n	1cde <log_output_process+0xb6>
		total += print_formatted(output,
    1cd2:	4972      	ldr	r1, [pc, #456]	; (1e9c <log_output_process+0x274>)
    1cd4:	465a      	mov	r2, fp
    1cd6:	4620      	mov	r0, r4
    1cd8:	f7ff ff86 	bl	1be8 <print_formatted>
    1cdc:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    1cde:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    1ce0:	f1b9 0f00 	cmp.w	r9, #0
    1ce4:	d149      	bne.n	1d7a <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    1ce6:	2f00      	cmp	r7, #0
    1ce8:	d14f      	bne.n	1d8a <log_output_process+0x162>
	if (color) {
    1cea:	07f3      	lsls	r3, r6, #31
    1cec:	f100 80c0 	bmi.w	1e70 <log_output_process+0x248>
	newline_print(output, flags);
    1cf0:	4631      	mov	r1, r6
    1cf2:	4620      	mov	r0, r4
    1cf4:	f7ff ff8a 	bl	1c0c <newline_print>
}
    1cf8:	e0b4      	b.n	1e64 <log_output_process+0x23c>
	uint32_t length = 0U;
    1cfa:	4680      	mov	r8, r0
    1cfc:	e7b6      	b.n	1c6c <log_output_process+0x44>
	} else if (freq != 0U) {
    1cfe:	4b68      	ldr	r3, [pc, #416]	; (1ea0 <log_output_process+0x278>)
    1d00:	6818      	ldr	r0, [r3, #0]
    1d02:	2800      	cmp	r0, #0
    1d04:	d0bd      	beq.n	1c82 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    1d06:	4b67      	ldr	r3, [pc, #412]	; (1ea4 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    1d08:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1d0c:	681b      	ldr	r3, [r3, #0]
    1d0e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    1d12:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1d16:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    1d1a:	fb00 5513 	mls	r5, r0, r3, r5
    1d1e:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    1d22:	fb0e f505 	mul.w	r5, lr, r5
    1d26:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    1d2a:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1d2c:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    1d30:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1d34:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    1d38:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1d3c:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    1d40:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1d42:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    1d46:	4958      	ldr	r1, [pc, #352]	; (1ea8 <log_output_process+0x280>)
    1d48:	e9cd c501 	strd	ip, r5, [sp, #4]
    1d4c:	4652      	mov	r2, sl
    1d4e:	4620      	mov	r0, r4
    1d50:	f7ff ff4a 	bl	1be8 <print_formatted>
    1d54:	e795      	b.n	1c82 <log_output_process+0x5a>
	int total = 0;
    1d56:	f006 0508 	and.w	r5, r6, #8
    1d5a:	e7af      	b.n	1cbc <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1d5c:	f1bb 0f01 	cmp.w	fp, #1
    1d60:	d106      	bne.n	1d70 <log_output_process+0x148>
	if (package) {
    1d62:	f1b9 0f00 	cmp.w	r9, #0
    1d66:	d164      	bne.n	1e32 <log_output_process+0x20a>
	if (data_len) {
    1d68:	2f00      	cmp	r7, #0
    1d6a:	d07b      	beq.n	1e64 <log_output_process+0x23c>
		prefix_offset = 0;
    1d6c:	2500      	movs	r5, #0
    1d6e:	e00c      	b.n	1d8a <log_output_process+0x162>
	if (package) {
    1d70:	f1b9 0f00 	cmp.w	r9, #0
    1d74:	d0f8      	beq.n	1d68 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1d76:	484d      	ldr	r0, [pc, #308]	; (1eac <log_output_process+0x284>)
    1d78:	e05c      	b.n	1e34 <log_output_process+0x20c>
		cb = out_func;
    1d7a:	484d      	ldr	r0, [pc, #308]	; (1eb0 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1d7c:	494d      	ldr	r1, [pc, #308]	; (1eb4 <log_output_process+0x28c>)
    1d7e:	464b      	mov	r3, r9
    1d80:	4622      	mov	r2, r4
    1d82:	f004 f8e3 	bl	5f4c <cbpprintf_external>
	if (data_len) {
    1d86:	2f00      	cmp	r7, #0
    1d88:	d068      	beq.n	1e5c <log_output_process+0x234>
		print_formatted(output, " ");
    1d8a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1eb8 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    1d8e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 1ebc <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1d92:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    1d94:	4631      	mov	r1, r6
    1d96:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1d98:	46b8      	mov	r8, r7
    1d9a:	bf28      	it	cs
    1d9c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    1da0:	f7ff ff34 	bl	1c0c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    1da4:	f04f 0b00 	mov.w	fp, #0
    1da8:	455d      	cmp	r5, fp
    1daa:	dc45      	bgt.n	1e38 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    1dac:	9b05      	ldr	r3, [sp, #20]
    1dae:	4651      	mov	r1, sl
    1db0:	781a      	ldrb	r2, [r3, #0]
    1db2:	4620      	mov	r0, r4
    1db4:	f7ff ff18 	bl	1be8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1db8:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    1dbc:	f01b 0f07 	tst.w	fp, #7
    1dc0:	d103      	bne.n	1dca <log_output_process+0x1a2>
			print_formatted(output, " ");
    1dc2:	4649      	mov	r1, r9
    1dc4:	4620      	mov	r0, r4
    1dc6:	f7ff ff0f 	bl	1be8 <print_formatted>
		if (i < length) {
    1dca:	45d8      	cmp	r8, fp
    1dcc:	d93b      	bls.n	1e46 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    1dce:	9b05      	ldr	r3, [sp, #20]
    1dd0:	4651      	mov	r1, sl
    1dd2:	f813 200b 	ldrb.w	r2, [r3, fp]
    1dd6:	4620      	mov	r0, r4
    1dd8:	f7ff ff06 	bl	1be8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1ddc:	f10b 0b01 	add.w	fp, fp, #1
    1de0:	f1bb 0f10 	cmp.w	fp, #16
    1de4:	d1ea      	bne.n	1dbc <log_output_process+0x194>
	print_formatted(output, "|");
    1de6:	4936      	ldr	r1, [pc, #216]	; (1ec0 <log_output_process+0x298>)
    1de8:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1dea:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    1dee:	f7ff fefb 	bl	1be8 <print_formatted>
		if (i < length) {
    1df2:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    1df4:	9b05      	ldr	r3, [sp, #20]
    1df6:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    1df8:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    1dfc:	295f      	cmp	r1, #95	; 0x5f
    1dfe:	bf28      	it	cs
    1e00:	222e      	movcs	r2, #46	; 0x2e
    1e02:	4930      	ldr	r1, [pc, #192]	; (1ec4 <log_output_process+0x29c>)
    1e04:	4620      	mov	r0, r4
    1e06:	f7ff feef 	bl	1be8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e0a:	f10b 0b01 	add.w	fp, fp, #1
    1e0e:	f1bb 0f10 	cmp.w	fp, #16
    1e12:	d01d      	beq.n	1e50 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    1e14:	f01b 0f07 	tst.w	fp, #7
    1e18:	d103      	bne.n	1e22 <log_output_process+0x1fa>
			print_formatted(output, " ");
    1e1a:	4649      	mov	r1, r9
    1e1c:	4620      	mov	r0, r4
    1e1e:	f7ff fee3 	bl	1be8 <print_formatted>
		if (i < length) {
    1e22:	45d8      	cmp	r8, fp
    1e24:	465a      	mov	r2, fp
    1e26:	d8e5      	bhi.n	1df4 <log_output_process+0x1cc>
			print_formatted(output, " ");
    1e28:	4649      	mov	r1, r9
    1e2a:	4620      	mov	r0, r4
    1e2c:	f7ff fedc 	bl	1be8 <print_formatted>
    1e30:	e7eb      	b.n	1e0a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1e32:	481f      	ldr	r0, [pc, #124]	; (1eb0 <log_output_process+0x288>)
		prefix_offset = 0;
    1e34:	9d04      	ldr	r5, [sp, #16]
    1e36:	e7a1      	b.n	1d7c <log_output_process+0x154>
		print_formatted(output, " ");
    1e38:	4649      	mov	r1, r9
    1e3a:	4620      	mov	r0, r4
    1e3c:	f7ff fed4 	bl	1be8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1e40:	f10b 0b01 	add.w	fp, fp, #1
    1e44:	e7b0      	b.n	1da8 <log_output_process+0x180>
			print_formatted(output, "   ");
    1e46:	4920      	ldr	r1, [pc, #128]	; (1ec8 <log_output_process+0x2a0>)
    1e48:	4620      	mov	r0, r4
    1e4a:	f7ff fecd 	bl	1be8 <print_formatted>
    1e4e:	e7c5      	b.n	1ddc <log_output_process+0x1b4>
		data += length;
    1e50:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    1e52:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    1e56:	4443      	add	r3, r8
    1e58:	9305      	str	r3, [sp, #20]
	} while (len);
    1e5a:	d19a      	bne.n	1d92 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    1e5c:	9b04      	ldr	r3, [sp, #16]
    1e5e:	2b00      	cmp	r3, #0
    1e60:	f47f af43 	bne.w	1cea <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    1e64:	4620      	mov	r0, r4
}
    1e66:	b009      	add	sp, #36	; 0x24
    1e68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    1e6c:	f004 bccc 	b.w	6808 <log_output_flush>
		print_formatted(output, "%s", log_color);
    1e70:	4a06      	ldr	r2, [pc, #24]	; (1e8c <log_output_process+0x264>)
    1e72:	4905      	ldr	r1, [pc, #20]	; (1e88 <log_output_process+0x260>)
    1e74:	4620      	mov	r0, r4
    1e76:	f7ff feb7 	bl	1be8 <print_formatted>
}
    1e7a:	e739      	b.n	1cf0 <log_output_process+0xc8>
    1e7c:	00007784 	.word	0x00007784
    1e80:	00007788 	.word	0x00007788
    1e84:	000073ec 	.word	0x000073ec
    1e88:	00007d6e 	.word	0x00007d6e
    1e8c:	0000777f 	.word	0x0000777f
    1e90:	00007400 	.word	0x00007400
    1e94:	000077ad 	.word	0x000077ad
    1e98:	000077b3 	.word	0x000077b3
    1e9c:	000077b7 	.word	0x000077b7
    1ea0:	20000828 	.word	0x20000828
    1ea4:	20000824 	.word	0x20000824
    1ea8:	00007791 	.word	0x00007791
    1eac:	00006859 	.word	0x00006859
    1eb0:	00006823 	.word	0x00006823
    1eb4:	000067fb 	.word	0x000067fb
    1eb8:	000077c4 	.word	0x000077c4
    1ebc:	000077bc 	.word	0x000077bc
    1ec0:	000077c6 	.word	0x000077c6
    1ec4:	000077c8 	.word	0x000077c8
    1ec8:	000077c2 	.word	0x000077c2

00001ecc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    1ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    1ed0:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    1ed2:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    1ed4:	688e      	ldr	r6, [r1, #8]
    1ed6:	b086      	sub	sp, #24
    1ed8:	4605      	mov	r5, r0
    1eda:	460c      	mov	r4, r1
    1edc:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    1ede:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    1ee2:	b15b      	cbz	r3, 1efc <log_output_msg_process+0x30>
    1ee4:	4a13      	ldr	r2, [pc, #76]	; (1f34 <log_output_msg_process+0x68>)
    1ee6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    1ee8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    1eec:	2900      	cmp	r1, #0
    1eee:	db1f      	blt.n	1f30 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    1ef0:	7820      	ldrb	r0, [r4, #0]
    1ef2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1ef6:	f7ff fdb7 	bl	1a68 <log_source_name_get>
    1efa:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    1efc:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    1efe:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    1f00:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    1f04:	9700      	str	r7, [sp, #0]
    1f06:	f3c2 2249 	ubfx	r2, r2, #9, #10
    1f0a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    1f0c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    1f10:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    1f14:	bf08      	it	eq
    1f16:	2100      	moveq	r1, #0
    1f18:	e9cd 0803 	strd	r0, r8, [sp, #12]
    1f1c:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1f20:	2200      	movs	r2, #0
    1f22:	4631      	mov	r1, r6
    1f24:	4628      	mov	r0, r5
    1f26:	f7ff fe7f 	bl	1c28 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    1f2a:	b006      	add	sp, #24
    1f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    1f30:	2300      	movs	r3, #0
    1f32:	e7e3      	b.n	1efc <log_output_msg_process+0x30>
    1f34:	0000733c 	.word	0x0000733c

00001f38 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f3a:	f242 730f 	movw	r3, #9999	; 0x270f
    1f3e:	428b      	cmp	r3, r1
    1f40:	bf28      	it	cs
    1f42:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1f44:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f46:	4a0f      	ldr	r2, [pc, #60]	; (1f84 <log_output_dropped_process+0x4c>)
{
    1f48:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f4a:	2105      	movs	r1, #5
    1f4c:	4668      	mov	r0, sp
    1f4e:	f004 f875 	bl	603c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1f52:	6863      	ldr	r3, [r4, #4]
    1f54:	490c      	ldr	r1, [pc, #48]	; (1f88 <log_output_dropped_process+0x50>)
    1f56:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f58:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1f5a:	220b      	movs	r2, #11
    1f5c:	4628      	mov	r0, r5
    1f5e:	f004 fc3f 	bl	67e0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1f62:	6863      	ldr	r3, [r4, #4]
    1f64:	4632      	mov	r2, r6
    1f66:	4669      	mov	r1, sp
    1f68:	4628      	mov	r0, r5
    1f6a:	685b      	ldr	r3, [r3, #4]
    1f6c:	f004 fc38 	bl	67e0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1f70:	6863      	ldr	r3, [r4, #4]
    1f72:	4906      	ldr	r1, [pc, #24]	; (1f8c <log_output_dropped_process+0x54>)
    1f74:	685b      	ldr	r3, [r3, #4]
    1f76:	221b      	movs	r2, #27
    1f78:	4628      	mov	r0, r5
    1f7a:	f004 fc31 	bl	67e0 <buffer_write>
		     output->control_block->ctx);
}
    1f7e:	b002      	add	sp, #8
    1f80:	bd70      	pop	{r4, r5, r6, pc}
    1f82:	bf00      	nop
    1f84:	00007fb5 	.word	0x00007fb5
    1f88:	000077e7 	.word	0x000077e7
    1f8c:	000077cb 	.word	0x000077cb

00001f90 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1f90:	4a07      	ldr	r2, [pc, #28]	; (1fb0 <log_output_timestamp_freq_set+0x20>)
    1f92:	2100      	movs	r1, #0
    1f94:	2301      	movs	r3, #1
    1f96:	4290      	cmp	r0, r2
    1f98:	d806      	bhi.n	1fa8 <log_output_timestamp_freq_set+0x18>
    1f9a:	4a06      	ldr	r2, [pc, #24]	; (1fb4 <log_output_timestamp_freq_set+0x24>)
    1f9c:	b901      	cbnz	r1, 1fa0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    1f9e:	2301      	movs	r3, #1
    1fa0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1fa2:	4b05      	ldr	r3, [pc, #20]	; (1fb8 <log_output_timestamp_freq_set+0x28>)
    1fa4:	6018      	str	r0, [r3, #0]
}
    1fa6:	4770      	bx	lr
		frequency /= 2U;
    1fa8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1faa:	005b      	lsls	r3, r3, #1
    1fac:	2101      	movs	r1, #1
    1fae:	e7f2      	b.n	1f96 <log_output_timestamp_freq_set+0x6>
    1fb0:	000f4240 	.word	0x000f4240
    1fb4:	20000824 	.word	0x20000824
    1fb8:	20000828 	.word	0x20000828

00001fbc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1fbc:	4b01      	ldr	r3, [pc, #4]	; (1fc4 <log_backend_rtt_init+0x8>)
    1fbe:	2201      	movs	r2, #1
    1fc0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1fc2:	4770      	bx	lr
    1fc4:	20001142 	.word	0x20001142

00001fc8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1fc8:	4b01      	ldr	r3, [pc, #4]	; (1fd0 <format_set+0x8>)
	return 0;
}
    1fca:	2000      	movs	r0, #0
	log_format_current = log_type;
    1fcc:	6019      	str	r1, [r3, #0]
}
    1fce:	4770      	bx	lr
    1fd0:	20000840 	.word	0x20000840

00001fd4 <panic>:
	panic_mode = true;
    1fd4:	4b02      	ldr	r3, [pc, #8]	; (1fe0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1fd6:	4803      	ldr	r0, [pc, #12]	; (1fe4 <panic+0x10>)
    1fd8:	2201      	movs	r2, #1
    1fda:	701a      	strb	r2, [r3, #0]
    1fdc:	f004 bc14 	b.w	6808 <log_output_flush>
    1fe0:	20001143 	.word	0x20001143
    1fe4:	00007430 	.word	0x00007430

00001fe8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1fe8:	4801      	ldr	r0, [pc, #4]	; (1ff0 <dropped+0x8>)
    1fea:	f7ff bfa5 	b.w	1f38 <log_output_dropped_process>
    1fee:	bf00      	nop
    1ff0:	00007430 	.word	0x00007430

00001ff4 <process>:
{
    1ff4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ff6:	4b06      	ldr	r3, [pc, #24]	; (2010 <process+0x1c>)
    1ff8:	6818      	ldr	r0, [r3, #0]
{
    1ffa:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ffc:	f7ff fb72 	bl	16e4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2000:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2002:	4603      	mov	r3, r0
}
    2004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2008:	4802      	ldr	r0, [pc, #8]	; (2014 <process+0x20>)
    200a:	220f      	movs	r2, #15
    200c:	4718      	bx	r3
    200e:	bf00      	nop
    2010:	20000840 	.word	0x20000840
    2014:	00007430 	.word	0x00007430

00002018 <on_failed_write>:
	if (retry_cnt == 0) {
    2018:	b910      	cbnz	r0, 2020 <on_failed_write+0x8>
		host_present = false;
    201a:	4b07      	ldr	r3, [pc, #28]	; (2038 <on_failed_write+0x20>)
    201c:	7018      	strb	r0, [r3, #0]
}
    201e:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2020:	4b06      	ldr	r3, [pc, #24]	; (203c <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	b11b      	cbz	r3, 202e <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    2026:	f241 3088 	movw	r0, #5000	; 0x1388
    202a:	f004 bfff 	b.w	702c <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    202e:	20a4      	movs	r0, #164	; 0xa4
    2030:	2100      	movs	r1, #0
    2032:	f003 bb09 	b.w	5648 <z_impl_k_sleep>
    2036:	bf00      	nop
    2038:	20001142 	.word	0x20001142
    203c:	20001143 	.word	0x20001143

00002040 <data_out_block_mode>:
{
    2040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2044:	f8df 9074 	ldr.w	r9, [pc, #116]	; 20bc <data_out_block_mode+0x7c>
    2048:	4f1d      	ldr	r7, [pc, #116]	; (20c0 <data_out_block_mode+0x80>)
{
    204a:	4680      	mov	r8, r0
    204c:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    204e:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    2050:	f899 5000 	ldrb.w	r5, [r9]
    2054:	b995      	cbnz	r5, 207c <data_out_block_mode+0x3c>
			RTT_LOCK();
    2056:	f002 fbfd 	bl	4854 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    205a:	4628      	mov	r0, r5
    205c:	4632      	mov	r2, r6
    205e:	4641      	mov	r1, r8
    2060:	f002 fb7a 	bl	4758 <SEGGER_RTT_WriteSkipNoLock>
    2064:	4605      	mov	r5, r0
			RTT_UNLOCK();
    2066:	f002 fbff 	bl	4868 <zephyr_rtt_mutex_unlock>
		if (ret) {
    206a:	b1e5      	cbz	r5, 20a6 <data_out_block_mode+0x66>
	host_present = true;
    206c:	2301      	movs	r3, #1
    206e:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    2070:	f899 3000 	ldrb.w	r3, [r9]
    2074:	b973      	cbnz	r3, 2094 <data_out_block_mode+0x54>
}
    2076:	4630      	mov	r0, r6
    2078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    207c:	4632      	mov	r2, r6
    207e:	4641      	mov	r1, r8
    2080:	2000      	movs	r0, #0
    2082:	f002 fb69 	bl	4758 <SEGGER_RTT_WriteSkipNoLock>
    2086:	4605      	mov	r5, r0
    2088:	e7ef      	b.n	206a <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    208a:	4620      	mov	r0, r4
    208c:	f7ff ffc4 	bl	2018 <on_failed_write>
    2090:	1e65      	subs	r5, r4, #1
    2092:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2094:	2000      	movs	r0, #0
    2096:	f002 fbd3 	bl	4840 <SEGGER_RTT_HasDataUp>
    209a:	2800      	cmp	r0, #0
    209c:	d0eb      	beq.n	2076 <data_out_block_mode+0x36>
    209e:	783b      	ldrb	r3, [r7, #0]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d1f2      	bne.n	208a <data_out_block_mode+0x4a>
    20a4:	e7e7      	b.n	2076 <data_out_block_mode+0x36>
		} else if (host_present) {
    20a6:	783b      	ldrb	r3, [r7, #0]
    20a8:	2b00      	cmp	r3, #0
    20aa:	d0e4      	beq.n	2076 <data_out_block_mode+0x36>
			retry_cnt--;
    20ac:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    20ae:	4620      	mov	r0, r4
    20b0:	f7ff ffb2 	bl	2018 <on_failed_write>
	} while ((ret == 0) && host_present);
    20b4:	783b      	ldrb	r3, [r7, #0]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d1ca      	bne.n	2050 <data_out_block_mode+0x10>
    20ba:	e7dc      	b.n	2076 <data_out_block_mode+0x36>
    20bc:	20001143 	.word	0x20001143
    20c0:	20001142 	.word	0x20001142

000020c4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    20c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    20c8:	4605      	mov	r5, r0
	__asm__ volatile(
    20ca:	f04f 0320 	mov.w	r3, #32
    20ce:	f3ef 8611 	mrs	r6, BASEPRI
    20d2:	f383 8812 	msr	BASEPRI_MAX, r3
    20d6:	f3bf 8f6f 	isb	sy
	return list->head;
    20da:	4b0e      	ldr	r3, [pc, #56]	; (2114 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    20dc:	4f0e      	ldr	r7, [pc, #56]	; (2118 <pm_state_notify+0x54>)
    20de:	681c      	ldr	r4, [r3, #0]
    20e0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 211c <pm_state_notify+0x58>
    20e4:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    20e8:	b92c      	cbnz	r4, 20f6 <pm_state_notify+0x32>
	__asm__ volatile(
    20ea:	f386 8811 	msr	BASEPRI, r6
    20ee:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    20f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    20f6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    20fa:	2d00      	cmp	r5, #0
    20fc:	bf18      	it	ne
    20fe:	4613      	movne	r3, r2
		if (callback) {
    2100:	b12b      	cbz	r3, 210e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2102:	f898 2014 	ldrb.w	r2, [r8, #20]
    2106:	fb09 f202 	mul.w	r2, r9, r2
    210a:	5cb8      	ldrb	r0, [r7, r2]
    210c:	4798      	blx	r3
	return node->next;
    210e:	6824      	ldr	r4, [r4, #0]
    2110:	e7ea      	b.n	20e8 <pm_state_notify+0x24>
    2112:	bf00      	nop
    2114:	2000085c 	.word	0x2000085c
    2118:	20000850 	.word	0x20000850
    211c:	20000f30 	.word	0x20000f30

00002120 <pm_system_resume>:

void pm_system_resume(void)
{
    2120:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    2122:	4b19      	ldr	r3, [pc, #100]	; (2188 <pm_system_resume+0x68>)
    2124:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2126:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    212a:	f004 031f 	and.w	r3, r4, #31
    212e:	2201      	movs	r2, #1
    2130:	409a      	lsls	r2, r3
    2132:	4b16      	ldr	r3, [pc, #88]	; (218c <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2134:	0961      	lsrs	r1, r4, #5
    2136:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    213a:	43d0      	mvns	r0, r2
    213c:	e853 1f00 	ldrex	r1, [r3]
    2140:	ea01 0500 	and.w	r5, r1, r0
    2144:	e843 5600 	strex	r6, r5, [r3]
    2148:	2e00      	cmp	r6, #0
    214a:	d1f7      	bne.n	213c <pm_system_resume+0x1c>
    214c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2150:	420a      	tst	r2, r1
    2152:	d013      	beq.n	217c <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2154:	4b0e      	ldr	r3, [pc, #56]	; (2190 <pm_system_resume+0x70>)
    2156:	4d0f      	ldr	r5, [pc, #60]	; (2194 <pm_system_resume+0x74>)
    2158:	b18b      	cbz	r3, 217e <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    215a:	230c      	movs	r3, #12
    215c:	4363      	muls	r3, r4
    215e:	18ea      	adds	r2, r5, r3
    2160:	5ce8      	ldrb	r0, [r5, r3]
    2162:	7851      	ldrb	r1, [r2, #1]
    2164:	f004 fbd9 	bl	691a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2168:	2000      	movs	r0, #0
    216a:	f7ff ffab 	bl	20c4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    216e:	230c      	movs	r3, #12
    2170:	435c      	muls	r4, r3
    2172:	192a      	adds	r2, r5, r4
    2174:	2300      	movs	r3, #0
    2176:	512b      	str	r3, [r5, r4]
    2178:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    217c:	bd70      	pop	{r4, r5, r6, pc}
    217e:	f383 8811 	msr	BASEPRI, r3
    2182:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2186:	e7ef      	b.n	2168 <pm_system_resume+0x48>
    2188:	20000f30 	.word	0x20000f30
    218c:	20000864 	.word	0x20000864
    2190:	0000691b 	.word	0x0000691b
    2194:	20000850 	.word	0x20000850

00002198 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    219c:	4b35      	ldr	r3, [pc, #212]	; (2274 <pm_system_suspend+0xdc>)
{
    219e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    21a0:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    21a2:	f04f 0320 	mov.w	r3, #32
    21a6:	f3ef 8811 	mrs	r8, BASEPRI
    21aa:	f383 8812 	msr	BASEPRI_MAX, r3
    21ae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    21b2:	240c      	movs	r4, #12
    21b4:	4b30      	ldr	r3, [pc, #192]	; (2278 <pm_system_suspend+0xe0>)
    21b6:	4e31      	ldr	r6, [pc, #196]	; (227c <pm_system_suspend+0xe4>)
    21b8:	436c      	muls	r4, r5
    21ba:	191a      	adds	r2, r3, r4
    21bc:	5d19      	ldrb	r1, [r3, r4]
    21be:	2900      	cmp	r1, #0
    21c0:	d04c      	beq.n	225c <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    21c2:	ca07      	ldmia	r2, {r0, r1, r2}
    21c4:	eb06 0c04 	add.w	ip, r6, r4
    21c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    21cc:	2200      	movs	r2, #0
    21ce:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    21d0:	f388 8811 	msr	BASEPRI, r8
    21d4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    21d8:	230c      	movs	r3, #12
    21da:	436b      	muls	r3, r5
    21dc:	18f2      	adds	r2, r6, r3
    21de:	5cf0      	ldrb	r0, [r6, r3]
    21e0:	2800      	cmp	r0, #0
    21e2:	d039      	beq.n	2258 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    21e4:	1c7b      	adds	r3, r7, #1
    21e6:	d010      	beq.n	220a <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    21e8:	f8d2 c008 	ldr.w	ip, [r2, #8]
    21ec:	4c24      	ldr	r4, [pc, #144]	; (2280 <pm_system_suspend+0xe8>)
    21ee:	4a25      	ldr	r2, [pc, #148]	; (2284 <pm_system_suspend+0xec>)
    21f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    21f4:	2100      	movs	r1, #0
    21f6:	fbec 4100 	umlal	r4, r1, ip, r0
    21fa:	2300      	movs	r3, #0
    21fc:	4620      	mov	r0, r4
    21fe:	f7fd ff7f 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2202:	2101      	movs	r1, #1
    2204:	1a38      	subs	r0, r7, r0
    2206:	f004 feef 	bl	6fe8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    220a:	f003 f95f 	bl	54cc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    220e:	2001      	movs	r0, #1
    2210:	f7ff ff58 	bl	20c4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2214:	f3bf 8f5b 	dmb	ish
    2218:	4b1b      	ldr	r3, [pc, #108]	; (2288 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    221a:	096a      	lsrs	r2, r5, #5
    221c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    2220:	f005 011f 	and.w	r1, r5, #31
    2224:	2201      	movs	r2, #1
    2226:	408a      	lsls	r2, r1
    2228:	e853 0f00 	ldrex	r0, [r3]
    222c:	4310      	orrs	r0, r2
    222e:	e843 0100 	strex	r1, r0, [r3]
    2232:	2900      	cmp	r1, #0
    2234:	d1f8      	bne.n	2228 <pm_system_suspend+0x90>
    2236:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    223a:	4b14      	ldr	r3, [pc, #80]	; (228c <pm_system_suspend+0xf4>)
    223c:	b13b      	cbz	r3, 224e <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    223e:	230c      	movs	r3, #12
    2240:	fb03 f005 	mul.w	r0, r3, r5
    2244:	1833      	adds	r3, r6, r0
    2246:	5c30      	ldrb	r0, [r6, r0]
    2248:	7859      	ldrb	r1, [r3, #1]
    224a:	f004 fb5a 	bl	6902 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    224e:	f7ff ff67 	bl	2120 <pm_system_resume>
	k_sched_unlock();
    2252:	f003 f94f 	bl	54f4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2256:	2001      	movs	r0, #1
}
    2258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    225c:	4601      	mov	r1, r0
    225e:	4628      	mov	r0, r5
    2260:	f000 f816 	bl	2290 <pm_policy_next_state>
		if (info != NULL) {
    2264:	2800      	cmp	r0, #0
    2266:	d0b3      	beq.n	21d0 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    2268:	c807      	ldmia	r0, {r0, r1, r2}
    226a:	4434      	add	r4, r6
    226c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    2270:	e7ae      	b.n	21d0 <pm_system_suspend+0x38>
    2272:	bf00      	nop
    2274:	20000f30 	.word	0x20000f30
    2278:	20000844 	.word	0x20000844
    227c:	20000850 	.word	0x20000850
    2280:	000f423f 	.word	0x000f423f
    2284:	000f4240 	.word	0x000f4240
    2288:	20000864 	.word	0x20000864
    228c:	00006903 	.word	0x00006903

00002290 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2294:	b085      	sub	sp, #20
    2296:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2298:	a903      	add	r1, sp, #12
    229a:	f000 f843 	bl	2324 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    229e:	4b1e      	ldr	r3, [pc, #120]	; (2318 <pm_policy_next_state+0x88>)
    22a0:	9d03      	ldr	r5, [sp, #12]
    22a2:	f8d3 a000 	ldr.w	sl, [r3]
    22a6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 231c <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    22aa:	1e43      	subs	r3, r0, #1
    22ac:	b21b      	sxth	r3, r3
    22ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    22b2:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    22b4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    22b8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    22bc:	f04f 0b00 	mov.w	fp, #0
    22c0:	b924      	cbnz	r4, 22cc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    22c2:	46a1      	mov	r9, r4
}
    22c4:	4648      	mov	r0, r9
    22c6:	b005      	add	sp, #20
    22c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22cc:	6868      	ldr	r0, [r5, #4]
    22ce:	4a14      	ldr	r2, [pc, #80]	; (2320 <pm_policy_next_state+0x90>)
    22d0:	46c4      	mov	ip, r8
    22d2:	4659      	mov	r1, fp
    22d4:	fbe0 c107 	umlal	ip, r1, r0, r7
    22d8:	2300      	movs	r3, #0
    22da:	4660      	mov	r0, ip
    22dc:	f7fd ff10 	bl	100 <__aeabi_uldivmod>
    22e0:	9001      	str	r0, [sp, #4]
    22e2:	68a8      	ldr	r0, [r5, #8]
    22e4:	4a0e      	ldr	r2, [pc, #56]	; (2320 <pm_policy_next_state+0x90>)
    22e6:	46c4      	mov	ip, r8
    22e8:	4659      	mov	r1, fp
    22ea:	fbe0 c107 	umlal	ip, r1, r0, r7
    22ee:	2300      	movs	r3, #0
    22f0:	4660      	mov	r0, ip
    22f2:	f7fd ff05 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    22f6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    22fa:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    22fc:	d001      	beq.n	2302 <pm_policy_next_state+0x72>
    22fe:	4582      	cmp	sl, r0
    2300:	d905      	bls.n	230e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    2302:	1c73      	adds	r3, r6, #1
    2304:	d0de      	beq.n	22c4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    2306:	9b01      	ldr	r3, [sp, #4]
    2308:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    230a:	42b0      	cmp	r0, r6
    230c:	d9da      	bls.n	22c4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    230e:	3c01      	subs	r4, #1
    2310:	b2a4      	uxth	r4, r4
    2312:	3d0c      	subs	r5, #12
    2314:	e7d4      	b.n	22c0 <pm_policy_next_state+0x30>
    2316:	bf00      	nop
    2318:	20000010 	.word	0x20000010
    231c:	000f423f 	.word	0x000f423f
    2320:	000f4240 	.word	0x000f4240

00002324 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2324:	b908      	cbnz	r0, 232a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2326:	4b02      	ldr	r3, [pc, #8]	; (2330 <pm_state_cpu_get_all+0xc>)
    2328:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    232a:	2000      	movs	r0, #0
    232c:	4770      	bx	lr
    232e:	bf00      	nop
    2330:	00007440 	.word	0x00007440

00002334 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2334:	4801      	ldr	r0, [pc, #4]	; (233c <nrf_cc3xx_platform_abort_init+0x8>)
    2336:	f003 bc65 	b.w	5c04 <nrf_cc3xx_platform_set_abort>
    233a:	bf00      	nop
    233c:	00007440 	.word	0x00007440

00002340 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2340:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2342:	4604      	mov	r4, r0
    2344:	b918      	cbnz	r0, 234e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2346:	4b0f      	ldr	r3, [pc, #60]	; (2384 <mutex_free_platform+0x44>)
    2348:	480f      	ldr	r0, [pc, #60]	; (2388 <mutex_free_platform+0x48>)
    234a:	685b      	ldr	r3, [r3, #4]
    234c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    234e:	6861      	ldr	r1, [r4, #4]
    2350:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    2354:	d00f      	beq.n	2376 <mutex_free_platform+0x36>
    2356:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    235a:	d00c      	beq.n	2376 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    235c:	4d0b      	ldr	r5, [pc, #44]	; (238c <mutex_free_platform+0x4c>)
    235e:	42a9      	cmp	r1, r5
    2360:	d009      	beq.n	2376 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2362:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    2366:	d007      	beq.n	2378 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2368:	4809      	ldr	r0, [pc, #36]	; (2390 <mutex_free_platform+0x50>)
    236a:	4621      	mov	r1, r4
    236c:	f004 fcfb 	bl	6d66 <k_mem_slab_free>
        mutex->mutex = NULL;
    2370:	2300      	movs	r3, #0
    2372:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2374:	6065      	str	r5, [r4, #4]
}
    2376:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2378:	6820      	ldr	r0, [r4, #0]
    237a:	2214      	movs	r2, #20
    237c:	f004 fab5 	bl	68ea <memset>
    2380:	e7f8      	b.n	2374 <mutex_free_platform+0x34>
    2382:	bf00      	nop
    2384:	2000010c 	.word	0x2000010c
    2388:	00007826 	.word	0x00007826
    238c:	a95c5f2c 	.word	0xa95c5f2c
    2390:	20000d68 	.word	0x20000d68

00002394 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2394:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2396:	b320      	cbz	r0, 23e2 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2398:	6843      	ldr	r3, [r0, #4]
    239a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    239e:	d110      	bne.n	23c2 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    23a0:	2201      	movs	r2, #1
    23a2:	6803      	ldr	r3, [r0, #0]
    23a4:	f3bf 8f5b 	dmb	ish
    23a8:	e853 1f00 	ldrex	r1, [r3]
    23ac:	2900      	cmp	r1, #0
    23ae:	d103      	bne.n	23b8 <mutex_lock_platform+0x24>
    23b0:	e843 2000 	strex	r0, r2, [r3]
    23b4:	2800      	cmp	r0, #0
    23b6:	d1f7      	bne.n	23a8 <mutex_lock_platform+0x14>
    23b8:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    23bc:	d10d      	bne.n	23da <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    23be:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    23c0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    23c2:	4a09      	ldr	r2, [pc, #36]	; (23e8 <mutex_lock_platform+0x54>)
    23c4:	4293      	cmp	r3, r2
    23c6:	d00a      	beq.n	23de <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    23c8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    23ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    23ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    23d2:	f002 fd73 	bl	4ebc <z_impl_k_mutex_lock>
        if (ret == 0) {
    23d6:	2800      	cmp	r0, #0
    23d8:	d0f1      	beq.n	23be <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    23da:	4804      	ldr	r0, [pc, #16]	; (23ec <mutex_lock_platform+0x58>)
    23dc:	e7f0      	b.n	23c0 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    23de:	4804      	ldr	r0, [pc, #16]	; (23f0 <mutex_lock_platform+0x5c>)
    23e0:	e7ee      	b.n	23c0 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    23e2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    23e6:	e7eb      	b.n	23c0 <mutex_lock_platform+0x2c>
    23e8:	a95c5f2c 	.word	0xa95c5f2c
    23ec:	ffff8fe9 	.word	0xffff8fe9
    23f0:	ffff8fea 	.word	0xffff8fea

000023f4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23f4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    23f6:	b1d8      	cbz	r0, 2430 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    23f8:	6843      	ldr	r3, [r0, #4]
    23fa:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    23fe:	d110      	bne.n	2422 <mutex_unlock_platform+0x2e>
    2400:	2200      	movs	r2, #0
    2402:	6803      	ldr	r3, [r0, #0]
    2404:	f3bf 8f5b 	dmb	ish
    2408:	e853 1f00 	ldrex	r1, [r3]
    240c:	2901      	cmp	r1, #1
    240e:	d103      	bne.n	2418 <mutex_unlock_platform+0x24>
    2410:	e843 2000 	strex	r0, r2, [r3]
    2414:	2800      	cmp	r0, #0
    2416:	d1f7      	bne.n	2408 <mutex_unlock_platform+0x14>
    2418:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    241c:	d10b      	bne.n	2436 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    241e:	2000      	movs	r0, #0
    }
}
    2420:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2422:	4a07      	ldr	r2, [pc, #28]	; (2440 <mutex_unlock_platform+0x4c>)
    2424:	4293      	cmp	r3, r2
    2426:	d008      	beq.n	243a <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2428:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    242a:	f002 fdc1 	bl	4fb0 <z_impl_k_mutex_unlock>
    242e:	e7f6      	b.n	241e <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2430:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2434:	e7f4      	b.n	2420 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2436:	4803      	ldr	r0, [pc, #12]	; (2444 <mutex_unlock_platform+0x50>)
    2438:	e7f2      	b.n	2420 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    243a:	4803      	ldr	r0, [pc, #12]	; (2448 <mutex_unlock_platform+0x54>)
    243c:	e7f0      	b.n	2420 <mutex_unlock_platform+0x2c>
    243e:	bf00      	nop
    2440:	a95c5f2c 	.word	0xa95c5f2c
    2444:	ffff8fe9 	.word	0xffff8fe9
    2448:	ffff8fea 	.word	0xffff8fea

0000244c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    244c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    244e:	4604      	mov	r4, r0
    2450:	b918      	cbnz	r0, 245a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2452:	4b1d      	ldr	r3, [pc, #116]	; (24c8 <mutex_init_platform+0x7c>)
    2454:	481d      	ldr	r0, [pc, #116]	; (24cc <mutex_init_platform+0x80>)
    2456:	685b      	ldr	r3, [r3, #4]
    2458:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    245a:	6863      	ldr	r3, [r4, #4]
    245c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2460:	d02f      	beq.n	24c2 <mutex_init_platform+0x76>
    2462:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    2466:	d02c      	beq.n	24c2 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    2468:	4a19      	ldr	r2, [pc, #100]	; (24d0 <mutex_init_platform+0x84>)
    246a:	4293      	cmp	r3, r2
    246c:	d119      	bne.n	24a2 <mutex_init_platform+0x56>
    246e:	6823      	ldr	r3, [r4, #0]
    2470:	bb03      	cbnz	r3, 24b4 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2472:	4818      	ldr	r0, [pc, #96]	; (24d4 <mutex_init_platform+0x88>)
    2474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    247c:	4621      	mov	r1, r4
    247e:	f002 fc19 	bl	4cb4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2482:	b908      	cbnz	r0, 2488 <mutex_init_platform+0x3c>
    2484:	6823      	ldr	r3, [r4, #0]
    2486:	b91b      	cbnz	r3, 2490 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    2488:	4b0f      	ldr	r3, [pc, #60]	; (24c8 <mutex_init_platform+0x7c>)
    248a:	4813      	ldr	r0, [pc, #76]	; (24d8 <mutex_init_platform+0x8c>)
    248c:	685b      	ldr	r3, [r3, #4]
    248e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2490:	6820      	ldr	r0, [r4, #0]
    2492:	2214      	movs	r2, #20
    2494:	2100      	movs	r1, #0
    2496:	f004 fa28 	bl	68ea <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    249a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    249e:	6063      	str	r3, [r4, #4]
    24a0:	e008      	b.n	24b4 <mutex_init_platform+0x68>
    switch(flags){
    24a2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    24a6:	d80d      	bhi.n	24c4 <mutex_init_platform+0x78>
    24a8:	2b3a      	cmp	r3, #58	; 0x3a
    24aa:	d003      	beq.n	24b4 <mutex_init_platform+0x68>
    24ac:	f640 62ba 	movw	r2, #3770	; 0xeba
    24b0:	4293      	cmp	r3, r2
    24b2:	d1de      	bne.n	2472 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    24b4:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    24b6:	f004 fc99 	bl	6dec <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    24ba:	6863      	ldr	r3, [r4, #4]
    24bc:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    24c0:	6063      	str	r3, [r4, #4]
}
    24c2:	bd10      	pop	{r4, pc}
    switch(flags){
    24c4:	4a05      	ldr	r2, [pc, #20]	; (24dc <mutex_init_platform+0x90>)
    24c6:	e7f3      	b.n	24b0 <mutex_init_platform+0x64>
    24c8:	2000010c 	.word	0x2000010c
    24cc:	00007826 	.word	0x00007826
    24d0:	a95c5f2c 	.word	0xa95c5f2c
    24d4:	20000d68 	.word	0x20000d68
    24d8:	0000784c 	.word	0x0000784c
    24dc:	3a00003a 	.word	0x3a00003a

000024e0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    24e0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    24e2:	4906      	ldr	r1, [pc, #24]	; (24fc <nrf_cc3xx_platform_mutex_init+0x1c>)
    24e4:	4806      	ldr	r0, [pc, #24]	; (2500 <nrf_cc3xx_platform_mutex_init+0x20>)
    24e6:	2340      	movs	r3, #64	; 0x40
    24e8:	2214      	movs	r2, #20
    24ea:	f004 fc2e 	bl	6d4a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    24ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    24f2:	4904      	ldr	r1, [pc, #16]	; (2504 <nrf_cc3xx_platform_mutex_init+0x24>)
    24f4:	4804      	ldr	r0, [pc, #16]	; (2508 <nrf_cc3xx_platform_mutex_init+0x28>)
    24f6:	f003 bbf7 	b.w	5ce8 <nrf_cc3xx_platform_set_mutexes>
    24fa:	bf00      	nop
    24fc:	20000868 	.word	0x20000868
    2500:	20000d68 	.word	0x20000d68
    2504:	00007448 	.word	0x00007448
    2508:	0000745c 	.word	0x0000745c

0000250c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    250c:	4901      	ldr	r1, [pc, #4]	; (2514 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    250e:	2210      	movs	r2, #16
	str	r2, [r1]
    2510:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2512:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2514:	e000ed10 	.word	0xe000ed10

00002518 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2518:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    251a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    251c:	f380 8811 	msr	BASEPRI, r0
	isb
    2520:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2524:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2528:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    252a:	b662      	cpsie	i
	isb
    252c:	f3bf 8f6f 	isb	sy

	bx	lr
    2530:	4770      	bx	lr
    2532:	bf00      	nop

00002534 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2534:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2536:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2538:	f381 8811 	msr	BASEPRI, r1

	wfe
    253c:	bf20      	wfe

	msr	BASEPRI, r0
    253e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2542:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2544:	4770      	bx	lr
    2546:	bf00      	nop

00002548 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    254c:	4681      	mov	r9, r0
    254e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2550:	460c      	mov	r4, r1
    2552:	2900      	cmp	r1, #0
    2554:	d04c      	beq.n	25f0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2556:	466e      	mov	r6, sp
    2558:	b08a      	sub	sp, #40	; 0x28
    255a:	e9d1 1200 	ldrd	r1, r2, [r1]
    255e:	68a3      	ldr	r3, [r4, #8]
    2560:	466d      	mov	r5, sp
    2562:	4827      	ldr	r0, [pc, #156]	; (2600 <z_arm_fatal_error+0xb8>)
    2564:	46a8      	mov	r8, r5
    2566:	f04f 0a05 	mov.w	sl, #5
    256a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    256e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2572:	f848 af10 	str.w	sl, [r8, #16]!
    2576:	4823      	ldr	r0, [pc, #140]	; (2604 <z_arm_fatal_error+0xbc>)
    2578:	4642      	mov	r2, r8
    257a:	2300      	movs	r3, #0
    257c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2580:	f7ff fa94 	bl	1aac <z_impl_z_log_msg_static_create>
    2584:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2586:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    258a:	6963      	ldr	r3, [r4, #20]
    258c:	46ad      	mov	sp, r5
    258e:	481e      	ldr	r0, [pc, #120]	; (2608 <z_arm_fatal_error+0xc0>)
    2590:	f8c5 a010 	str.w	sl, [r5, #16]
    2594:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2598:	e9c5 2307 	strd	r2, r3, [r5, #28]
    259c:	4819      	ldr	r0, [pc, #100]	; (2604 <z_arm_fatal_error+0xbc>)
    259e:	2300      	movs	r3, #0
    25a0:	4642      	mov	r2, r8
    25a2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    25a6:	f7ff fa81 	bl	1aac <z_impl_z_log_msg_static_create>
    25aa:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    25ac:	b088      	sub	sp, #32
    25ae:	69e3      	ldr	r3, [r4, #28]
    25b0:	466d      	mov	r5, sp
    25b2:	4a16      	ldr	r2, [pc, #88]	; (260c <z_arm_fatal_error+0xc4>)
    25b4:	46a8      	mov	r8, r5
    25b6:	f04f 0a03 	mov.w	sl, #3
    25ba:	e9c5 2305 	strd	r2, r3, [r5, #20]
    25be:	f848 af10 	str.w	sl, [r8, #16]!
    25c2:	4810      	ldr	r0, [pc, #64]	; (2604 <z_arm_fatal_error+0xbc>)
    25c4:	2300      	movs	r3, #0
    25c6:	4642      	mov	r2, r8
    25c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    25cc:	f7ff fa6e 	bl	1aac <z_impl_z_log_msg_static_create>
    25d0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    25d2:	69a3      	ldr	r3, [r4, #24]
    25d4:	46ad      	mov	sp, r5
    25d6:	4a0e      	ldr	r2, [pc, #56]	; (2610 <z_arm_fatal_error+0xc8>)
    25d8:	f8c5 a010 	str.w	sl, [r5, #16]
    25dc:	e9c5 2305 	strd	r2, r3, [r5, #20]
    25e0:	4808      	ldr	r0, [pc, #32]	; (2604 <z_arm_fatal_error+0xbc>)
    25e2:	2300      	movs	r3, #0
    25e4:	4642      	mov	r2, r8
    25e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    25ea:	f7ff fa5f 	bl	1aac <z_impl_z_log_msg_static_create>
    25ee:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    25f0:	4621      	mov	r1, r4
    25f2:	4648      	mov	r0, r9
    25f4:	f002 f9de 	bl	49b4 <z_fatal_error>
}
    25f8:	46bd      	mov	sp, r7
    25fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25fe:	bf00      	nop
    2600:	00007879 	.word	0x00007879
    2604:	0000737c 	.word	0x0000737c
    2608:	000078a8 	.word	0x000078a8
    260c:	000078d7 	.word	0x000078d7
    2610:	000078e6 	.word	0x000078e6

00002614 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2614:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2616:	2800      	cmp	r0, #0
    2618:	db07      	blt.n	262a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    261a:	4a04      	ldr	r2, [pc, #16]	; (262c <arch_irq_enable+0x18>)
    261c:	0941      	lsrs	r1, r0, #5
    261e:	2301      	movs	r3, #1
    2620:	f000 001f 	and.w	r0, r0, #31
    2624:	4083      	lsls	r3, r0
    2626:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    262a:	4770      	bx	lr
    262c:	e000e100 	.word	0xe000e100

00002630 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2630:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2632:	2800      	cmp	r0, #0
    2634:	db0c      	blt.n	2650 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2636:	0943      	lsrs	r3, r0, #5
    2638:	4906      	ldr	r1, [pc, #24]	; (2654 <arch_irq_disable+0x24>)
    263a:	f000 001f 	and.w	r0, r0, #31
    263e:	3320      	adds	r3, #32
    2640:	2201      	movs	r2, #1
    2642:	4082      	lsls	r2, r0
    2644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    264c:	f3bf 8f6f 	isb	sy
}
    2650:	4770      	bx	lr
    2652:	bf00      	nop
    2654:	e000e100 	.word	0xe000e100

00002658 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2658:	4b05      	ldr	r3, [pc, #20]	; (2670 <arch_irq_is_enabled+0x18>)
    265a:	0942      	lsrs	r2, r0, #5
    265c:	f000 001f 	and.w	r0, r0, #31
    2660:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2664:	2301      	movs	r3, #1
    2666:	fa03 f000 	lsl.w	r0, r3, r0
}
    266a:	4010      	ands	r0, r2
    266c:	4770      	bx	lr
    266e:	bf00      	nop
    2670:	e000e100 	.word	0xe000e100

00002674 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2674:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2676:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2678:	bfa8      	it	ge
    267a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    267e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2682:	bfb8      	it	lt
    2684:	4b06      	ldrlt	r3, [pc, #24]	; (26a0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2686:	ea4f 1141 	mov.w	r1, r1, lsl #5
    268a:	bfac      	ite	ge
    268c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2690:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2694:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2696:	bfb4      	ite	lt
    2698:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    269a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    269e:	4770      	bx	lr
    26a0:	e000ed14 	.word	0xe000ed14

000026a4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    26a4:	bf30      	wfi
    b z_SysNmiOnReset
    26a6:	f7ff bffd 	b.w	26a4 <z_SysNmiOnReset>
    26aa:	bf00      	nop

000026ac <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    26ac:	4a0b      	ldr	r2, [pc, #44]	; (26dc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    26ae:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    26b0:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <z_arm_prep_c+0x34>)
    26b2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    26b6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    26b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26bc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    26c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    26c4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    26c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    26cc:	f002 fa2c 	bl	4b28 <z_bss_zero>
	z_data_copy();
    26d0:	f003 f83a 	bl	5748 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    26d4:	f000 fbba 	bl	2e4c <z_arm_interrupt_init>
	z_cstart();
    26d8:	f002 fa6a 	bl	4bb0 <z_cstart>
    26dc:	00000000 	.word	0x00000000
    26e0:	e000ed00 	.word	0xe000ed00

000026e4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    26e4:	4a09      	ldr	r2, [pc, #36]	; (270c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    26e6:	490a      	ldr	r1, [pc, #40]	; (2710 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    26e8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    26ea:	6809      	ldr	r1, [r1, #0]
    26ec:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26ee:	4909      	ldr	r1, [pc, #36]	; (2714 <arch_swap+0x30>)
	_current->arch.basepri = key;
    26f0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26f2:	684b      	ldr	r3, [r1, #4]
    26f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26f8:	604b      	str	r3, [r1, #4]
    26fa:	2300      	movs	r3, #0
    26fc:	f383 8811 	msr	BASEPRI, r3
    2700:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2704:	6893      	ldr	r3, [r2, #8]
}
    2706:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2708:	4770      	bx	lr
    270a:	bf00      	nop
    270c:	20000f30 	.word	0x20000f30
    2710:	00007584 	.word	0x00007584
    2714:	e000ed00 	.word	0xe000ed00

00002718 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2718:	4912      	ldr	r1, [pc, #72]	; (2764 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    271a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    271c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2720:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2722:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2726:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    272a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    272c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2730:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2734:	4f0c      	ldr	r7, [pc, #48]	; (2768 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2736:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    273a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    273c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    273e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2740:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2742:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2744:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2746:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    274a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    274c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    274e:	f000 fc19 	bl	2f84 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2752:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2756:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    275a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    275e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2762:	4770      	bx	lr
    ldr r1, =_kernel
    2764:	20000f30 	.word	0x20000f30
    ldr v4, =_SCS_ICSR
    2768:	e000ed04 	.word	0xe000ed04

0000276c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    276c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2770:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2772:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2776:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    277a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    277c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2780:	2902      	cmp	r1, #2
    beq _oops
    2782:	d0ff      	beq.n	2784 <_oops>

00002784 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2784:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2786:	f004 f879 	bl	687c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    278a:	bd01      	pop	{r0, pc}

0000278c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    278c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2790:	9b00      	ldr	r3, [sp, #0]
    2792:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2796:	490a      	ldr	r1, [pc, #40]	; (27c0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2798:	9b01      	ldr	r3, [sp, #4]
    279a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    279e:	9b02      	ldr	r3, [sp, #8]
    27a0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    27a4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    27a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    27ac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    27b0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    27b4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    27b6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    27b8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    27ba:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    27bc:	4770      	bx	lr
    27be:	bf00      	nop
    27c0:	00006057 	.word	0x00006057

000027c4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    27c4:	4a09      	ldr	r2, [pc, #36]	; (27ec <z_check_thread_stack_fail+0x28>)
{
    27c6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    27c8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    27ca:	b170      	cbz	r0, 27ea <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    27cc:	f113 0f16 	cmn.w	r3, #22
    27d0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    27d2:	d005      	beq.n	27e0 <z_check_thread_stack_fail+0x1c>
    27d4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    27d8:	429a      	cmp	r2, r3
    27da:	d805      	bhi.n	27e8 <z_check_thread_stack_fail+0x24>
    27dc:	4283      	cmp	r3, r0
    27de:	d203      	bcs.n	27e8 <z_check_thread_stack_fail+0x24>
		return 0;
    27e0:	4281      	cmp	r1, r0
    27e2:	bf28      	it	cs
    27e4:	2000      	movcs	r0, #0
    27e6:	4770      	bx	lr
    27e8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    27ea:	4770      	bx	lr
    27ec:	20000f30 	.word	0x20000f30

000027f0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    27f0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    27f2:	4b09      	ldr	r3, [pc, #36]	; (2818 <arch_switch_to_main_thread+0x28>)
    27f4:	6098      	str	r0, [r3, #8]
{
    27f6:	460d      	mov	r5, r1
    27f8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    27fa:	f000 fbc3 	bl	2f84 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    27fe:	4620      	mov	r0, r4
    2800:	f385 8809 	msr	PSP, r5
    2804:	2100      	movs	r1, #0
    2806:	b663      	cpsie	if
    2808:	f381 8811 	msr	BASEPRI, r1
    280c:	f3bf 8f6f 	isb	sy
    2810:	2200      	movs	r2, #0
    2812:	2300      	movs	r3, #0
    2814:	f003 fc1f 	bl	6056 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2818:	20000f30 	.word	0x20000f30

0000281c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    281c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    281e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2820:	4a0b      	ldr	r2, [pc, #44]	; (2850 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2822:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2824:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2826:	bf1e      	ittt	ne
	movne	r1, #0
    2828:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    282a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    282c:	f004 facf 	blne	6dce <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2830:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2832:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2836:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    283a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    283e:	4905      	ldr	r1, [pc, #20]	; (2854 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2840:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2842:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2844:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2846:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    284a:	4903      	ldr	r1, [pc, #12]	; (2858 <_isr_wrapper+0x3c>)
	bx r1
    284c:	4708      	bx	r1
    284e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2850:	20000f30 	.word	0x20000f30
	ldr r1, =_sw_isr_table
    2854:	00007190 	.word	0x00007190
	ldr r1, =z_arm_int_exit
    2858:	0000285d 	.word	0x0000285d

0000285c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    285c:	4b04      	ldr	r3, [pc, #16]	; (2870 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    285e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2860:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2862:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2864:	d003      	beq.n	286e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2866:	4903      	ldr	r1, [pc, #12]	; (2874 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    286c:	600a      	str	r2, [r1, #0]

0000286e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    286e:	4770      	bx	lr
	ldr r3, =_kernel
    2870:	20000f30 	.word	0x20000f30
	ldr r1, =_SCS_ICSR
    2874:	e000ed04 	.word	0xe000ed04

00002878 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    287c:	b086      	sub	sp, #24
    287e:	4606      	mov	r6, r0
    2880:	af00      	add	r7, sp, #0
    2882:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2884:	4b3e      	ldr	r3, [pc, #248]	; (2980 <bus_fault.constprop.0+0x108>)
    2886:	617b      	str	r3, [r7, #20]
    2888:	2402      	movs	r4, #2
    288a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    288e:	483d      	ldr	r0, [pc, #244]	; (2984 <bus_fault.constprop.0+0x10c>)
    2890:	613c      	str	r4, [r7, #16]
    2892:	f107 0210 	add.w	r2, r7, #16
    2896:	f004 f800 	bl	689a <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    289a:	4b3b      	ldr	r3, [pc, #236]	; (2988 <bus_fault.constprop.0+0x110>)
    289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    289e:	04d9      	lsls	r1, r3, #19
    28a0:	d509      	bpl.n	28b6 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    28a2:	4b3a      	ldr	r3, [pc, #232]	; (298c <bus_fault.constprop.0+0x114>)
    28a4:	4837      	ldr	r0, [pc, #220]	; (2984 <bus_fault.constprop.0+0x10c>)
    28a6:	e9c7 4304 	strd	r4, r3, [r7, #16]
    28aa:	f107 0210 	add.w	r2, r7, #16
    28ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28b2:	f003 fff2 	bl	689a <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    28b6:	4b34      	ldr	r3, [pc, #208]	; (2988 <bus_fault.constprop.0+0x110>)
    28b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28ba:	051a      	lsls	r2, r3, #20
    28bc:	d50a      	bpl.n	28d4 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    28be:	4b34      	ldr	r3, [pc, #208]	; (2990 <bus_fault.constprop.0+0x118>)
    28c0:	617b      	str	r3, [r7, #20]
    28c2:	2302      	movs	r3, #2
    28c4:	482f      	ldr	r0, [pc, #188]	; (2984 <bus_fault.constprop.0+0x10c>)
    28c6:	613b      	str	r3, [r7, #16]
    28c8:	f107 0210 	add.w	r2, r7, #16
    28cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28d0:	f003 ffe3 	bl	689a <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    28d4:	4c2c      	ldr	r4, [pc, #176]	; (2988 <bus_fault.constprop.0+0x110>)
    28d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28d8:	059b      	lsls	r3, r3, #22
    28da:	d522      	bpl.n	2922 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    28dc:	46e8      	mov	r8, sp
    28de:	4b2d      	ldr	r3, [pc, #180]	; (2994 <bus_fault.constprop.0+0x11c>)
    28e0:	617b      	str	r3, [r7, #20]
    28e2:	2302      	movs	r3, #2
    28e4:	4827      	ldr	r0, [pc, #156]	; (2984 <bus_fault.constprop.0+0x10c>)
    28e6:	613b      	str	r3, [r7, #16]
    28e8:	f107 0210 	add.w	r2, r7, #16
    28ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28f0:	f003 ffd3 	bl	689a <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    28f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    28f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    28f8:	0410      	lsls	r0, r2, #16
    28fa:	d512      	bpl.n	2922 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    28fc:	b088      	sub	sp, #32
    28fe:	466a      	mov	r2, sp
    2900:	4925      	ldr	r1, [pc, #148]	; (2998 <bus_fault.constprop.0+0x120>)
    2902:	4820      	ldr	r0, [pc, #128]	; (2984 <bus_fault.constprop.0+0x10c>)
    2904:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2908:	2303      	movs	r3, #3
    290a:	f842 3f10 	str.w	r3, [r2, #16]!
    290e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2912:	f003 ffc2 	bl	689a <z_log_msg_static_create.constprop.0>
    2916:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2918:	b11e      	cbz	r6, 2922 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    291a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    291c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2920:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2922:	4b19      	ldr	r3, [pc, #100]	; (2988 <bus_fault.constprop.0+0x110>)
    2924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2926:	0559      	lsls	r1, r3, #21
    2928:	d50a      	bpl.n	2940 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    292a:	4b1c      	ldr	r3, [pc, #112]	; (299c <bus_fault.constprop.0+0x124>)
    292c:	617b      	str	r3, [r7, #20]
    292e:	2302      	movs	r3, #2
    2930:	4814      	ldr	r0, [pc, #80]	; (2984 <bus_fault.constprop.0+0x10c>)
    2932:	613b      	str	r3, [r7, #16]
    2934:	f107 0210 	add.w	r2, r7, #16
    2938:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    293c:	f003 ffad 	bl	689a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2940:	4b11      	ldr	r3, [pc, #68]	; (2988 <bus_fault.constprop.0+0x110>)
    2942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2944:	05d2      	lsls	r2, r2, #23
    2946:	d515      	bpl.n	2974 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    2948:	4b15      	ldr	r3, [pc, #84]	; (29a0 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    294a:	617b      	str	r3, [r7, #20]
    294c:	2302      	movs	r3, #2
    294e:	480d      	ldr	r0, [pc, #52]	; (2984 <bus_fault.constprop.0+0x10c>)
    2950:	613b      	str	r3, [r7, #16]
    2952:	f107 0210 	add.w	r2, r7, #16
    2956:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    295a:	f003 ff9e 	bl	689a <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    295e:	4a0a      	ldr	r2, [pc, #40]	; (2988 <bus_fault.constprop.0+0x110>)
    2960:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2962:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2964:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    2968:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    296a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    296c:	7028      	strb	r0, [r5, #0]
}
    296e:	46bd      	mov	sp, r7
    2970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2976:	049b      	lsls	r3, r3, #18
    2978:	d5f1      	bpl.n	295e <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    297a:	4b0a      	ldr	r3, [pc, #40]	; (29a4 <bus_fault.constprop.0+0x12c>)
    297c:	e7e5      	b.n	294a <bus_fault.constprop.0+0xd2>
    297e:	bf00      	nop
    2980:	00007914 	.word	0x00007914
    2984:	0000737c 	.word	0x0000737c
    2988:	e000ed00 	.word	0xe000ed00
    298c:	0000792a 	.word	0x0000792a
    2990:	0000793b 	.word	0x0000793b
    2994:	0000794e 	.word	0x0000794e
    2998:	00007967 	.word	0x00007967
    299c:	0000797c 	.word	0x0000797c
    29a0:	00007997 	.word	0x00007997
    29a4:	000079af 	.word	0x000079af

000029a8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    29a8:	b510      	push	{r4, lr}
    29aa:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    29ac:	4b33      	ldr	r3, [pc, #204]	; (2a7c <usage_fault.constprop.0+0xd4>)
    29ae:	4834      	ldr	r0, [pc, #208]	; (2a80 <usage_fault.constprop.0+0xd8>)
    29b0:	9305      	str	r3, [sp, #20]
    29b2:	2402      	movs	r4, #2
    29b4:	aa04      	add	r2, sp, #16
    29b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29ba:	9404      	str	r4, [sp, #16]
    29bc:	f003 ff6d 	bl	689a <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    29c0:	4b30      	ldr	r3, [pc, #192]	; (2a84 <usage_fault.constprop.0+0xdc>)
    29c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29c4:	019b      	lsls	r3, r3, #6
    29c6:	d508      	bpl.n	29da <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    29c8:	4b2f      	ldr	r3, [pc, #188]	; (2a88 <usage_fault.constprop.0+0xe0>)
    29ca:	482d      	ldr	r0, [pc, #180]	; (2a80 <usage_fault.constprop.0+0xd8>)
    29cc:	aa04      	add	r2, sp, #16
    29ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29d2:	e9cd 4304 	strd	r4, r3, [sp, #16]
    29d6:	f003 ff60 	bl	689a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    29da:	4b2a      	ldr	r3, [pc, #168]	; (2a84 <usage_fault.constprop.0+0xdc>)
    29dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29de:	01dc      	lsls	r4, r3, #7
    29e0:	d509      	bpl.n	29f6 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    29e2:	4b2a      	ldr	r3, [pc, #168]	; (2a8c <usage_fault.constprop.0+0xe4>)
    29e4:	9305      	str	r3, [sp, #20]
    29e6:	4826      	ldr	r0, [pc, #152]	; (2a80 <usage_fault.constprop.0+0xd8>)
    29e8:	2302      	movs	r3, #2
    29ea:	aa04      	add	r2, sp, #16
    29ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29f0:	9304      	str	r3, [sp, #16]
    29f2:	f003 ff52 	bl	689a <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    29f6:	4b23      	ldr	r3, [pc, #140]	; (2a84 <usage_fault.constprop.0+0xdc>)
    29f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29fa:	0318      	lsls	r0, r3, #12
    29fc:	d509      	bpl.n	2a12 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    29fe:	4b24      	ldr	r3, [pc, #144]	; (2a90 <usage_fault.constprop.0+0xe8>)
    2a00:	9305      	str	r3, [sp, #20]
    2a02:	481f      	ldr	r0, [pc, #124]	; (2a80 <usage_fault.constprop.0+0xd8>)
    2a04:	2302      	movs	r3, #2
    2a06:	aa04      	add	r2, sp, #16
    2a08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a0c:	9304      	str	r3, [sp, #16]
    2a0e:	f003 ff44 	bl	689a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2a12:	4b1c      	ldr	r3, [pc, #112]	; (2a84 <usage_fault.constprop.0+0xdc>)
    2a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a16:	0359      	lsls	r1, r3, #13
    2a18:	d509      	bpl.n	2a2e <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2a1a:	4b1e      	ldr	r3, [pc, #120]	; (2a94 <usage_fault.constprop.0+0xec>)
    2a1c:	9305      	str	r3, [sp, #20]
    2a1e:	4818      	ldr	r0, [pc, #96]	; (2a80 <usage_fault.constprop.0+0xd8>)
    2a20:	2302      	movs	r3, #2
    2a22:	aa04      	add	r2, sp, #16
    2a24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a28:	9304      	str	r3, [sp, #16]
    2a2a:	f003 ff36 	bl	689a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2a2e:	4b15      	ldr	r3, [pc, #84]	; (2a84 <usage_fault.constprop.0+0xdc>)
    2a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a32:	039a      	lsls	r2, r3, #14
    2a34:	d509      	bpl.n	2a4a <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2a36:	4b18      	ldr	r3, [pc, #96]	; (2a98 <usage_fault.constprop.0+0xf0>)
    2a38:	9305      	str	r3, [sp, #20]
    2a3a:	4811      	ldr	r0, [pc, #68]	; (2a80 <usage_fault.constprop.0+0xd8>)
    2a3c:	2302      	movs	r3, #2
    2a3e:	aa04      	add	r2, sp, #16
    2a40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a44:	9304      	str	r3, [sp, #16]
    2a46:	f003 ff28 	bl	689a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2a4a:	4b0e      	ldr	r3, [pc, #56]	; (2a84 <usage_fault.constprop.0+0xdc>)
    2a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a4e:	03db      	lsls	r3, r3, #15
    2a50:	d509      	bpl.n	2a66 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2a52:	4b12      	ldr	r3, [pc, #72]	; (2a9c <usage_fault.constprop.0+0xf4>)
    2a54:	9305      	str	r3, [sp, #20]
    2a56:	480a      	ldr	r0, [pc, #40]	; (2a80 <usage_fault.constprop.0+0xd8>)
    2a58:	2302      	movs	r3, #2
    2a5a:	aa04      	add	r2, sp, #16
    2a5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a60:	9304      	str	r3, [sp, #16]
    2a62:	f003 ff1a 	bl	689a <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a66:	4a07      	ldr	r2, [pc, #28]	; (2a84 <usage_fault.constprop.0+0xdc>)
    2a68:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2a6a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2a6e:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2a72:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a74:	6293      	str	r3, [r2, #40]	; 0x28
}
    2a76:	b006      	add	sp, #24
    2a78:	bd10      	pop	{r4, pc}
    2a7a:	bf00      	nop
    2a7c:	000079de 	.word	0x000079de
    2a80:	0000737c 	.word	0x0000737c
    2a84:	e000ed00 	.word	0xe000ed00
    2a88:	000079f6 	.word	0x000079f6
    2a8c:	00007a09 	.word	0x00007a09
    2a90:	00007a23 	.word	0x00007a23
    2a94:	00007a41 	.word	0x00007a41
    2a98:	00007a66 	.word	0x00007a66
    2a9c:	00007a80 	.word	0x00007a80

00002aa0 <mem_manage_fault>:
{
    2aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2aa4:	b086      	sub	sp, #24
    2aa6:	4680      	mov	r8, r0
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	460c      	mov	r4, r1
    2aac:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2aae:	4b4f      	ldr	r3, [pc, #316]	; (2bec <mem_manage_fault+0x14c>)
    2ab0:	617b      	str	r3, [r7, #20]
    2ab2:	2602      	movs	r6, #2
    2ab4:	484e      	ldr	r0, [pc, #312]	; (2bf0 <mem_manage_fault+0x150>)
    2ab6:	613e      	str	r6, [r7, #16]
    2ab8:	f107 0210 	add.w	r2, r7, #16
    2abc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ac0:	f003 feeb 	bl	689a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2ac4:	4b4b      	ldr	r3, [pc, #300]	; (2bf4 <mem_manage_fault+0x154>)
    2ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ac8:	06db      	lsls	r3, r3, #27
    2aca:	d509      	bpl.n	2ae0 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2acc:	4b4a      	ldr	r3, [pc, #296]	; (2bf8 <mem_manage_fault+0x158>)
    2ace:	4848      	ldr	r0, [pc, #288]	; (2bf0 <mem_manage_fault+0x150>)
    2ad0:	e9c7 6304 	strd	r6, r3, [r7, #16]
    2ad4:	f107 0210 	add.w	r2, r7, #16
    2ad8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2adc:	f003 fedd 	bl	689a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2ae0:	4b44      	ldr	r3, [pc, #272]	; (2bf4 <mem_manage_fault+0x154>)
    2ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ae4:	0718      	lsls	r0, r3, #28
    2ae6:	d50a      	bpl.n	2afe <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    2ae8:	4b44      	ldr	r3, [pc, #272]	; (2bfc <mem_manage_fault+0x15c>)
    2aea:	617b      	str	r3, [r7, #20]
    2aec:	2302      	movs	r3, #2
    2aee:	4840      	ldr	r0, [pc, #256]	; (2bf0 <mem_manage_fault+0x150>)
    2af0:	613b      	str	r3, [r7, #16]
    2af2:	f107 0210 	add.w	r2, r7, #16
    2af6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2afa:	f003 fece 	bl	689a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2afe:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2bf4 <mem_manage_fault+0x154>
    2b02:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2b06:	0799      	lsls	r1, r3, #30
    2b08:	d439      	bmi.n	2b7e <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
    2b0a:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2b0e:	4b39      	ldr	r3, [pc, #228]	; (2bf4 <mem_manage_fault+0x154>)
    2b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b12:	07db      	lsls	r3, r3, #31
    2b14:	d50a      	bpl.n	2b2c <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
    2b16:	4b3a      	ldr	r3, [pc, #232]	; (2c00 <mem_manage_fault+0x160>)
    2b18:	617b      	str	r3, [r7, #20]
    2b1a:	2302      	movs	r3, #2
    2b1c:	4834      	ldr	r0, [pc, #208]	; (2bf0 <mem_manage_fault+0x150>)
    2b1e:	613b      	str	r3, [r7, #16]
    2b20:	f107 0210 	add.w	r2, r7, #16
    2b24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b28:	f003 feb7 	bl	689a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2b2c:	4b31      	ldr	r3, [pc, #196]	; (2bf4 <mem_manage_fault+0x154>)
    2b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b30:	069c      	lsls	r4, r3, #26
    2b32:	d50a      	bpl.n	2b4a <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
    2b34:	4b33      	ldr	r3, [pc, #204]	; (2c04 <mem_manage_fault+0x164>)
    2b36:	617b      	str	r3, [r7, #20]
    2b38:	2302      	movs	r3, #2
    2b3a:	482d      	ldr	r0, [pc, #180]	; (2bf0 <mem_manage_fault+0x150>)
    2b3c:	613b      	str	r3, [r7, #16]
    2b3e:	f107 0210 	add.w	r2, r7, #16
    2b42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b46:	f003 fea8 	bl	689a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2b4a:	4c2a      	ldr	r4, [pc, #168]	; (2bf4 <mem_manage_fault+0x154>)
    2b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b4e:	06d8      	lsls	r0, r3, #27
    2b50:	d43e      	bmi.n	2bd0 <mem_manage_fault+0x130>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2b52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2b54:	0799      	lsls	r1, r3, #30
    2b56:	d43b      	bmi.n	2bd0 <mem_manage_fault+0x130>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2b58:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2b5c:	4a25      	ldr	r2, [pc, #148]	; (2bf4 <mem_manage_fault+0x154>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2b5e:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2b60:	bf42      	ittt	mi
    2b62:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    2b64:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    2b68:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2b6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b6c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2b70:	6293      	str	r3, [r2, #40]	; 0x28
}
    2b72:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2b74:	2300      	movs	r3, #0
    2b76:	702b      	strb	r3, [r5, #0]
}
    2b78:	46bd      	mov	sp, r7
    2b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2b7e:	46e9      	mov	r9, sp
    2b80:	4b21      	ldr	r3, [pc, #132]	; (2c08 <mem_manage_fault+0x168>)
    2b82:	617b      	str	r3, [r7, #20]
    2b84:	2302      	movs	r3, #2
    2b86:	613b      	str	r3, [r7, #16]
    2b88:	f107 0210 	add.w	r2, r7, #16
    2b8c:	4818      	ldr	r0, [pc, #96]	; (2bf0 <mem_manage_fault+0x150>)
    2b8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b92:	f003 fe82 	bl	689a <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2b96:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2b9a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2b9e:	061a      	lsls	r2, r3, #24
    2ba0:	d5b3      	bpl.n	2b0a <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2ba2:	b088      	sub	sp, #32
    2ba4:	466a      	mov	r2, sp
    2ba6:	4b19      	ldr	r3, [pc, #100]	; (2c0c <mem_manage_fault+0x16c>)
    2ba8:	4811      	ldr	r0, [pc, #68]	; (2bf0 <mem_manage_fault+0x150>)
    2baa:	e9c2 3605 	strd	r3, r6, [r2, #20]
    2bae:	2303      	movs	r3, #3
    2bb0:	f842 3f10 	str.w	r3, [r2, #16]!
    2bb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2bb8:	f003 fe6f 	bl	689a <z_log_msg_static_create.constprop.0>
    2bbc:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    2bbe:	2c00      	cmp	r4, #0
    2bc0:	d0a5      	beq.n	2b0e <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2bc2:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2bca:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2bce:	e79e      	b.n	2b0e <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2bd0:	6863      	ldr	r3, [r4, #4]
    2bd2:	051a      	lsls	r2, r3, #20
    2bd4:	d5c0      	bpl.n	2b58 <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2bd6:	4641      	mov	r1, r8
    2bd8:	4630      	mov	r0, r6
    2bda:	f7ff fdf3 	bl	27c4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2bde:	2800      	cmp	r0, #0
    2be0:	d0ba      	beq.n	2b58 <mem_manage_fault+0xb8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2be2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2be6:	2002      	movs	r0, #2
    2be8:	e7b7      	b.n	2b5a <mem_manage_fault+0xba>
    2bea:	bf00      	nop
    2bec:	00007aab 	.word	0x00007aab
    2bf0:	0000737c 	.word	0x0000737c
    2bf4:	e000ed00 	.word	0xe000ed00
    2bf8:	00007ac1 	.word	0x00007ac1
    2bfc:	0000793b 	.word	0x0000793b
    2c00:	00007b22 	.word	0x00007b22
    2c04:	000079af 	.word	0x000079af
    2c08:	00007af4 	.word	0x00007af4
    2c0c:	00007b0c 	.word	0x00007b0c

00002c10 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c14:	4b77      	ldr	r3, [pc, #476]	; (2df4 <z_arm_fault+0x1e4>)
{
    2c16:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c18:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c20:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2c24:	2600      	movs	r6, #0
    2c26:	f386 8811 	msr	BASEPRI, r6
    2c2a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c2e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2c32:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2c36:	d10e      	bne.n	2c56 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c38:	f002 030c 	and.w	r3, r2, #12
    2c3c:	2b08      	cmp	r3, #8
    2c3e:	d119      	bne.n	2c74 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2c40:	4b6d      	ldr	r3, [pc, #436]	; (2df8 <z_arm_fault+0x1e8>)
    2c42:	61fb      	str	r3, [r7, #28]
    2c44:	2302      	movs	r3, #2
    2c46:	486d      	ldr	r0, [pc, #436]	; (2dfc <z_arm_fault+0x1ec>)
    2c48:	61bb      	str	r3, [r7, #24]
    2c4a:	f107 0218 	add.w	r2, r7, #24
    2c4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c52:	f003 fe22 	bl	689a <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    2c56:	2600      	movs	r6, #0
		return NULL;
    2c58:	4635      	mov	r5, r6
	*recoverable = false;
    2c5a:	2300      	movs	r3, #0
    2c5c:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    2c5e:	1ee3      	subs	r3, r4, #3
    2c60:	2b09      	cmp	r3, #9
    2c62:	f200 80a6 	bhi.w	2db2 <z_arm_fault+0x1a2>
    2c66:	e8df f003 	tbb	[pc, r3]
    2c6a:	990a      	.short	0x990a
    2c6c:	a4a4959c 	.word	0xa4a4959c
    2c70:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2c74:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    2c76:	bf4c      	ite	mi
    2c78:	460d      	movmi	r5, r1
			*nested_exc = true;
    2c7a:	2601      	movpl	r6, #1
    2c7c:	e7ed      	b.n	2c5a <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2c7e:	46e9      	mov	r9, sp
    2c80:	4b5f      	ldr	r3, [pc, #380]	; (2e00 <z_arm_fault+0x1f0>)
    2c82:	61fb      	str	r3, [r7, #28]
    2c84:	f04f 0802 	mov.w	r8, #2
    2c88:	f107 0218 	add.w	r2, r7, #24
    2c8c:	485b      	ldr	r0, [pc, #364]	; (2dfc <z_arm_fault+0x1ec>)
    2c8e:	f8c7 8018 	str.w	r8, [r7, #24]
    2c92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c96:	f003 fe00 	bl	689a <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    2c9a:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2c9c:	4c55      	ldr	r4, [pc, #340]	; (2df4 <z_arm_fault+0x1e4>)
	*recoverable = false;
    2c9e:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2ca0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ca2:	079a      	lsls	r2, r3, #30
    2ca4:	d50b      	bpl.n	2cbe <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    2ca6:	4b57      	ldr	r3, [pc, #348]	; (2e04 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    2ca8:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    2cac:	4853      	ldr	r0, [pc, #332]	; (2dfc <z_arm_fault+0x1ec>)
    2cae:	f107 0218 	add.w	r2, r7, #24
    2cb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2cb6:	f003 fdf0 	bl	689a <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2cba:	2400      	movs	r4, #0
    2cbc:	e041      	b.n	2d42 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2cbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	da01      	bge.n	2cc8 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    2cc4:	4b50      	ldr	r3, [pc, #320]	; (2e08 <z_arm_fault+0x1f8>)
    2cc6:	e7ef      	b.n	2ca8 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2cc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2cca:	005b      	lsls	r3, r3, #1
    2ccc:	d5f5      	bpl.n	2cba <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    2cce:	4b4f      	ldr	r3, [pc, #316]	; (2e0c <z_arm_fault+0x1fc>)
    2cd0:	484a      	ldr	r0, [pc, #296]	; (2dfc <z_arm_fault+0x1ec>)
    2cd2:	e9c7 8306 	strd	r8, r3, [r7, #24]
    2cd6:	f107 0218 	add.w	r2, r7, #24
    2cda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2cde:	f003 fddc 	bl	689a <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2ce2:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2ce4:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2cea:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cf0:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2cf4:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    2cf6:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2cfe:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2d00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d04:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2d08:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2d0c:	429a      	cmp	r2, r3
    2d0e:	d008      	beq.n	2d22 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d12:	b2db      	uxtb	r3, r3
    2d14:	b38b      	cbz	r3, 2d7a <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    2d16:	1dfa      	adds	r2, r7, #7
    2d18:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2d1a:	4628      	mov	r0, r5
    2d1c:	f7ff fec0 	bl	2aa0 <mem_manage_fault>
    2d20:	e03a      	b.n	2d98 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2d22:	b088      	sub	sp, #32
    2d24:	682b      	ldr	r3, [r5, #0]
    2d26:	466a      	mov	r2, sp
    2d28:	4939      	ldr	r1, [pc, #228]	; (2e10 <z_arm_fault+0x200>)
    2d2a:	4834      	ldr	r0, [pc, #208]	; (2dfc <z_arm_fault+0x1ec>)
    2d2c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2d30:	2303      	movs	r3, #3
    2d32:	f842 3f10 	str.w	r3, [r2, #16]!
    2d36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2d3a:	f003 fdae 	bl	689a <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    2d3e:	682c      	ldr	r4, [r5, #0]
    2d40:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2d42:	79fb      	ldrb	r3, [r7, #7]
    2d44:	b9ab      	cbnz	r3, 2d72 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2d46:	2220      	movs	r2, #32
    2d48:	4629      	mov	r1, r5
    2d4a:	f107 0008 	add.w	r0, r7, #8
    2d4e:	f003 fdc1 	bl	68d4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d54:	2e00      	cmp	r6, #0
    2d56:	d047      	beq.n	2de8 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2d5c:	b922      	cbnz	r2, 2d68 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2d5e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2d62:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2d68:	f107 0108 	add.w	r1, r7, #8
    2d6c:	4620      	mov	r0, r4
    2d6e:	f7ff fbeb 	bl	2548 <z_arm_fatal_error>
}
    2d72:	372c      	adds	r7, #44	; 0x2c
    2d74:	46bd      	mov	sp, r7
    2d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2d7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d7c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2d80:	d004      	beq.n	2d8c <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    2d82:	1df9      	adds	r1, r7, #7
    2d84:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2d86:	f7ff fd77 	bl	2878 <bus_fault.constprop.0>
    2d8a:	e005      	b.n	2d98 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2d92:	d392      	bcc.n	2cba <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    2d94:	f7ff fe08 	bl	29a8 <usage_fault.constprop.0>
    2d98:	4604      	mov	r4, r0
    2d9a:	e7d2      	b.n	2d42 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    2d9c:	1dfa      	adds	r2, r7, #7
    2d9e:	2100      	movs	r1, #0
    2da0:	e7bb      	b.n	2d1a <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    2da2:	1df9      	adds	r1, r7, #7
    2da4:	2000      	movs	r0, #0
    2da6:	e7ee      	b.n	2d86 <z_arm_fault+0x176>
	PR_FAULT_INFO(
    2da8:	4b1a      	ldr	r3, [pc, #104]	; (2e14 <z_arm_fault+0x204>)
    2daa:	61fb      	str	r3, [r7, #28]
    2dac:	2302      	movs	r3, #2
    2dae:	61bb      	str	r3, [r7, #24]
    2db0:	e77c      	b.n	2cac <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    2db2:	4a19      	ldr	r2, [pc, #100]	; (2e18 <z_arm_fault+0x208>)
    2db4:	4b19      	ldr	r3, [pc, #100]	; (2e1c <z_arm_fault+0x20c>)
    2db6:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2dba:	46e8      	mov	r8, sp
    2dbc:	b08a      	sub	sp, #40	; 0x28
    2dbe:	bf18      	it	ne
    2dc0:	4613      	movne	r3, r2
    2dc2:	466a      	mov	r2, sp
    2dc4:	4916      	ldr	r1, [pc, #88]	; (2e20 <z_arm_fault+0x210>)
    2dc6:	480d      	ldr	r0, [pc, #52]	; (2dfc <z_arm_fault+0x1ec>)
    2dc8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
    2dd0:	8413      	strh	r3, [r2, #32]
    2dd2:	3c10      	subs	r4, #16
    2dd4:	4b13      	ldr	r3, [pc, #76]	; (2e24 <z_arm_fault+0x214>)
    2dd6:	61d4      	str	r4, [r2, #28]
    2dd8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    2ddc:	f842 3f10 	str.w	r3, [r2, #16]!
    2de0:	f003 fd5b 	bl	689a <z_log_msg_static_create.constprop.0>
    2de4:	46c5      	mov	sp, r8
}
    2de6:	e768      	b.n	2cba <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2de8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2dec:	f023 0301 	bic.w	r3, r3, #1
    2df0:	e7b9      	b.n	2d66 <z_arm_fault+0x156>
    2df2:	bf00      	nop
    2df4:	e000ed00 	.word	0xe000ed00
    2df8:	00007b6f 	.word	0x00007b6f
    2dfc:	0000737c 	.word	0x0000737c
    2e00:	00007b9a 	.word	0x00007b9a
    2e04:	00007bb1 	.word	0x00007bb1
    2e08:	00007bd2 	.word	0x00007bd2
    2e0c:	00007be0 	.word	0x00007be0
    2e10:	00007bff 	.word	0x00007bff
    2e14:	00007c1b 	.word	0x00007c1b
    2e18:	00007b56 	.word	0x00007b56
    2e1c:	00007b41 	.word	0x00007b41
    2e20:	00007c3f 	.word	0x00007c3f
    2e24:	01000004 	.word	0x01000004

00002e28 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2e28:	4a02      	ldr	r2, [pc, #8]	; (2e34 <z_arm_fault_init+0xc>)
    2e2a:	6953      	ldr	r3, [r2, #20]
    2e2c:	f043 0310 	orr.w	r3, r3, #16
    2e30:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2e32:	4770      	bx	lr
    2e34:	e000ed00 	.word	0xe000ed00

00002e38 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2e38:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2e3c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2e40:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2e42:	4672      	mov	r2, lr
	bl z_arm_fault
    2e44:	f7ff fee4 	bl	2c10 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2e48:	bd01      	pop	{r0, pc}
    2e4a:	bf00      	nop

00002e4c <z_arm_interrupt_init>:
    2e4c:	4804      	ldr	r0, [pc, #16]	; (2e60 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2e4e:	2300      	movs	r3, #0
    2e50:	2120      	movs	r1, #32
    2e52:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2e54:	3301      	adds	r3, #1
    2e56:	2b30      	cmp	r3, #48	; 0x30
    2e58:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2e5c:	d1f9      	bne.n	2e52 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2e5e:	4770      	bx	lr
    2e60:	e000e100 	.word	0xe000e100

00002e64 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2e64:	2000      	movs	r0, #0
    msr CONTROL, r0
    2e66:	f380 8814 	msr	CONTROL, r0
    isb
    2e6a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2e6e:	f7fe fb89 	bl	1584 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2e72:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2e74:	490d      	ldr	r1, [pc, #52]	; (2eac <__start+0x48>)
    str r0, [r1]
    2e76:	6008      	str	r0, [r1, #0]
    dsb
    2e78:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2e7c:	480c      	ldr	r0, [pc, #48]	; (2eb0 <__start+0x4c>)
    msr msp, r0
    2e7e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2e82:	f000 f82b 	bl	2edc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2e86:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2e88:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2e8c:	4809      	ldr	r0, [pc, #36]	; (2eb4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2e8e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    2e92:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2e94:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2e98:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2e9c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2e9e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2ea0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2ea4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2ea8:	f7ff fc00 	bl	26ac <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2eac:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2eb0:	20002680 	.word	0x20002680
    ldr r0, =z_interrupt_stacks
    2eb4:	200018c0 	.word	0x200018c0

00002eb8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2eb8:	4907      	ldr	r1, [pc, #28]	; (2ed8 <z_arm_clear_arm_mpu_config+0x20>)
    2eba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2ebe:	2300      	movs	r3, #0
	int num_regions =
    2ec0:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2ec4:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2ec6:	4293      	cmp	r3, r2
    2ec8:	db00      	blt.n	2ecc <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2eca:	4770      	bx	lr
  MPU->RNR = rnr;
    2ecc:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2ed0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2ed4:	3301      	adds	r3, #1
    2ed6:	e7f6      	b.n	2ec6 <z_arm_clear_arm_mpu_config+0xe>
    2ed8:	e000ed00 	.word	0xe000ed00

00002edc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2edc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2ede:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2ee0:	2300      	movs	r3, #0
    2ee2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2ee6:	f7ff ffe7 	bl	2eb8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2eea:	4b14      	ldr	r3, [pc, #80]	; (2f3c <z_arm_init_arch_hw_at_boot+0x60>)
    2eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2f00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2f04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2f08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2f0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2f10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2f14:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2f18:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2f1c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2f20:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2f24:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2f28:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2f2c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2f30:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2f32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f36:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2f3a:	bd08      	pop	{r3, pc}
    2f3c:	e000e100 	.word	0xe000e100

00002f40 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2f40:	4b08      	ldr	r3, [pc, #32]	; (2f64 <z_impl_k_thread_abort+0x24>)
    2f42:	689b      	ldr	r3, [r3, #8]
    2f44:	4283      	cmp	r3, r0
    2f46:	d10b      	bne.n	2f60 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2f48:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2f4c:	b143      	cbz	r3, 2f60 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2f4e:	4b06      	ldr	r3, [pc, #24]	; (2f68 <z_impl_k_thread_abort+0x28>)
    2f50:	685a      	ldr	r2, [r3, #4]
    2f52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2f56:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2f5e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2f60:	f002 bb92 	b.w	5688 <z_thread_abort>
    2f64:	20000f30 	.word	0x20000f30
    2f68:	e000ed00 	.word	0xe000ed00

00002f6c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2f6c:	4b02      	ldr	r3, [pc, #8]	; (2f78 <z_arm_configure_static_mpu_regions+0xc>)
    2f6e:	4a03      	ldr	r2, [pc, #12]	; (2f7c <z_arm_configure_static_mpu_regions+0x10>)
    2f70:	4803      	ldr	r0, [pc, #12]	; (2f80 <z_arm_configure_static_mpu_regions+0x14>)
    2f72:	2101      	movs	r1, #1
    2f74:	f000 b892 	b.w	309c <arm_core_mpu_configure_static_mpu_regions>
    2f78:	20040000 	.word	0x20040000
    2f7c:	20000000 	.word	0x20000000
    2f80:	0000746c 	.word	0x0000746c

00002f84 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2f84:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2f86:	4b05      	ldr	r3, [pc, #20]	; (2f9c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2f88:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    2f8a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2f8c:	4a04      	ldr	r2, [pc, #16]	; (2fa0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2f8e:	2140      	movs	r1, #64	; 0x40
    2f90:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2f94:	4618      	mov	r0, r3
    2f96:	2101      	movs	r1, #1
    2f98:	f000 b88a 	b.w	30b0 <arm_core_mpu_configure_dynamic_mpu_regions>
    2f9c:	20000d84 	.word	0x20000d84
    2fa0:	150b0000 	.word	0x150b0000

00002fa4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2fa8:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 3060 <mpu_configure_regions+0xbc>
    2fac:	469c      	mov	ip, r3
    2fae:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    2fb0:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    2fb2:	2300      	movs	r3, #0
    2fb4:	428b      	cmp	r3, r1
    2fb6:	da1a      	bge.n	2fee <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    2fb8:	6844      	ldr	r4, [r0, #4]
    2fba:	2c00      	cmp	r4, #0
    2fbc:	d04d      	beq.n	305a <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2fbe:	f1bc 0f00 	cmp.w	ip, #0
    2fc2:	d01d      	beq.n	3000 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2fc4:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2fc6:	4234      	tst	r4, r6
    2fc8:	d015      	beq.n	2ff6 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2fca:	466c      	mov	r4, sp
    2fcc:	b088      	sub	sp, #32
    2fce:	466a      	mov	r2, sp
    2fd0:	4924      	ldr	r1, [pc, #144]	; (3064 <mpu_configure_regions+0xc0>)
    2fd2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2fd6:	2303      	movs	r3, #3
    2fd8:	f842 3f10 	str.w	r3, [r2, #16]!
    2fdc:	4822      	ldr	r0, [pc, #136]	; (3068 <mpu_configure_regions+0xc4>)
    2fde:	2300      	movs	r3, #0
    2fe0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2fe4:	f7fe fd62 	bl	1aac <z_impl_z_log_msg_static_create>
			return -EINVAL;
    2fe8:	f06f 0515 	mvn.w	r5, #21
    2fec:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2fee:	4628      	mov	r0, r5
    2ff0:	46bd      	mov	sp, r7
    2ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    2ff6:	2c1f      	cmp	r4, #31
    2ff8:	d9e7      	bls.n	2fca <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    2ffa:	6802      	ldr	r2, [r0, #0]
		&&
    2ffc:	4216      	tst	r6, r2
    2ffe:	d1e4      	bne.n	2fca <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3000:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3002:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3004:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3006:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    300a:	d914      	bls.n	3036 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    300c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3010:	d813      	bhi.n	303a <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3012:	3c01      	subs	r4, #1
    3014:	fab4 f484 	clz	r4, r4
    3018:	f1c4 041f 	rsb	r4, r4, #31
    301c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    301e:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3022:	ea46 0604 	orr.w	r6, r6, r4
    3026:	d90a      	bls.n	303e <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3028:	466c      	mov	r4, sp
    302a:	b088      	sub	sp, #32
    302c:	466a      	mov	r2, sp
    302e:	4b0f      	ldr	r3, [pc, #60]	; (306c <mpu_configure_regions+0xc8>)
    3030:	e9c2 3505 	strd	r3, r5, [r2, #20]
    3034:	e7cf      	b.n	2fd6 <mpu_configure_regions+0x32>
		return REGION_32B;
    3036:	2408      	movs	r4, #8
    3038:	e7f1      	b.n	301e <mpu_configure_regions+0x7a>
		return REGION_4G;
    303a:	243e      	movs	r4, #62	; 0x3e
    303c:	e7ef      	b.n	301e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    303e:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    3042:	432a      	orrs	r2, r5
    3044:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3048:	f046 0601 	orr.w	r6, r6, #1
    304c:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3050:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    3054:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3056:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    305a:	3301      	adds	r3, #1
    305c:	300c      	adds	r0, #12
    305e:	e7a9      	b.n	2fb4 <mpu_configure_regions+0x10>
    3060:	e000ed00 	.word	0xe000ed00
    3064:	00007c56 	.word	0x00007c56
    3068:	00007374 	.word	0x00007374
    306c:	00007c79 	.word	0x00007c79

00003070 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3070:	4b04      	ldr	r3, [pc, #16]	; (3084 <arm_core_mpu_enable+0x14>)
    3072:	2205      	movs	r2, #5
    3074:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3078:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    307c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3080:	4770      	bx	lr
    3082:	bf00      	nop
    3084:	e000ed00 	.word	0xe000ed00

00003088 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3088:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    308c:	4b02      	ldr	r3, [pc, #8]	; (3098 <arm_core_mpu_disable+0x10>)
    308e:	2200      	movs	r2, #0
    3090:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3094:	4770      	bx	lr
    3096:	bf00      	nop
    3098:	e000ed00 	.word	0xe000ed00

0000309c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    309c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    309e:	4c03      	ldr	r4, [pc, #12]	; (30ac <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    30a0:	2301      	movs	r3, #1
    30a2:	7822      	ldrb	r2, [r4, #0]
    30a4:	f7ff ff7e 	bl	2fa4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    30a8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    30aa:	bd10      	pop	{r4, pc}
    30ac:	20001154 	.word	0x20001154

000030b0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    30b0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    30b2:	4a09      	ldr	r2, [pc, #36]	; (30d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    30b4:	2300      	movs	r3, #0
    30b6:	7812      	ldrb	r2, [r2, #0]
    30b8:	f7ff ff74 	bl	2fa4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    30bc:	f110 0f16 	cmn.w	r0, #22
    30c0:	d003      	beq.n	30ca <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    30c2:	4b06      	ldr	r3, [pc, #24]	; (30dc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    30c4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    30c6:	2807      	cmp	r0, #7
    30c8:	dd00      	ble.n	30cc <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    30ca:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    30cc:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    30d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    30d4:	3001      	adds	r0, #1
    30d6:	e7f6      	b.n	30c6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    30d8:	20001154 	.word	0x20001154
    30dc:	e000ed00 	.word	0xe000ed00

000030e0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    30e0:	4914      	ldr	r1, [pc, #80]	; (3134 <z_arm_mpu_init+0x54>)
    30e2:	6808      	ldr	r0, [r1, #0]
    30e4:	2808      	cmp	r0, #8
{
    30e6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    30e8:	d821      	bhi.n	312e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    30ea:	f7ff ffcd 	bl	3088 <arm_core_mpu_disable>
    30ee:	4c12      	ldr	r4, [pc, #72]	; (3138 <z_arm_mpu_init+0x58>)
    30f0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    30f2:	2200      	movs	r2, #0
    30f4:	4290      	cmp	r0, r2
    30f6:	f101 010c 	add.w	r1, r1, #12
    30fa:	d105      	bne.n	3108 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    30fc:	4b0f      	ldr	r3, [pc, #60]	; (313c <z_arm_mpu_init+0x5c>)
    30fe:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3100:	f7ff ffb6 	bl	3070 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3104:	2000      	movs	r0, #0
}
    3106:	bd10      	pop	{r4, pc}
    3108:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    310c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3110:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3114:	4313      	orrs	r3, r2
    3116:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    311a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    311e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3122:	f043 0301 	orr.w	r3, r3, #1
    3126:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    312a:	3201      	adds	r2, #1
    312c:	e7e2      	b.n	30f4 <z_arm_mpu_init+0x14>
		return -1;
    312e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3132:	e7e8      	b.n	3106 <z_arm_mpu_init+0x26>
    3134:	00007478 	.word	0x00007478
    3138:	e000ed00 	.word	0xe000ed00
    313c:	20001154 	.word	0x20001154

00003140 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3140:	4b01      	ldr	r3, [pc, #4]	; (3148 <__stdout_hook_install+0x8>)
    3142:	6018      	str	r0, [r3, #0]
}
    3144:	4770      	bx	lr
    3146:	bf00      	nop
    3148:	20000034 	.word	0x20000034

0000314c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    314c:	f04f 0220 	mov.w	r2, #32
    3150:	f3ef 8311 	mrs	r3, BASEPRI
    3154:	f382 8812 	msr	BASEPRI_MAX, r2
    3158:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    315c:	4a04      	ldr	r2, [pc, #16]	; (3170 <nordicsemi_nrf52_init+0x24>)
    315e:	2101      	movs	r1, #1
    3160:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    3164:	f383 8811 	msr	BASEPRI, r3
    3168:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    316c:	2000      	movs	r0, #0
    316e:	4770      	bx	lr
    3170:	4001e000 	.word	0x4001e000

00003174 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    3174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3178:	b2c0      	uxtb	r0, r0
    317a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    317e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3182:	4905      	ldr	r1, [pc, #20]	; (3198 <sys_arch_reboot+0x24>)
    3184:	4b05      	ldr	r3, [pc, #20]	; (319c <sys_arch_reboot+0x28>)
    3186:	68ca      	ldr	r2, [r1, #12]
    3188:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    318c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    318e:	60cb      	str	r3, [r1, #12]
    3190:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3194:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3196:	e7fd      	b.n	3194 <sys_arch_reboot+0x20>
    3198:	e000ed00 	.word	0xe000ed00
    319c:	05fa0004 	.word	0x05fa0004

000031a0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    31a0:	b120      	cbz	r0, 31ac <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    31a2:	4b03      	ldr	r3, [pc, #12]	; (31b0 <arch_busy_wait+0x10>)
    31a4:	0180      	lsls	r0, r0, #6
    31a6:	f043 0301 	orr.w	r3, r3, #1
    31aa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    31ac:	4770      	bx	lr
    31ae:	bf00      	nop
    31b0:	000073c0 	.word	0x000073c0

000031b4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    31b4:	4b08      	ldr	r3, [pc, #32]	; (31d8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    31b6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    31b8:	1ac3      	subs	r3, r0, r3
{
    31ba:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    31bc:	4907      	ldr	r1, [pc, #28]	; (31dc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    31be:	109b      	asrs	r3, r3, #2
{
    31c0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    31c2:	4359      	muls	r1, r3
    31c4:	4806      	ldr	r0, [pc, #24]	; (31e0 <onoff_stop+0x2c>)
    31c6:	2240      	movs	r2, #64	; 0x40
    31c8:	f003 fbc9 	bl	695e <stop>
	notify(mgr, res);
    31cc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    31ce:	4601      	mov	r1, r0
	notify(mgr, res);
    31d0:	4620      	mov	r0, r4
}
    31d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    31d6:	4718      	bx	r3
    31d8:	20000da4 	.word	0x20000da4
    31dc:	b6db6db7 	.word	0xb6db6db7
    31e0:	00007100 	.word	0x00007100

000031e4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    31e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    31e6:	4c0c      	ldr	r4, [pc, #48]	; (3218 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31e8:	4a0c      	ldr	r2, [pc, #48]	; (321c <onoff_start+0x38>)
    31ea:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    31ec:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31ee:	9300      	str	r3, [sp, #0]
{
    31f0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31f2:	460b      	mov	r3, r1
    31f4:	490a      	ldr	r1, [pc, #40]	; (3220 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    31f6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31f8:	4361      	muls	r1, r4
{
    31fa:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31fc:	4809      	ldr	r0, [pc, #36]	; (3224 <onoff_start+0x40>)
    31fe:	f003 fbda 	bl	69b6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3202:	1e01      	subs	r1, r0, #0
    3204:	da05      	bge.n	3212 <onoff_start+0x2e>
		notify(mgr, err);
    3206:	4630      	mov	r0, r6
    3208:	462b      	mov	r3, r5
	}
}
    320a:	b002      	add	sp, #8
    320c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    3210:	4718      	bx	r3
}
    3212:	b002      	add	sp, #8
    3214:	bd70      	pop	{r4, r5, r6, pc}
    3216:	bf00      	nop
    3218:	20000da4 	.word	0x20000da4
    321c:	00006a21 	.word	0x00006a21
    3220:	b6db6db7 	.word	0xb6db6db7
    3224:	00007100 	.word	0x00007100

00003228 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3228:	2200      	movs	r2, #0
{
    322a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    322c:	2101      	movs	r1, #1
{
    322e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3230:	4610      	mov	r0, r2
    3232:	f7ff fa1f 	bl	2674 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3236:	480f      	ldr	r0, [pc, #60]	; (3274 <clk_init+0x4c>)
    3238:	f000 ffee 	bl	4218 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    323c:	4b0e      	ldr	r3, [pc, #56]	; (3278 <clk_init+0x50>)
    323e:	4298      	cmp	r0, r3
    3240:	d115      	bne.n	326e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3242:	f003 fc8a 	bl	6b5a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    3246:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3248:	490c      	ldr	r1, [pc, #48]	; (327c <clk_init+0x54>)
    324a:	4630      	mov	r0, r6
    324c:	f002 ff5d 	bl	610a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3250:	2800      	cmp	r0, #0
    3252:	db0b      	blt.n	326c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3254:	2501      	movs	r5, #1
    3256:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    3258:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    325a:	4908      	ldr	r1, [pc, #32]	; (327c <clk_init+0x54>)
    325c:	f104 001c 	add.w	r0, r4, #28
    3260:	f002 ff53 	bl	610a <onoff_manager_init>
		if (err < 0) {
    3264:	2800      	cmp	r0, #0
    3266:	db01      	blt.n	326c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3268:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    326a:	2000      	movs	r0, #0
}
    326c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    326e:	f06f 0004 	mvn.w	r0, #4
    3272:	e7fb      	b.n	326c <clk_init+0x44>
    3274:	000032b5 	.word	0x000032b5
    3278:	0bad0000 	.word	0x0bad0000
    327c:	00007498 	.word	0x00007498

00003280 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3280:	b570      	push	{r4, r5, r6, lr}
    3282:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3284:	230c      	movs	r3, #12
    3286:	4809      	ldr	r0, [pc, #36]	; (32ac <clkstarted_handle.constprop.0+0x2c>)
    3288:	434b      	muls	r3, r1
    328a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    328c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    3290:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3292:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    3294:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3296:	4418      	add	r0, r3
    3298:	f003 fb4e 	bl	6938 <set_on_state>
	if (callback) {
    329c:	b12d      	cbz	r5, 32aa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    329e:	4632      	mov	r2, r6
    32a0:	462b      	mov	r3, r5
    32a2:	4803      	ldr	r0, [pc, #12]	; (32b0 <clkstarted_handle.constprop.0+0x30>)
}
    32a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    32a8:	4718      	bx	r3
}
    32aa:	bd70      	pop	{r4, r5, r6, pc}
    32ac:	20000da4 	.word	0x20000da4
    32b0:	00007100 	.word	0x00007100

000032b4 <clock_event_handler>:
	switch (event) {
    32b4:	b110      	cbz	r0, 32bc <clock_event_handler+0x8>
    32b6:	2801      	cmp	r0, #1
    32b8:	d004      	beq.n	32c4 <clock_event_handler+0x10>
    32ba:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    32bc:	4b03      	ldr	r3, [pc, #12]	; (32cc <clock_event_handler+0x18>)
    32be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    32c0:	075b      	lsls	r3, r3, #29
    32c2:	d101      	bne.n	32c8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    32c4:	f7ff bfdc 	b.w	3280 <clkstarted_handle.constprop.0>
}
    32c8:	4770      	bx	lr
    32ca:	bf00      	nop
    32cc:	20000da4 	.word	0x20000da4

000032d0 <generic_hfclk_start>:
{
    32d0:	b508      	push	{r3, lr}
	__asm__ volatile(
    32d2:	f04f 0320 	mov.w	r3, #32
    32d6:	f3ef 8111 	mrs	r1, BASEPRI
    32da:	f383 8812 	msr	BASEPRI_MAX, r3
    32de:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    32e2:	4a12      	ldr	r2, [pc, #72]	; (332c <generic_hfclk_start+0x5c>)
    32e4:	6813      	ldr	r3, [r2, #0]
    32e6:	f043 0002 	orr.w	r0, r3, #2
    32ea:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    32ec:	07da      	lsls	r2, r3, #31
    32ee:	d408      	bmi.n	3302 <generic_hfclk_start+0x32>
	__asm__ volatile(
    32f0:	f381 8811 	msr	BASEPRI, r1
    32f4:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    32f8:	2001      	movs	r0, #1
}
    32fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    32fe:	f003 bc36 	b.w	6b6e <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3306:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    330a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    330e:	07d3      	lsls	r3, r2, #31
    3310:	d5ee      	bpl.n	32f0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    3312:	4807      	ldr	r0, [pc, #28]	; (3330 <generic_hfclk_start+0x60>)
    3314:	f003 fb10 	bl	6938 <set_on_state>
    3318:	f381 8811 	msr	BASEPRI, r1
    331c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    3320:	2000      	movs	r0, #0
}
    3322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3326:	f7ff bfab 	b.w	3280 <clkstarted_handle.constprop.0>
    332a:	bf00      	nop
    332c:	20000df4 	.word	0x20000df4
    3330:	20000de4 	.word	0x20000de4

00003334 <api_blocking_start>:
{
    3334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3336:	2200      	movs	r2, #0
    3338:	2301      	movs	r3, #1
    333a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    333e:	4a09      	ldr	r2, [pc, #36]	; (3364 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3340:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3344:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3346:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    334a:	f003 fb62 	bl	6a12 <api_start>
	if (err < 0) {
    334e:	2800      	cmp	r0, #0
    3350:	db05      	blt.n	335e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    3352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3356:	2300      	movs	r3, #0
    3358:	4668      	mov	r0, sp
    335a:	f001 fe85 	bl	5068 <z_impl_k_sem_take>
}
    335e:	b005      	add	sp, #20
    3360:	f85d fb04 	ldr.w	pc, [sp], #4
    3364:	00006a3f 	.word	0x00006a3f

00003368 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3368:	4b09      	ldr	r3, [pc, #36]	; (3390 <generic_hfclk_stop+0x28>)
    336a:	f3bf 8f5b 	dmb	ish
    336e:	e853 2f00 	ldrex	r2, [r3]
    3372:	f022 0102 	bic.w	r1, r2, #2
    3376:	e843 1000 	strex	r0, r1, [r3]
    337a:	2800      	cmp	r0, #0
    337c:	d1f7      	bne.n	336e <generic_hfclk_stop+0x6>
    337e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3382:	07d3      	lsls	r3, r2, #31
    3384:	d402      	bmi.n	338c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3386:	2001      	movs	r0, #1
    3388:	f000 bf56 	b.w	4238 <nrfx_clock_stop>
}
    338c:	4770      	bx	lr
    338e:	bf00      	nop
    3390:	20000df4 	.word	0x20000df4

00003394 <z_nrf_clock_control_get_onoff>:
}
    3394:	4a02      	ldr	r2, [pc, #8]	; (33a0 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    3396:	b2c3      	uxtb	r3, r0
}
    3398:	201c      	movs	r0, #28
    339a:	fb03 2000 	mla	r0, r3, r0, r2
    339e:	4770      	bx	lr
    33a0:	20000da4 	.word	0x20000da4

000033a4 <z_nrf_clock_control_lf_on>:
{
    33a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    33a8:	4938      	ldr	r1, [pc, #224]	; (348c <z_nrf_clock_control_lf_on+0xe8>)
    33aa:	f3bf 8f5b 	dmb	ish
    33ae:	4607      	mov	r7, r0
    33b0:	2201      	movs	r2, #1
    33b2:	e851 3f00 	ldrex	r3, [r1]
    33b6:	e841 2000 	strex	r0, r2, [r1]
    33ba:	2800      	cmp	r0, #0
    33bc:	d1f9      	bne.n	33b2 <z_nrf_clock_control_lf_on+0xe>
    33be:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    33c2:	b933      	cbnz	r3, 33d2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    33c4:	4932      	ldr	r1, [pc, #200]	; (3490 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    33c6:	4833      	ldr	r0, [pc, #204]	; (3494 <z_nrf_clock_control_lf_on+0xf0>)
    33c8:	604b      	str	r3, [r1, #4]
    33ca:	60cb      	str	r3, [r1, #12]
    33cc:	608a      	str	r2, [r1, #8]
    33ce:	f002 feaf 	bl	6130 <onoff_request>
	switch (start_mode) {
    33d2:	1e7b      	subs	r3, r7, #1
    33d4:	2b01      	cmp	r3, #1
    33d6:	d82b      	bhi.n	3430 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    33d8:	2f01      	cmp	r7, #1
    33da:	d107      	bne.n	33ec <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    33dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33e0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    33e4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    33e8:	2b01      	cmp	r3, #1
    33ea:	d021      	beq.n	3430 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    33ec:	f003 fce4 	bl	6db8 <k_is_in_isr>
    33f0:	4605      	mov	r5, r0
    33f2:	b9f8      	cbnz	r0, 3434 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    33f4:	4b28      	ldr	r3, [pc, #160]	; (3498 <z_nrf_clock_control_lf_on+0xf4>)
    33f6:	781b      	ldrb	r3, [r3, #0]
    33f8:	b1e3      	cbz	r3, 3434 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    33fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33fe:	2202      	movs	r2, #2
    3400:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3404:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3406:	f8df 8094 	ldr.w	r8, [pc, #148]	; 349c <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    340a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    340e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3412:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    3416:	03d2      	lsls	r2, r2, #15
    3418:	d516      	bpl.n	3448 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    341a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    341e:	2b01      	cmp	r3, #1
    3420:	d001      	beq.n	3426 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3422:	2f01      	cmp	r7, #1
    3424:	d110      	bne.n	3448 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    3426:	b35d      	cbz	r5, 3480 <z_nrf_clock_control_lf_on+0xdc>
    3428:	f386 8811 	msr	BASEPRI, r6
    342c:	f3bf 8f6f 	isb	sy
}
    3430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    3434:	f04f 0320 	mov.w	r3, #32
    3438:	f3ef 8611 	mrs	r6, BASEPRI
    343c:	f383 8812 	msr	BASEPRI_MAX, r3
    3440:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3444:	2501      	movs	r5, #1
    3446:	e7de      	b.n	3406 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3448:	b1ad      	cbz	r5, 3476 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    344a:	4630      	mov	r0, r6
    344c:	f7ff f872 	bl	2534 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3450:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3454:	2b00      	cmp	r3, #0
    3456:	d1da      	bne.n	340e <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3458:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    345c:	2a00      	cmp	r2, #0
    345e:	d0d6      	beq.n	340e <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3460:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3464:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3468:	2301      	movs	r3, #1
    346a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    346e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3472:	60a3      	str	r3, [r4, #8]
}
    3474:	e7cb      	b.n	340e <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    3476:	2100      	movs	r1, #0
    3478:	2021      	movs	r0, #33	; 0x21
    347a:	f002 f8e5 	bl	5648 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    347e:	e7e7      	b.n	3450 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    3480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3484:	2202      	movs	r2, #2
    3486:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    348a:	e7d1      	b.n	3430 <z_nrf_clock_control_lf_on+0x8c>
    348c:	20000da0 	.word	0x20000da0
    3490:	20000d90 	.word	0x20000d90
    3494:	20000dc0 	.word	0x20000dc0
    3498:	20001576 	.word	0x20001576
    349c:	e000e100 	.word	0xe000e100

000034a0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    34a0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    34a2:	4c04      	ldr	r4, [pc, #16]	; (34b4 <rtt_console_init+0x14>)
    34a4:	4620      	mov	r0, r4
    34a6:	f7fd fb7d 	bl	ba4 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    34aa:	4620      	mov	r0, r4
    34ac:	f7ff fe48 	bl	3140 <__stdout_hook_install>

	return 0;
}
    34b0:	2000      	movs	r0, #0
    34b2:	bd10      	pop	{r4, pc}
    34b4:	000034b9 	.word	0x000034b9

000034b8 <rtt_console_out>:
{
    34b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    34ba:	4e13      	ldr	r6, [pc, #76]	; (3508 <rtt_console_out+0x50>)
	char c = (char)character;
    34bc:	f88d 0007 	strb.w	r0, [sp, #7]
{
    34c0:	4604      	mov	r4, r0
	char c = (char)character;
    34c2:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    34c4:	f001 f9c6 	bl	4854 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    34c8:	2201      	movs	r2, #1
    34ca:	f10d 0107 	add.w	r1, sp, #7
    34ce:	2000      	movs	r0, #0
    34d0:	f001 f98a 	bl	47e8 <SEGGER_RTT_WriteNoLock>
    34d4:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    34d6:	f001 f9c7 	bl	4868 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    34da:	b127      	cbz	r7, 34e6 <rtt_console_out+0x2e>
			host_present = true;
    34dc:	2301      	movs	r3, #1
    34de:	7033      	strb	r3, [r6, #0]
}
    34e0:	4620      	mov	r0, r4
    34e2:	b003      	add	sp, #12
    34e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    34e6:	7833      	ldrb	r3, [r6, #0]
    34e8:	2b00      	cmp	r3, #0
    34ea:	d0f9      	beq.n	34e0 <rtt_console_out+0x28>
			if (max_cnt) {
    34ec:	3d01      	subs	r5, #1
    34ee:	d008      	beq.n	3502 <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    34f0:	f003 fc62 	bl	6db8 <k_is_in_isr>
    34f4:	2800      	cmp	r0, #0
    34f6:	d1e5      	bne.n	34c4 <rtt_console_out+0xc>
    34f8:	2100      	movs	r1, #0
    34fa:	2042      	movs	r0, #66	; 0x42
    34fc:	f002 f8a4 	bl	5648 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    3500:	e7e0      	b.n	34c4 <rtt_console_out+0xc>
				host_present = false;
    3502:	7035      	strb	r5, [r6, #0]
    3504:	e7ec      	b.n	34e0 <rtt_console_out+0x28>
    3506:	bf00      	nop
    3508:	20001155 	.word	0x20001155

0000350c <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    350c:	4b01      	ldr	r3, [pc, #4]	; (3514 <hfclk_on_callback+0x8>)
    350e:	2201      	movs	r2, #1
    3510:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    3512:	4770      	bx	lr
    3514:	4000c000 	.word	0x4000c000

00003518 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    3518:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    351a:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    351c:	d10b      	bne.n	3536 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3520:	4906      	ldr	r1, [pc, #24]	; (353c <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    3522:	4807      	ldr	r0, [pc, #28]	; (3540 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    3524:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    3526:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    352a:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    352e:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    3530:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    3532:	2000      	movs	r0, #0
    3534:	4770      	bx	lr
		return -ENOTSUP;
    3536:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    353a:	4770      	bx	lr
    353c:	0003d090 	.word	0x0003d090
    3540:	000f4240 	.word	0x000f4240

00003544 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3544:	4b04      	ldr	r3, [pc, #16]	; (3558 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    3546:	6900      	ldr	r0, [r0, #16]
    3548:	2200      	movs	r2, #0
    354a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    354e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    3552:	f001 bd69 	b.w	5028 <z_impl_k_sem_give>
    3556:	bf00      	nop
    3558:	4000c000 	.word	0x4000c000

0000355c <temp_nrf5_sample_fetch>:
{
    355c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    355e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    3560:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3562:	b363      	cbz	r3, 35be <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    3564:	2939      	cmp	r1, #57	; 0x39
    3566:	d001      	beq.n	356c <temp_nrf5_sample_fetch+0x10>
    3568:	290c      	cmp	r1, #12
    356a:	d12b      	bne.n	35c4 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    356c:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    3570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3578:	4630      	mov	r0, r6
    357a:	f001 fc9f 	bl	4ebc <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    357e:	4b13      	ldr	r3, [pc, #76]	; (35cc <temp_nrf5_sample_fetch+0x70>)
    3580:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    3582:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    3584:	2303      	movs	r3, #3
    3586:	2400      	movs	r4, #0
    3588:	4669      	mov	r1, sp
    358a:	9403      	str	r4, [sp, #12]
    358c:	9302      	str	r3, [sp, #8]
    358e:	f002 fdcf 	bl	6130 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    3592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    359a:	4628      	mov	r0, r5
    359c:	f001 fd64 	bl	5068 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    35a0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    35a2:	f002 fe1d 	bl	61e0 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    35a6:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <temp_nrf5_sample_fetch+0x74>)
    35a8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    35ac:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    35ae:	2201      	movs	r2, #1
    35b0:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    35b2:	4630      	mov	r0, r6
    35b4:	f001 fcfc 	bl	4fb0 <z_impl_k_mutex_unlock>
	return 0;
    35b8:	4620      	mov	r0, r4
}
    35ba:	b004      	add	sp, #16
    35bc:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    35be:	f06f 000a 	mvn.w	r0, #10
    35c2:	e7fa      	b.n	35ba <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    35c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    35c8:	e7f7      	b.n	35ba <temp_nrf5_sample_fetch+0x5e>
    35ca:	bf00      	nop
    35cc:	0000350d 	.word	0x0000350d
    35d0:	4000c000 	.word	0x4000c000

000035d4 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    35d4:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    35d6:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    35d8:	2000      	movs	r0, #0
    35da:	f7ff fedb 	bl	3394 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    35de:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    35e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    35e4:	2100      	movs	r1, #0
    35e6:	4620      	mov	r0, r4
    35e8:	f003 fc07 	bl	6dfa <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    35ec:	f104 0010 	add.w	r0, r4, #16
    35f0:	f003 fbfc 	bl	6dec <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    35f4:	2200      	movs	r2, #0
    35f6:	2101      	movs	r1, #1
    35f8:	200c      	movs	r0, #12
    35fa:	f7ff f83b 	bl	2674 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    35fe:	200c      	movs	r0, #12
    3600:	f7ff f808 	bl	2614 <arch_irq_enable>
    p_reg->INTENSET = mask;
    3604:	4b02      	ldr	r3, [pc, #8]	; (3610 <temp_nrf5_init+0x3c>)
    3606:	2201      	movs	r2, #1
    3608:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    360c:	2000      	movs	r0, #0
    360e:	bd10      	pop	{r4, pc}
    3610:	4000c000 	.word	0x4000c000

00003614 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
    3614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (err < 0) {
		return err;
	}
#endif

	dev_config->irq_connect();
    3618:	6843      	ldr	r3, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    361a:	6906      	ldr	r6, [r0, #16]
	dev_config->irq_connect();
    361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
    361e:	af00      	add	r7, sp, #0
	dev_config->irq_connect();
    3620:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    3622:	68b4      	ldr	r4, [r6, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3624:	2501      	movs	r5, #1
    3626:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
    362a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    362e:	429c      	cmp	r4, r3
    3630:	d304      	bcc.n	363c <spi_nrfx_init+0x28>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    3632:	4630      	mov	r0, r6
    3634:	f003 fa5c 	bl	6af0 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    3638:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
    363a:	e01b      	b.n	3674 <spi_nrfx_init+0x60>
		if (!device_is_ready(cs_gpio->port)) {
    363c:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    363e:	f003 fb5f 	bl	6d00 <z_device_is_ready>
    3642:	b9d0      	cbnz	r0, 367a <spi_nrfx_init+0x66>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    3644:	6823      	ldr	r3, [r4, #0]
    3646:	6819      	ldr	r1, [r3, #0]
    3648:	7923      	ldrb	r3, [r4, #4]
    364a:	466c      	mov	r4, sp
    364c:	b08a      	sub	sp, #40	; 0x28
    364e:	466a      	mov	r2, sp
    3650:	481b      	ldr	r0, [pc, #108]	; (36c0 <spi_nrfx_init+0xac>)
    3652:	61d3      	str	r3, [r2, #28]
    3654:	f44f 7300 	mov.w	r3, #512	; 0x200
    3658:	8413      	strh	r3, [r2, #32]
    365a:	4b1a      	ldr	r3, [pc, #104]	; (36c4 <spi_nrfx_init+0xb0>)
    365c:	e9c2 0105 	strd	r0, r1, [r2, #20]
    3660:	4819      	ldr	r0, [pc, #100]	; (36c8 <spi_nrfx_init+0xb4>)
    3662:	f842 3f10 	str.w	r3, [r2, #16]!
    3666:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    366a:	f003 fa08 	bl	6a7e <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    366e:	f06f 0012 	mvn.w	r0, #18
    3672:	46a5      	mov	sp, r4
#endif
}
    3674:	46bd      	mov	sp, r7
    3676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    367a:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    367c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    367e:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    3680:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    3684:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3688:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    368c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    368e:	bf54      	ite	pl
    3690:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    3694:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    3698:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    369c:	fa05 f801 	lsl.w	r8, r5, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    36a0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    36a2:	bf4c      	ite	mi
    36a4:	ea48 030c 	orrmi.w	r3, r8, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    36a8:	ea2c 0308 	bicpl.w	r3, ip, r8
    36ac:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    36b0:	f8d9 3000 	ldr.w	r3, [r9]
    36b4:	4798      	blx	r3
		if (ret < 0) {
    36b6:	2800      	cmp	r0, #0
    36b8:	dbdc      	blt.n	3674 <spi_nrfx_init+0x60>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    36ba:	3408      	adds	r4, #8
    36bc:	e7b3      	b.n	3626 <spi_nrfx_init+0x12>
    36be:	bf00      	nop
    36c0:	00007cf3 	.word	0x00007cf3
    36c4:	01000004 	.word	0x01000004
    36c8:	00007394 	.word	0x00007394

000036cc <transfer_next_chunk>:
{
    36cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    36ce:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    36d0:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    36d2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
		return ctx->rx_len;
    36d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
    36d6:	b98d      	cbnz	r5, 36fc <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
    36d8:	2b00      	cmp	r3, #0
    36da:	d137      	bne.n	374c <transfer_next_chunk+0x80>
	int error = 0;
    36dc:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
    36de:	2200      	movs	r2, #0
    36e0:	4611      	mov	r1, r2
    36e2:	4620      	mov	r0, r4
    36e4:	f003 f9e2 	bl	6aac <_spi_context_cs_control>
	ctx->sync_status = status;
    36e8:	6325      	str	r5, [r4, #48]	; 0x30
	z_impl_k_sem_give(sem);
    36ea:	f104 0020 	add.w	r0, r4, #32
    36ee:	f001 fc9b 	bl	5028 <z_impl_k_sem_give>
	dev_data->busy = false;
    36f2:	2300      	movs	r3, #0
    36f4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    36f8:	b004      	add	sp, #16
    36fa:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
    36fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
	} else if (!ctx->rx_len) {
    36fe:	bb0b      	cbnz	r3, 3744 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
    3700:	bb39      	cbnz	r1, 3752 <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
    3702:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3706:	42aa      	cmp	r2, r5
    3708:	6c63      	ldr	r3, [r4, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    370a:	9100      	str	r1, [sp, #0]
		if (chunk_len > MAX_CHUNK_LEN) {
    370c:	bf28      	it	cs
    370e:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
    3710:	65a2      	str	r2, [r4, #88]	; 0x58
    3712:	b11b      	cbz	r3, 371c <transfer_next_chunk+0x50>
    3714:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    3716:	2b00      	cmp	r3, #0
    3718:	bf18      	it	ne
    371a:	4613      	movne	r3, r2
    371c:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    371e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3720:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    3722:	b11b      	cbz	r3, 372c <transfer_next_chunk+0x60>
    3724:	6d23      	ldr	r3, [r4, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3726:	2b00      	cmp	r3, #0
    3728:	bf18      	it	ne
    372a:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    372c:	2200      	movs	r2, #0
    372e:	4669      	mov	r1, sp
    3730:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3732:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    3734:	f000 ff42 	bl	45bc <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    3738:	4b0d      	ldr	r3, [pc, #52]	; (3770 <transfer_next_chunk+0xa4>)
    373a:	4298      	cmp	r0, r3
    373c:	d0dc      	beq.n	36f8 <transfer_next_chunk+0x2c>
			error = -EIO;
    373e:	f06f 0504 	mvn.w	r5, #4
    3742:	e7cc      	b.n	36de <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    3744:	429d      	cmp	r5, r3
    3746:	bf28      	it	cs
    3748:	461d      	movcs	r5, r3
    374a:	e7d9      	b.n	3700 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
    374c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    374e:	461d      	mov	r5, r3
    3750:	e7d7      	b.n	3702 <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3752:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    3756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    375a:	d0d2      	beq.n	3702 <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    375c:	2d08      	cmp	r5, #8
    375e:	bf28      	it	cs
    3760:	2508      	movcs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    3762:	6e20      	ldr	r0, [r4, #96]	; 0x60
    3764:	462a      	mov	r2, r5
    3766:	f003 f8b5 	bl	68d4 <memcpy>
			tx_buf = dev_data->buffer;
    376a:	6e21      	ldr	r1, [r4, #96]	; 0x60
    376c:	e7c9      	b.n	3702 <transfer_next_chunk+0x36>
    376e:	bf00      	nop
    3770:	0bad0000 	.word	0x0bad0000

00003774 <event_handler>:
{
    3774:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    3776:	7803      	ldrb	r3, [r0, #0]
{
    3778:	b086      	sub	sp, #24
    377a:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    377c:	2b00      	cmp	r3, #0
    377e:	d154      	bne.n	382a <event_handler+0xb6>
	if (!ctx->tx_len) {
    3780:	6c8b      	ldr	r3, [r1, #72]	; 0x48
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    3782:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    3784:	b15b      	cbz	r3, 379e <event_handler+0x2a>
	if (len > ctx->tx_len) {
    3786:	429a      	cmp	r2, r3
    3788:	d91e      	bls.n	37c8 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
    378a:	4b29      	ldr	r3, [pc, #164]	; (3830 <event_handler+0xbc>)
    378c:	9305      	str	r3, [sp, #20]
    378e:	4829      	ldr	r0, [pc, #164]	; (3834 <event_handler+0xc0>)
    3790:	2302      	movs	r3, #2
    3792:	aa04      	add	r2, sp, #16
    3794:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3798:	9304      	str	r3, [sp, #16]
    379a:	f003 f970 	bl	6a7e <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    379e:	6d23      	ldr	r3, [r4, #80]	; 0x50
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    37a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
    37a2:	b15b      	cbz	r3, 37bc <event_handler+0x48>
	if (len > ctx->rx_len) {
    37a4:	429a      	cmp	r2, r3
    37a6:	d927      	bls.n	37f8 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
    37a8:	4b21      	ldr	r3, [pc, #132]	; (3830 <event_handler+0xbc>)
    37aa:	9305      	str	r3, [sp, #20]
    37ac:	4821      	ldr	r0, [pc, #132]	; (3834 <event_handler+0xc0>)
    37ae:	2302      	movs	r3, #2
    37b0:	aa04      	add	r2, sp, #16
    37b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    37b6:	9304      	str	r3, [sp, #16]
    37b8:	f003 f961 	bl	6a7e <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    37bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    37be:	b006      	add	sp, #24
    37c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    37c4:	f7ff bf82 	b.w	36cc <transfer_next_chunk>
	ctx->tx_len -= len;
    37c8:	1a9b      	subs	r3, r3, r2
    37ca:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    37cc:	b973      	cbnz	r3, 37ec <event_handler+0x78>
		++ctx->current_tx;
    37ce:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    37d0:	3308      	adds	r3, #8
    37d2:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    37d4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    37d6:	3b01      	subs	r3, #1
    37d8:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    37da:	f101 0248 	add.w	r2, r1, #72	; 0x48
    37de:	f104 0034 	add.w	r0, r4, #52	; 0x34
    37e2:	3138      	adds	r1, #56	; 0x38
    37e4:	f003 f938 	bl	6a58 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    37e8:	6460      	str	r0, [r4, #68]	; 0x44
    37ea:	e7d8      	b.n	379e <event_handler+0x2a>
	} else if (ctx->tx_buf) {
    37ec:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    37ee:	2b00      	cmp	r3, #0
    37f0:	d0d5      	beq.n	379e <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    37f2:	4413      	add	r3, r2
    37f4:	644b      	str	r3, [r1, #68]	; 0x44
    37f6:	e7d2      	b.n	379e <event_handler+0x2a>
	ctx->rx_len -= len;
    37f8:	1a9b      	subs	r3, r3, r2
    37fa:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    37fc:	b97b      	cbnz	r3, 381e <event_handler+0xaa>
		++ctx->current_rx;
    37fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3800:	3308      	adds	r3, #8
    3802:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    3804:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3806:	3b01      	subs	r3, #1
    3808:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    380a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    380e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3812:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3816:	f003 f91f 	bl	6a58 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    381a:	64e0      	str	r0, [r4, #76]	; 0x4c
    381c:	e7ce      	b.n	37bc <event_handler+0x48>
	} else if (ctx->rx_buf) {
    381e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3820:	2b00      	cmp	r3, #0
    3822:	d0cb      	beq.n	37bc <event_handler+0x48>
		ctx->rx_buf += dfs * len;
    3824:	4413      	add	r3, r2
    3826:	64e3      	str	r3, [r4, #76]	; 0x4c
    3828:	e7c8      	b.n	37bc <event_handler+0x48>
}
    382a:	b006      	add	sp, #24
    382c:	bd10      	pop	{r4, pc}
    382e:	bf00      	nop
    3830:	00007d17 	.word	0x00007d17
    3834:	00007394 	.word	0x00007394

00003838 <spi_nrfx_transceive>:
{
    3838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    383c:	b08b      	sub	sp, #44	; 0x2c
    383e:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3840:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3842:	6904      	ldr	r4, [r0, #16]
{
    3844:	af00      	add	r7, sp, #0
    3846:	049b      	lsls	r3, r3, #18
    3848:	4680      	mov	r8, r0
    384a:	460e      	mov	r6, r1
    384c:	60ba      	str	r2, [r7, #8]
    384e:	d439      	bmi.n	38c4 <spi_nrfx_transceive+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    3850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3858:	f104 0010 	add.w	r0, r4, #16
    385c:	f001 fc04 	bl	5068 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    3860:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    3862:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3866:	f8d8 9010 	ldr.w	r9, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    386a:	60fb      	str	r3, [r7, #12]
	uint32_t max_freq = dev_config->max_freq;
    386c:	689b      	ldr	r3, [r3, #8]
    386e:	603b      	str	r3, [r7, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    3870:	f899 305d 	ldrb.w	r3, [r9, #93]	; 0x5d
    3874:	607b      	str	r3, [r7, #4]
    3876:	b123      	cbz	r3, 3882 <spi_nrfx_transceive+0x4a>
    3878:	f8d9 3000 	ldr.w	r3, [r9]
    387c:	429e      	cmp	r6, r3
    387e:	f000 80dc 	beq.w	3a3a <spi_nrfx_transceive+0x202>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    3882:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    3886:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    388a:	d022      	beq.n	38d2 <spi_nrfx_transceive+0x9a>
		LOG_ERR("Half-duplex not supported");
    388c:	4ba1      	ldr	r3, [pc, #644]	; (3b14 <spi_nrfx_transceive+0x2dc>)
    388e:	627b      	str	r3, [r7, #36]	; 0x24
    3890:	2302      	movs	r3, #2
    3892:	48a1      	ldr	r0, [pc, #644]	; (3b18 <spi_nrfx_transceive+0x2e0>)
    3894:	623b      	str	r3, [r7, #32]
    3896:	f107 0220 	add.w	r2, r7, #32
    389a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    389e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    38a2:	f003 f8ec 	bl	6a7e <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    38a6:	6823      	ldr	r3, [r4, #0]
    38a8:	889b      	ldrh	r3, [r3, #4]
    38aa:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    38ae:	d104      	bne.n	38ba <spi_nrfx_transceive+0x82>
		ctx->owner = NULL;
    38b0:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    38b2:	f104 0010 	add.w	r0, r4, #16
    38b6:	f001 fbb7 	bl	5028 <z_impl_k_sem_give>
}
    38ba:	4628      	mov	r0, r5
    38bc:	372c      	adds	r7, #44	; 0x2c
    38be:	46bd      	mov	sp, r7
    38c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    38c4:	69a3      	ldr	r3, [r4, #24]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d1c2      	bne.n	3850 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    38ca:	6863      	ldr	r3, [r4, #4]
    38cc:	4299      	cmp	r1, r3
    38ce:	d1bf      	bne.n	3850 <spi_nrfx_transceive+0x18>
    38d0:	e7c7      	b.n	3862 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    38d2:	f01c 0f01 	tst.w	ip, #1
    38d6:	d016      	beq.n	3906 <spi_nrfx_transceive+0xce>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    38d8:	466d      	mov	r5, sp
    38da:	b088      	sub	sp, #32
    38dc:	f8d8 3000 	ldr.w	r3, [r8]
    38e0:	466a      	mov	r2, sp
    38e2:	498e      	ldr	r1, [pc, #568]	; (3b1c <spi_nrfx_transceive+0x2e4>)
    38e4:	488c      	ldr	r0, [pc, #560]	; (3b18 <spi_nrfx_transceive+0x2e0>)
    38e6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    38ea:	f44f 7300 	mov.w	r3, #512	; 0x200
    38ee:	8393      	strh	r3, [r2, #28]
    38f0:	4b8b      	ldr	r3, [pc, #556]	; (3b20 <spi_nrfx_transceive+0x2e8>)
    38f2:	f842 3f10 	str.w	r3, [r2, #16]!
    38f6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    38fa:	f003 f8c0 	bl	6a7e <z_log_msg_static_create.constprop.0>
    38fe:	46ad      	mov	sp, r5
		return -EINVAL;
    3900:	f06f 0515 	mvn.w	r5, #21
    3904:	e7cf      	b.n	38a6 <spi_nrfx_transceive+0x6e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    3906:	f01c 0f08 	tst.w	ip, #8
    390a:	d00b      	beq.n	3924 <spi_nrfx_transceive+0xec>
		LOG_ERR("Loopback mode is not supported");
    390c:	4b85      	ldr	r3, [pc, #532]	; (3b24 <spi_nrfx_transceive+0x2ec>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    390e:	627b      	str	r3, [r7, #36]	; 0x24
    3910:	2302      	movs	r3, #2
    3912:	4881      	ldr	r0, [pc, #516]	; (3b18 <spi_nrfx_transceive+0x2e0>)
    3914:	623b      	str	r3, [r7, #32]
    3916:	f107 0220 	add.w	r2, r7, #32
    391a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    391e:	f003 f8ae 	bl	6a7e <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    3922:	e7ed      	b.n	3900 <spi_nrfx_transceive+0xc8>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    3924:	f3cc 1345 	ubfx	r3, ip, #5, #6
    3928:	2b08      	cmp	r3, #8
    392a:	d001      	beq.n	3930 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    392c:	4b7e      	ldr	r3, [pc, #504]	; (3b28 <spi_nrfx_transceive+0x2f0>)
    392e:	e7ee      	b.n	390e <spi_nrfx_transceive+0xd6>
	if (spi_cfg->frequency < 125000) {
    3930:	6835      	ldr	r5, [r6, #0]
    3932:	4b7e      	ldr	r3, [pc, #504]	; (3b2c <spi_nrfx_transceive+0x2f4>)
    3934:	429d      	cmp	r5, r3
    3936:	d801      	bhi.n	393c <spi_nrfx_transceive+0x104>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    3938:	4b7d      	ldr	r3, [pc, #500]	; (3b30 <spi_nrfx_transceive+0x2f8>)
    393a:	e7e8      	b.n	390e <spi_nrfx_transceive+0xd6>
	config = dev_config->def_config;
    393c:	68fb      	ldr	r3, [r7, #12]
    393e:	f103 0b0c 	add.w	fp, r3, #12
    3942:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    3946:	f107 0e10 	add.w	lr, r7, #16
    394a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    394e:	683b      	ldr	r3, [r7, #0]
    3950:	42ab      	cmp	r3, r5
    3952:	bf28      	it	cs
    3954:	462b      	movcs	r3, r5
    3956:	461d      	mov	r5, r3
	config = dev_config->def_config;
    3958:	e89b 0003 	ldmia.w	fp, {r0, r1}
	if (frequency < 250000) {
    395c:	4b75      	ldr	r3, [pc, #468]	; (3b34 <spi_nrfx_transceive+0x2fc>)
    395e:	429d      	cmp	r5, r3
	config = dev_config->def_config;
    3960:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
    3964:	d94b      	bls.n	39fe <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 500000) {
    3966:	4b74      	ldr	r3, [pc, #464]	; (3b38 <spi_nrfx_transceive+0x300>)
    3968:	429d      	cmp	r5, r3
    396a:	d94b      	bls.n	3a04 <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 1000000) {
    396c:	4b73      	ldr	r3, [pc, #460]	; (3b3c <spi_nrfx_transceive+0x304>)
    396e:	429d      	cmp	r5, r3
    3970:	d94b      	bls.n	3a0a <spi_nrfx_transceive+0x1d2>
	} else if (frequency < 2000000) {
    3972:	4b73      	ldr	r3, [pc, #460]	; (3b40 <spi_nrfx_transceive+0x308>)
    3974:	429d      	cmp	r5, r3
    3976:	d94b      	bls.n	3a10 <spi_nrfx_transceive+0x1d8>
	} else if (frequency < 4000000) {
    3978:	4b72      	ldr	r3, [pc, #456]	; (3b44 <spi_nrfx_transceive+0x30c>)
    397a:	429d      	cmp	r5, r3
    397c:	d94b      	bls.n	3a16 <spi_nrfx_transceive+0x1de>
	} else if (frequency < 8000000) {
    397e:	4b72      	ldr	r3, [pc, #456]	; (3b48 <spi_nrfx_transceive+0x310>)
    3980:	429d      	cmp	r5, r3
    3982:	d34b      	bcc.n	3a1c <spi_nrfx_transceive+0x1e4>
	} else if (frequency < 16000000) {
    3984:	4b71      	ldr	r3, [pc, #452]	; (3b4c <spi_nrfx_transceive+0x314>)
    3986:	429d      	cmp	r5, r3
    3988:	d34b      	bcc.n	3a22 <spi_nrfx_transceive+0x1ea>
		return NRF_SPIM_FREQ_16M;
    398a:	4b71      	ldr	r3, [pc, #452]	; (3b50 <spi_nrfx_transceive+0x318>)
    398c:	429d      	cmp	r5, r3
    398e:	bf2c      	ite	cs
    3990:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
    3994:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3998:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    399c:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    399e:	f00c 0304 	and.w	r3, ip, #4
    39a2:	d041      	beq.n	3a28 <spi_nrfx_transceive+0x1f0>
			return NRF_SPIM_MODE_2;
    39a4:	2b00      	cmp	r3, #0
    39a6:	bf14      	ite	ne
    39a8:	2303      	movne	r3, #3
    39aa:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    39ac:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    39ae:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    39b0:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    39b4:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    39b8:	b12b      	cbz	r3, 39c6 <spi_nrfx_transceive+0x18e>
		nrfx_spim_uninit(&dev_config->spim);
    39ba:	68f8      	ldr	r0, [r7, #12]
    39bc:	f000 fdb6 	bl	452c <nrfx_spim_uninit>
		dev_data->initialized = false;
    39c0:	2300      	movs	r3, #0
    39c2:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    39c6:	464b      	mov	r3, r9
    39c8:	4a62      	ldr	r2, [pc, #392]	; (3b54 <spi_nrfx_transceive+0x31c>)
    39ca:	68f8      	ldr	r0, [r7, #12]
    39cc:	f107 0110 	add.w	r1, r7, #16
    39d0:	f000 fcb0 	bl	4334 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    39d4:	4b60      	ldr	r3, [pc, #384]	; (3b58 <spi_nrfx_transceive+0x320>)
    39d6:	4298      	cmp	r0, r3
    39d8:	d02a      	beq.n	3a30 <spi_nrfx_transceive+0x1f8>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    39da:	466d      	mov	r5, sp
    39dc:	b088      	sub	sp, #32
    39de:	466a      	mov	r2, sp
    39e0:	4b5e      	ldr	r3, [pc, #376]	; (3b5c <spi_nrfx_transceive+0x324>)
    39e2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    39e6:	2303      	movs	r3, #3
    39e8:	f842 3f10 	str.w	r3, [r2, #16]!
    39ec:	484a      	ldr	r0, [pc, #296]	; (3b18 <spi_nrfx_transceive+0x2e0>)
    39ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    39f2:	f003 f844 	bl	6a7e <z_log_msg_static_create.constprop.0>
    39f6:	46ad      	mov	sp, r5
		return -EIO;
    39f8:	f06f 0504 	mvn.w	r5, #4
    39fc:	e753      	b.n	38a6 <spi_nrfx_transceive+0x6e>
		return NRF_SPIM_FREQ_125K;
    39fe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    3a02:	e7c9      	b.n	3998 <spi_nrfx_transceive+0x160>
		return NRF_SPIM_FREQ_250K;
    3a04:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    3a08:	e7c6      	b.n	3998 <spi_nrfx_transceive+0x160>
		return NRF_SPIM_FREQ_500K;
    3a0a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    3a0e:	e7c3      	b.n	3998 <spi_nrfx_transceive+0x160>
		return NRF_SPIM_FREQ_1M;
    3a10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3a14:	e7c0      	b.n	3998 <spi_nrfx_transceive+0x160>
		return NRF_SPIM_FREQ_2M;
    3a16:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    3a1a:	e7bd      	b.n	3998 <spi_nrfx_transceive+0x160>
		return NRF_SPIM_FREQ_4M;
    3a1c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3a20:	e7ba      	b.n	3998 <spi_nrfx_transceive+0x160>
		return NRF_SPIM_FREQ_8M;
    3a22:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    3a26:	e7b7      	b.n	3998 <spi_nrfx_transceive+0x160>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    3a28:	3b00      	subs	r3, #0
    3a2a:	bf18      	it	ne
    3a2c:	2301      	movne	r3, #1
    3a2e:	e7bd      	b.n	39ac <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
    3a30:	2301      	movs	r3, #1
    3a32:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	ctx->config = spi_cfg;
    3a36:	f8c9 6000 	str.w	r6, [r9]
		dev_data->busy = true;
    3a3a:	2301      	movs	r3, #1
    3a3c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3a40:	68bb      	ldr	r3, [r7, #8]
    3a42:	2b00      	cmp	r3, #0
    3a44:	d154      	bne.n	3af0 <spi_nrfx_transceive+0x2b8>
    3a46:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3a48:	2300      	movs	r3, #0
    3a4a:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    3a4c:	f104 0248 	add.w	r2, r4, #72	; 0x48
    3a50:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3a54:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3a58:	f002 fffe 	bl	6a58 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    3a5c:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3a5e:	f1ba 0f00 	cmp.w	sl, #0
    3a62:	d14d      	bne.n	3b00 <spi_nrfx_transceive+0x2c8>
    3a64:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3a68:	2300      	movs	r3, #0
    3a6a:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    3a6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
    3a70:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3a74:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3a78:	f002 ffee 	bl	6a58 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    3a7c:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    3a7e:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    3a80:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    3a82:	2101      	movs	r1, #1
    3a84:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    3a86:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    3a88:	f003 f810 	bl	6aac <_spi_context_cs_control>
		transfer_next_chunk(dev);
    3a8c:	4640      	mov	r0, r8
    3a8e:	f7ff fe1d 	bl	36cc <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3a92:	6d25      	ldr	r5, [r4, #80]	; 0x50
    3a94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    3a96:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3a98:	429d      	cmp	r5, r3
    3a9a:	bf38      	it	cc
    3a9c:	461d      	movcc	r5, r3
    3a9e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    3aa2:	435d      	muls	r5, r3
			     ctx->config->frequency;
    3aa4:	f858 3b20 	ldr.w	r3, [r8], #32
			return ((t * to_hz + off) / from_hz);
    3aa8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	fbb5 f5f3 	udiv	r5, r5, r3
    3ab2:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    3ab4:	35c8      	adds	r5, #200	; 0xc8
    3ab6:	f240 30e7 	movw	r0, #999	; 0x3e7
    3aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3abe:	2300      	movs	r3, #0
    3ac0:	fbe5 010c 	umlal	r0, r1, r5, ip
    3ac4:	f7fc fb1c 	bl	100 <__aeabi_uldivmod>
    3ac8:	4602      	mov	r2, r0
    3aca:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    3acc:	4640      	mov	r0, r8
    3ace:	f001 facb 	bl	5068 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    3ad2:	b1e8      	cbz	r0, 3b10 <spi_nrfx_transceive+0x2d8>
		LOG_ERR("Timeout waiting for transfer complete");
    3ad4:	4b22      	ldr	r3, [pc, #136]	; (3b60 <spi_nrfx_transceive+0x328>)
    3ad6:	627b      	str	r3, [r7, #36]	; 0x24
    3ad8:	2302      	movs	r3, #2
    3ada:	480f      	ldr	r0, [pc, #60]	; (3b18 <spi_nrfx_transceive+0x2e0>)
    3adc:	623b      	str	r3, [r7, #32]
    3ade:	f107 0220 	add.w	r2, r7, #32
    3ae2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ae6:	f002 ffca 	bl	6a7e <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
    3aea:	f06f 0573 	mvn.w	r5, #115	; 0x73
    3aee:	e6da      	b.n	38a6 <spi_nrfx_transceive+0x6e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3af0:	68bb      	ldr	r3, [r7, #8]
    3af2:	681b      	ldr	r3, [r3, #0]
    3af4:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3af6:	2b00      	cmp	r3, #0
    3af8:	d0a6      	beq.n	3a48 <spi_nrfx_transceive+0x210>
    3afa:	68bb      	ldr	r3, [r7, #8]
    3afc:	685b      	ldr	r3, [r3, #4]
    3afe:	e7a4      	b.n	3a4a <spi_nrfx_transceive+0x212>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3b00:	f8da 3000 	ldr.w	r3, [sl]
    3b04:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3b06:	2b00      	cmp	r3, #0
    3b08:	d0ae      	beq.n	3a68 <spi_nrfx_transceive+0x230>
    3b0a:	f8da 3004 	ldr.w	r3, [sl, #4]
    3b0e:	e7ac      	b.n	3a6a <spi_nrfx_transceive+0x232>
	status = ctx->sync_status;
    3b10:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    3b12:	e6c8      	b.n	38a6 <spi_nrfx_transceive+0x6e>
    3b14:	00007d35 	.word	0x00007d35
    3b18:	00007394 	.word	0x00007394
    3b1c:	00007d4f 	.word	0x00007d4f
    3b20:	01000003 	.word	0x01000003
    3b24:	00007d71 	.word	0x00007d71
    3b28:	00007d90 	.word	0x00007d90
    3b2c:	0001e847 	.word	0x0001e847
    3b30:	00007dbf 	.word	0x00007dbf
    3b34:	0003d08f 	.word	0x0003d08f
    3b38:	0007a11f 	.word	0x0007a11f
    3b3c:	000f423f 	.word	0x000f423f
    3b40:	001e847f 	.word	0x001e847f
    3b44:	003d08ff 	.word	0x003d08ff
    3b48:	007a1200 	.word	0x007a1200
    3b4c:	00f42400 	.word	0x00f42400
    3b50:	01e84800 	.word	0x01e84800
    3b54:	00003775 	.word	0x00003775
    3b58:	0bad0000 	.word	0x0bad0000
    3b5c:	00007df0 	.word	0x00007df0
    3b60:	00007e17 	.word	0x00007e17

00003b64 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3b64:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3b66:	2301      	movs	r3, #1
    3b68:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b6a:	4a0e      	ldr	r2, [pc, #56]	; (3ba4 <compare_int_lock+0x40>)
    3b6c:	f3bf 8f5b 	dmb	ish
    3b70:	43dc      	mvns	r4, r3
    3b72:	e852 1f00 	ldrex	r1, [r2]
    3b76:	ea01 0504 	and.w	r5, r1, r4
    3b7a:	e842 5600 	strex	r6, r5, [r2]
    3b7e:	2e00      	cmp	r6, #0
    3b80:	d1f7      	bne.n	3b72 <compare_int_lock+0xe>
    3b82:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b8a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3b8c:	4806      	ldr	r0, [pc, #24]	; (3ba8 <compare_int_lock+0x44>)
    3b8e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3b92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b96:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3b9a:	420b      	tst	r3, r1
}
    3b9c:	bf14      	ite	ne
    3b9e:	2001      	movne	r0, #1
    3ba0:	2000      	moveq	r0, #0
    3ba2:	bd70      	pop	{r4, r5, r6, pc}
    3ba4:	20000e28 	.word	0x20000e28
    3ba8:	40011000 	.word	0x40011000

00003bac <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3bae:	491b      	ldr	r1, [pc, #108]	; (3c1c <sys_clock_timeout_handler+0x70>)
{
    3bb0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3bb2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3bb6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3bb8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3bbc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3bc0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3bc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3bc6:	d30f      	bcc.n	3be8 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3bc8:	f001 fea4 	bl	5914 <sys_clock_announce>
    return p_reg->CC[ch];
    3bcc:	00a3      	lsls	r3, r4, #2
    3bce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3bd2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3bd6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3bda:	4295      	cmp	r5, r2
    3bdc:	d11d      	bne.n	3c1a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    3bde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3be2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    3be6:	e012      	b.n	3c0e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3be8:	4b0d      	ldr	r3, [pc, #52]	; (3c20 <sys_clock_timeout_handler+0x74>)
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	0a1a      	lsrs	r2, r3, #8
    3bee:	061b      	lsls	r3, r3, #24
    3bf0:	195e      	adds	r6, r3, r5
    3bf2:	4b0c      	ldr	r3, [pc, #48]	; (3c24 <sys_clock_timeout_handler+0x78>)
    3bf4:	f142 0700 	adc.w	r7, r2, #0
    3bf8:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3bfc:	f001 fe8a 	bl	5914 <sys_clock_announce>
    return p_reg->CC[ch];
    3c00:	4a09      	ldr	r2, [pc, #36]	; (3c28 <sys_clock_timeout_handler+0x7c>)
    3c02:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    3c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    3c0a:	429d      	cmp	r5, r3
    3c0c:	d105      	bne.n	3c1a <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3c0e:	4a06      	ldr	r2, [pc, #24]	; (3c28 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3c14:	40a3      	lsls	r3, r4
    3c16:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c1c:	200006f8 	.word	0x200006f8
    3c20:	20000e2c 	.word	0x20000e2c
    3c24:	20000700 	.word	0x20000700
    3c28:	40011000 	.word	0x40011000

00003c2c <compare_int_unlock>:
	if (key) {
    3c2c:	b311      	cbz	r1, 3c74 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3c2e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3c32:	2301      	movs	r3, #1
    3c34:	4a10      	ldr	r2, [pc, #64]	; (3c78 <compare_int_unlock+0x4c>)
    3c36:	4083      	lsls	r3, r0
    3c38:	e852 cf00 	ldrex	ip, [r2]
    3c3c:	ea4c 0c03 	orr.w	ip, ip, r3
    3c40:	e842 c100 	strex	r1, ip, [r2]
    3c44:	2900      	cmp	r1, #0
    3c46:	d1f7      	bne.n	3c38 <compare_int_unlock+0xc>
    3c48:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3c4c:	4a0b      	ldr	r2, [pc, #44]	; (3c7c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3c52:	4083      	lsls	r3, r0
    3c54:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c58:	4b09      	ldr	r3, [pc, #36]	; (3c80 <compare_int_unlock+0x54>)
    3c5a:	f3bf 8f5b 	dmb	ish
    3c5e:	681b      	ldr	r3, [r3, #0]
    3c60:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3c64:	40c3      	lsrs	r3, r0
    3c66:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c68:	bf42      	ittt	mi
    3c6a:	4b06      	ldrmi	r3, [pc, #24]	; (3c84 <compare_int_unlock+0x58>)
    3c6c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3c70:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3c74:	4770      	bx	lr
    3c76:	bf00      	nop
    3c78:	20000e28 	.word	0x20000e28
    3c7c:	40011000 	.word	0x40011000
    3c80:	20000e24 	.word	0x20000e24
    3c84:	e000e100 	.word	0xe000e100

00003c88 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3c88:	4b0d      	ldr	r3, [pc, #52]	; (3cc0 <z_nrf_rtc_timer_read+0x38>)
    3c8a:	6818      	ldr	r0, [r3, #0]
    3c8c:	0a01      	lsrs	r1, r0, #8
    3c8e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3c90:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3c94:	4b0b      	ldr	r3, [pc, #44]	; (3cc4 <z_nrf_rtc_timer_read+0x3c>)
    3c96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3c9a:	1818      	adds	r0, r3, r0
    3c9c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3ca4:	d20a      	bcs.n	3cbc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3ca6:	4b08      	ldr	r3, [pc, #32]	; (3cc8 <z_nrf_rtc_timer_read+0x40>)
    3ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cac:	4290      	cmp	r0, r2
    3cae:	eb71 0303 	sbcs.w	r3, r1, r3
    3cb2:	d203      	bcs.n	3cbc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3cb4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3cb8:	f141 0100 	adc.w	r1, r1, #0
}
    3cbc:	4770      	bx	lr
    3cbe:	bf00      	nop
    3cc0:	20000e2c 	.word	0x20000e2c
    3cc4:	40011000 	.word	0x40011000
    3cc8:	20000700 	.word	0x20000700

00003ccc <compare_set>:
{
    3ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cd0:	4614      	mov	r4, r2
    3cd2:	461d      	mov	r5, r3
    3cd4:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    3cd6:	f7ff ff45 	bl	3b64 <compare_int_lock>
    3cda:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3cdc:	f7ff ffd4 	bl	3c88 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3ce0:	42a0      	cmp	r0, r4
    3ce2:	eb71 0305 	sbcs.w	r3, r1, r5
    3ce6:	d27a      	bcs.n	3dde <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    3ce8:	4b46      	ldr	r3, [pc, #280]	; (3e04 <compare_set+0x138>)
    3cea:	1a20      	subs	r0, r4, r0
    3cec:	eb65 0101 	sbc.w	r1, r5, r1
    3cf0:	4298      	cmp	r0, r3
    3cf2:	f171 0100 	sbcs.w	r1, r1, #0
    3cf6:	f080 8081 	bcs.w	3dfc <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    3cfa:	4b43      	ldr	r3, [pc, #268]	; (3e08 <compare_set+0x13c>)
    3cfc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    3d00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3d04:	429d      	cmp	r5, r3
    3d06:	bf08      	it	eq
    3d08:	4294      	cmpeq	r4, r2
    3d0a:	d053      	beq.n	3db4 <compare_set+0xe8>
    3d0c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    3d10:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3d14:	f107 0950 	add.w	r9, r7, #80	; 0x50
    3d18:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    3d1c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d20:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    3d24:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    3d28:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    3d30:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    3d34:	4a35      	ldr	r2, [pc, #212]	; (3e0c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d36:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3d3a:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3d3c:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    3d3e:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3d42:	eba0 000b 	sub.w	r0, r0, fp
    3d46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d4a:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3d4e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3d50:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    3d54:	d105      	bne.n	3d62 <compare_set+0x96>
    3d56:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    3d58:	2013      	movs	r0, #19
    3d5a:	f003 f967 	bl	702c <z_impl_k_busy_wait>
    3d5e:	4a2b      	ldr	r2, [pc, #172]	; (3e0c <compare_set+0x140>)
    3d60:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3d62:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    3d66:	eba6 000c 	sub.w	r0, r6, ip
    3d6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3d6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d72:	bf88      	it	hi
    3d74:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d76:	2000      	movs	r0, #0
    3d78:	f8c9 0000 	str.w	r0, [r9]
    3d7c:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    3d80:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d84:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3d88:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    3d8c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    3d90:	4583      	cmp	fp, r0
    3d92:	d006      	beq.n	3da2 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    3d94:	1a30      	subs	r0, r6, r0
    3d96:	3802      	subs	r0, #2
    3d98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3d9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3da0:	d81b      	bhi.n	3dda <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    3da2:	eba6 0608 	sub.w	r6, r6, r8
    3da6:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3daa:	1936      	adds	r6, r6, r4
    3dac:	f145 0300 	adc.w	r3, r5, #0
    3db0:	4634      	mov	r4, r6
    3db2:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    3db4:	4914      	ldr	r1, [pc, #80]	; (3e08 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3db6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3db8:	013b      	lsls	r3, r7, #4
    3dba:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    3dbe:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3dc2:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    3dc4:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    3dc8:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    3dca:	4638      	mov	r0, r7
    3dcc:	9900      	ldr	r1, [sp, #0]
    3dce:	f7ff ff2d 	bl	3c2c <compare_int_unlock>
}
    3dd2:	4620      	mov	r0, r4
    3dd4:	b003      	add	sp, #12
    3dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dda:	4630      	mov	r0, r6
    3ddc:	e7af      	b.n	3d3e <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    3dde:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3de0:	4a0b      	ldr	r2, [pc, #44]	; (3e10 <compare_set+0x144>)
    3de2:	f3bf 8f5b 	dmb	ish
    3de6:	40bb      	lsls	r3, r7
    3de8:	e852 0f00 	ldrex	r0, [r2]
    3dec:	4318      	orrs	r0, r3
    3dee:	e842 0100 	strex	r1, r0, [r2]
    3df2:	2900      	cmp	r1, #0
    3df4:	d1f8      	bne.n	3de8 <compare_set+0x11c>
    3df6:	f3bf 8f5b 	dmb	ish
    3dfa:	e7db      	b.n	3db4 <compare_set+0xe8>
			return -EINVAL;
    3dfc:	f06f 0415 	mvn.w	r4, #21
    3e00:	e7e3      	b.n	3dca <compare_set+0xfe>
    3e02:	bf00      	nop
    3e04:	01000001 	.word	0x01000001
    3e08:	200006e8 	.word	0x200006e8
    3e0c:	40011000 	.word	0x40011000
    3e10:	20000e24 	.word	0x20000e24

00003e14 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3e16:	4b19      	ldr	r3, [pc, #100]	; (3e7c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3e18:	4d19      	ldr	r5, [pc, #100]	; (3e80 <sys_clock_driver_init+0x6c>)
    3e1a:	2400      	movs	r4, #0
    3e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e24:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3e28:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3e30:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e34:	4b13      	ldr	r3, [pc, #76]	; (3e84 <sys_clock_driver_init+0x70>)
    3e36:	2602      	movs	r6, #2
    3e38:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3e3c:	2101      	movs	r1, #1
    3e3e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3e42:	2011      	movs	r0, #17
    3e44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3e48:	4622      	mov	r2, r4
    3e4a:	f7fe fc13 	bl	2674 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3e4e:	2011      	movs	r0, #17
    3e50:	f7fe fbe0 	bl	2614 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3e54:	4a0c      	ldr	r2, [pc, #48]	; (3e88 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3e56:	2301      	movs	r3, #1
    3e58:	60ab      	str	r3, [r5, #8]
    3e5a:	602b      	str	r3, [r5, #0]
    3e5c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3e5e:	4b0b      	ldr	r3, [pc, #44]	; (3e8c <sys_clock_driver_init+0x78>)
    3e60:	4a0b      	ldr	r2, [pc, #44]	; (3e90 <sys_clock_driver_init+0x7c>)
    3e62:	9300      	str	r3, [sp, #0]
    3e64:	9401      	str	r4, [sp, #4]
    3e66:	2300      	movs	r3, #0
    3e68:	4620      	mov	r0, r4
    3e6a:	f7ff ff2f 	bl	3ccc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3e6e:	4630      	mov	r0, r6
    3e70:	f7ff fa98 	bl	33a4 <z_nrf_clock_control_lf_on>

	return 0;
}
    3e74:	4620      	mov	r0, r4
    3e76:	b002      	add	sp, #8
    3e78:	bd70      	pop	{r4, r5, r6, pc}
    3e7a:	bf00      	nop
    3e7c:	200006e8 	.word	0x200006e8
    3e80:	40011000 	.word	0x40011000
    3e84:	e000e100 	.word	0xe000e100
    3e88:	20000e28 	.word	0x20000e28
    3e8c:	00003bad 	.word	0x00003bad
    3e90:	007fffff 	.word	0x007fffff

00003e94 <rtc_nrf_isr>:
{
    3e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3e98:	4c33      	ldr	r4, [pc, #204]	; (3f68 <rtc_nrf_isr+0xd4>)
    3e9a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3e9e:	079a      	lsls	r2, r3, #30
    3ea0:	d50b      	bpl.n	3eba <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ea2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3ea6:	b143      	cbz	r3, 3eba <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3ea8:	4a30      	ldr	r2, [pc, #192]	; (3f6c <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3eaa:	2300      	movs	r3, #0
    3eac:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3eb0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3eb4:	6813      	ldr	r3, [r2, #0]
    3eb6:	3301      	adds	r3, #1
    3eb8:	6013      	str	r3, [r2, #0]
    3eba:	f04f 0320 	mov.w	r3, #32
    3ebe:	f3ef 8211 	mrs	r2, BASEPRI
    3ec2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ec6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3eca:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3ece:	03db      	lsls	r3, r3, #15
    3ed0:	d529      	bpl.n	3f26 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ed2:	f3bf 8f5b 	dmb	ish
    3ed6:	4b26      	ldr	r3, [pc, #152]	; (3f70 <rtc_nrf_isr+0xdc>)
    3ed8:	e853 1f00 	ldrex	r1, [r3]
    3edc:	f021 0001 	bic.w	r0, r1, #1
    3ee0:	e843 0500 	strex	r5, r0, [r3]
    3ee4:	2d00      	cmp	r5, #0
    3ee6:	d1f7      	bne.n	3ed8 <rtc_nrf_isr+0x44>
    3ee8:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3eec:	b911      	cbnz	r1, 3ef4 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3eee:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3ef2:	b1c3      	cbz	r3, 3f26 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ef4:	2500      	movs	r5, #0
    3ef6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3efa:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    3efe:	f382 8811 	msr	BASEPRI, r2
    3f02:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    3f06:	f7ff febf 	bl	3c88 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3f0a:	f04f 0320 	mov.w	r3, #32
    3f0e:	f3ef 8211 	mrs	r2, BASEPRI
    3f12:	f383 8812 	msr	BASEPRI_MAX, r3
    3f16:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3f1a:	4b16      	ldr	r3, [pc, #88]	; (3f74 <rtc_nrf_isr+0xe0>)
    3f1c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3f20:	42b0      	cmp	r0, r6
    3f22:	41b9      	sbcs	r1, r7
    3f24:	d206      	bcs.n	3f34 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    3f26:	f382 8811 	msr	BASEPRI, r2
    3f2a:	f3bf 8f6f 	isb	sy
}
    3f2e:	b003      	add	sp, #12
    3f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3f34:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3f38:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    3f3c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3f40:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3f44:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3f4a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    3f4e:	f382 8811 	msr	BASEPRI, r2
    3f52:	f3bf 8f6f 	isb	sy
		if (handler) {
    3f56:	2900      	cmp	r1, #0
    3f58:	d0e9      	beq.n	3f2e <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    3f5a:	9000      	str	r0, [sp, #0]
    3f5c:	4632      	mov	r2, r6
    3f5e:	463b      	mov	r3, r7
    3f60:	4628      	mov	r0, r5
    3f62:	4788      	blx	r1
}
    3f64:	e7e3      	b.n	3f2e <rtc_nrf_isr+0x9a>
    3f66:	bf00      	nop
    3f68:	40011000 	.word	0x40011000
    3f6c:	20000e2c 	.word	0x20000e2c
    3f70:	20000e24 	.word	0x20000e24
    3f74:	200006e8 	.word	0x200006e8

00003f78 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f78:	1c43      	adds	r3, r0, #1
{
    3f7a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f7c:	d021      	beq.n	3fc2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f7e:	2801      	cmp	r0, #1
    3f80:	dd21      	ble.n	3fc6 <sys_clock_set_timeout+0x4e>
    3f82:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f86:	da20      	bge.n	3fca <sys_clock_set_timeout+0x52>
    3f88:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3f8a:	f7ff fe7d 	bl	3c88 <z_nrf_rtc_timer_read>
    3f8e:	4b10      	ldr	r3, [pc, #64]	; (3fd0 <sys_clock_set_timeout+0x58>)
    3f90:	e9d3 1300 	ldrd	r1, r3, [r3]
    3f94:	1a42      	subs	r2, r0, r1
		ticks = 0;
    3f96:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    3f9a:	480e      	ldr	r0, [pc, #56]	; (3fd4 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    3f9c:	bf28      	it	cs
    3f9e:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3fa0:	3201      	adds	r2, #1
    3fa2:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    3fa4:	4282      	cmp	r2, r0
    3fa6:	bf28      	it	cs
    3fa8:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    3faa:	1852      	adds	r2, r2, r1
    3fac:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3fb0:	4909      	ldr	r1, [pc, #36]	; (3fd8 <sys_clock_set_timeout+0x60>)
    3fb2:	9001      	str	r0, [sp, #4]
    3fb4:	9100      	str	r1, [sp, #0]
    3fb6:	f143 0300 	adc.w	r3, r3, #0
    3fba:	f7ff fe87 	bl	3ccc <compare_set>
}
    3fbe:	b002      	add	sp, #8
    3fc0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3fc2:	4804      	ldr	r0, [pc, #16]	; (3fd4 <sys_clock_set_timeout+0x5c>)
    3fc4:	e7e0      	b.n	3f88 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3fc6:	2400      	movs	r4, #0
    3fc8:	e7df      	b.n	3f8a <sys_clock_set_timeout+0x12>
    3fca:	4c02      	ldr	r4, [pc, #8]	; (3fd4 <sys_clock_set_timeout+0x5c>)
    3fcc:	e7dd      	b.n	3f8a <sys_clock_set_timeout+0x12>
    3fce:	bf00      	nop
    3fd0:	200006f8 	.word	0x200006f8
    3fd4:	007fffff 	.word	0x007fffff
    3fd8:	00003bad 	.word	0x00003bad

00003fdc <sys_clock_elapsed>:
{
    3fdc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3fde:	f7ff fe53 	bl	3c88 <z_nrf_rtc_timer_read>
    3fe2:	4b02      	ldr	r3, [pc, #8]	; (3fec <sys_clock_elapsed+0x10>)
    3fe4:	681b      	ldr	r3, [r3, #0]
}
    3fe6:	1ac0      	subs	r0, r0, r3
    3fe8:	bd08      	pop	{r3, pc}
    3fea:	bf00      	nop
    3fec:	200006f8 	.word	0x200006f8

00003ff0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3ff0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    3ff2:	f7fd fc7b 	bl	18ec <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3ff6:	4b07      	ldr	r3, [pc, #28]	; (4014 <k_sys_fatal_error_handler+0x24>)
    3ff8:	9305      	str	r3, [sp, #20]
    3ffa:	2302      	movs	r3, #2
    3ffc:	9304      	str	r3, [sp, #16]
    3ffe:	4806      	ldr	r0, [pc, #24]	; (4018 <k_sys_fatal_error_handler+0x28>)
    4000:	2300      	movs	r3, #0
    4002:	aa04      	add	r2, sp, #16
    4004:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4008:	f7fd fd50 	bl	1aac <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    400c:	2000      	movs	r0, #0
    400e:	f7ff f8b1 	bl	3174 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4012:	bf00      	nop
    4014:	00007e65 	.word	0x00007e65
    4018:	0000735c 	.word	0x0000735c

0000401c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    401c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4020:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4024:	2a08      	cmp	r2, #8
    4026:	d106      	bne.n	4036 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4028:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    402c:	2b05      	cmp	r3, #5
    402e:	d802      	bhi.n	4036 <nrf52_errata_103+0x1a>
    4030:	4a02      	ldr	r2, [pc, #8]	; (403c <nrf52_errata_103+0x20>)
    4032:	5cd0      	ldrb	r0, [r2, r3]
    4034:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
    4036:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    4038:	4770      	bx	lr
    403a:	bf00      	nop
    403c:	00007e88 	.word	0x00007e88

00004040 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4040:	4a02      	ldr	r2, [pc, #8]	; (404c <nvmc_wait+0xc>)
    4042:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4046:	2b00      	cmp	r3, #0
    4048:	d0fb      	beq.n	4042 <nvmc_wait+0x2>
}
    404a:	4770      	bx	lr
    404c:	4001e000 	.word	0x4001e000

00004050 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4050:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4052:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4056:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    405a:	2a08      	cmp	r2, #8
    405c:	d14e      	bne.n	40fc <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    405e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4062:	2100      	movs	r1, #0
    4064:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4068:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    406c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4070:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    4074:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    4078:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    407c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    4080:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4084:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    4088:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    408c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    4090:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4094:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    4098:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    409c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    40a0:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    40a4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    40a8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    40ac:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    40b0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    40b4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    40b8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    40bc:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    40c0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    40c4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    40c8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    40cc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    40d0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    40d4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    40d8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    40dc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    40e0:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    40e4:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    40e8:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    40ec:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    40f0:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    40f4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    40f8:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    40fc:	f7ff ff8e 	bl	401c <nrf52_errata_103>
    4100:	b118      	cbz	r0, 410a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4102:	4b3b      	ldr	r3, [pc, #236]	; (41f0 <SystemInit+0x1a0>)
    4104:	4a3b      	ldr	r2, [pc, #236]	; (41f4 <SystemInit+0x1a4>)
    4106:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    410a:	f7ff ff87 	bl	401c <nrf52_errata_103>
    410e:	b118      	cbz	r0, 4118 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4110:	4b39      	ldr	r3, [pc, #228]	; (41f8 <SystemInit+0x1a8>)
    4112:	22fb      	movs	r2, #251	; 0xfb
    4114:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4118:	f7ff ff80 	bl	401c <nrf52_errata_103>
    411c:	b170      	cbz	r0, 413c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    411e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4122:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4126:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    412a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    412e:	f022 020f 	bic.w	r2, r2, #15
    4132:	f003 030f 	and.w	r3, r3, #15
    4136:	4313      	orrs	r3, r2
    4138:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    413c:	f7ff ff6e 	bl	401c <nrf52_errata_103>
    4140:	b120      	cbz	r0, 414c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4142:	4b2e      	ldr	r3, [pc, #184]	; (41fc <SystemInit+0x1ac>)
    4144:	f44f 7200 	mov.w	r2, #512	; 0x200
    4148:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    414c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4150:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    4154:	2b08      	cmp	r3, #8
    4156:	d11a      	bne.n	418e <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    415c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4160:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4162:	bf44      	itt	mi
    4164:	f06f 0201 	mvnmi.w	r2, #1
    4168:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    416c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4170:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    4174:	2b05      	cmp	r3, #5
    4176:	d802      	bhi.n	417e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4178:	4a21      	ldr	r2, [pc, #132]	; (4200 <SystemInit+0x1b0>)
    417a:	5cd3      	ldrb	r3, [r2, r3]
    417c:	b13b      	cbz	r3, 418e <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    417e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4182:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    418a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    418e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4192:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4196:	2a00      	cmp	r2, #0
    4198:	db03      	blt.n	41a2 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    419a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    419e:	2b00      	cmp	r3, #0
    41a0:	da22      	bge.n	41e8 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    41a2:	4918      	ldr	r1, [pc, #96]	; (4204 <SystemInit+0x1b4>)
    41a4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    41a6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    41aa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    41ae:	2412      	movs	r4, #18
    nvmc_wait();
    41b0:	f7ff ff46 	bl	4040 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    41b4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    41b8:	f7ff ff42 	bl	4040 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    41bc:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    41c0:	f7ff ff3e 	bl	4040 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    41c4:	2300      	movs	r3, #0
    41c6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    41ca:	f7ff ff39 	bl	4040 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    41ce:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    41d2:	490d      	ldr	r1, [pc, #52]	; (4208 <SystemInit+0x1b8>)
    41d4:	4b0d      	ldr	r3, [pc, #52]	; (420c <SystemInit+0x1bc>)
    41d6:	68ca      	ldr	r2, [r1, #12]
    41d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    41dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    41de:	60cb      	str	r3, [r1, #12]
    41e0:	f3bf 8f4f 	dsb	sy
    __NOP();
    41e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    41e6:	e7fd      	b.n	41e4 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    41e8:	4b09      	ldr	r3, [pc, #36]	; (4210 <SystemInit+0x1c0>)
    41ea:	4a0a      	ldr	r2, [pc, #40]	; (4214 <SystemInit+0x1c4>)
    41ec:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    41ee:	bd10      	pop	{r4, pc}
    41f0:	40005000 	.word	0x40005000
    41f4:	00038148 	.word	0x00038148
    41f8:	4000f000 	.word	0x4000f000
    41fc:	40029000 	.word	0x40029000
    4200:	00007e82 	.word	0x00007e82
    4204:	4001e000 	.word	0x4001e000
    4208:	e000ed00 	.word	0xe000ed00
    420c:	05fa0004 	.word	0x05fa0004
    4210:	20000100 	.word	0x20000100
    4214:	03d09000 	.word	0x03d09000

00004218 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4218:	4b04      	ldr	r3, [pc, #16]	; (422c <nrfx_clock_init+0x14>)
    421a:	791a      	ldrb	r2, [r3, #4]
    421c:	b922      	cbnz	r2, 4228 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    421e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4220:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4222:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4224:	4802      	ldr	r0, [pc, #8]	; (4230 <nrfx_clock_init+0x18>)
    4226:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4228:	4802      	ldr	r0, [pc, #8]	; (4234 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    422a:	4770      	bx	lr
    422c:	20000e30 	.word	0x20000e30
    4230:	0bad0000 	.word	0x0bad0000
    4234:	0bad000c 	.word	0x0bad000c

00004238 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4238:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    423a:	b110      	cbz	r0, 4242 <nrfx_clock_stop+0xa>
    423c:	2801      	cmp	r0, #1
    423e:	d017      	beq.n	4270 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4240:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    4242:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4246:	2302      	movs	r3, #2
    4248:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    424c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    4250:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4254:	2301      	movs	r3, #1
    4256:	60e3      	str	r3, [r4, #12]
    4258:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    425c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    4260:	03db      	lsls	r3, r3, #15
    4262:	d5ed      	bpl.n	4240 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4264:	2001      	movs	r0, #1
    4266:	f002 fc76 	bl	6b56 <nrfx_busy_wait>
    426a:	3d01      	subs	r5, #1
    426c:	d1f6      	bne.n	425c <nrfx_clock_stop+0x24>
    426e:	e7e7      	b.n	4240 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    4270:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4274:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    4276:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    427a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    427e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4282:	6060      	str	r0, [r4, #4]
    4284:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4288:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    428c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    4290:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4292:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4296:	d505      	bpl.n	42a4 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4298:	b123      	cbz	r3, 42a4 <nrfx_clock_stop+0x6c>
    429a:	2001      	movs	r0, #1
    429c:	f002 fc5b 	bl	6b56 <nrfx_busy_wait>
    42a0:	3d01      	subs	r5, #1
    42a2:	d1f1      	bne.n	4288 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    42a4:	4b01      	ldr	r3, [pc, #4]	; (42ac <nrfx_clock_stop+0x74>)
    42a6:	2200      	movs	r2, #0
    42a8:	715a      	strb	r2, [r3, #5]
    42aa:	e7c9      	b.n	4240 <nrfx_clock_stop+0x8>
    42ac:	20000e30 	.word	0x20000e30

000042b0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    42b0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    42b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    42ba:	b16a      	cbz	r2, 42d8 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42bc:	2200      	movs	r2, #0
    42be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    42c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    42c6:	2201      	movs	r2, #1
    42c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    42cc:	4b11      	ldr	r3, [pc, #68]	; (4314 <nrfx_power_clock_irq_handler+0x64>)
    42ce:	7958      	ldrb	r0, [r3, #5]
    42d0:	b910      	cbnz	r0, 42d8 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    42d2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    42d4:	681b      	ldr	r3, [r3, #0]
    42d6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    42d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    42e0:	b172      	cbz	r2, 4300 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42e2:	2200      	movs	r2, #0
    42e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    42e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    42ec:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    42f0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    42f4:	0792      	lsls	r2, r2, #30
    42f6:	d104      	bne.n	4302 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    42f8:	2201      	movs	r2, #1
    42fa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42fe:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4300:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4302:	2202      	movs	r2, #2
    4304:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4308:	4b02      	ldr	r3, [pc, #8]	; (4314 <nrfx_power_clock_irq_handler+0x64>)
}
    430a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	2001      	movs	r0, #1
    4312:	4718      	bx	r3
    4314:	20000e30 	.word	0x20000e30

00004318 <nrf_gpio_pin_port_decode>:
    return (mask & (1UL << pin_number)) ? true : false;
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    4318:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    431a:	f003 021f 	and.w	r2, r3, #31

    return pin_number >> 5;
    431e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    4320:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4322:	6002      	str	r2, [r0, #0]
}
    4324:	4802      	ldr	r0, [pc, #8]	; (4330 <nrf_gpio_pin_port_decode+0x18>)
    4326:	bf18      	it	ne
    4328:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    432c:	4770      	bx	lr
    432e:	bf00      	nop
    4330:	50000300 	.word	0x50000300

00004334 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    4334:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4338:	4d78      	ldr	r5, [pc, #480]	; (451c <nrfx_spim_init+0x1e8>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    433a:	f890 c004 	ldrb.w	ip, [r0, #4]
{
    433e:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4340:	eb05 104c 	add.w	r0, r5, ip, lsl #5
    4344:	ea4f 174c 	mov.w	r7, ip, lsl #5
    4348:	7f04      	ldrb	r4, [r0, #28]
    434a:	2c00      	cmp	r4, #0
    434c:	f040 80e2 	bne.w	4514 <nrfx_spim_init+0x1e0>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
    4350:	f1bc 0f01 	cmp.w	ip, #1
    4354:	f200 80e0 	bhi.w	4518 <nrfx_spim_init+0x1e4>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    4358:	f8d1 c008 	ldr.w	ip, [r1, #8]
    435c:	f1bc 6f20 	cmp.w	ip, #167772160	; 0xa000000
    4360:	f000 80da 	beq.w	4518 <nrfx_spim_init+0x1e4>
    4364:	f1bc 5fa0 	cmp.w	ip, #335544320	; 0x14000000
    4368:	f000 80d6 	beq.w	4518 <nrfx_spim_init+0x1e4>
    436c:	f891 c011 	ldrb.w	ip, [r1, #17]
    4370:	f1bc 0f00 	cmp.w	ip, #0
    4374:	f040 80d0 	bne.w	4518 <nrfx_spim_init+0x1e4>
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
    4378:	f891 c00f 	ldrb.w	ip, [r1, #15]
    437c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    4380:	f040 80ca 	bne.w	4518 <nrfx_spim_init+0x1e4>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    4384:	f8d6 8000 	ldr.w	r8, [r6]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    4388:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
    438a:	6043      	str	r3, [r0, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    438c:	f891 c013 	ldrb.w	ip, [r1, #19]
    4390:	7f82      	ldrb	r2, [r0, #30]
    4392:	f36c 0200 	bfi	r2, ip, #0, #1
    4396:	7782      	strb	r2, [r0, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    4398:	f891 c004 	ldrb.w	ip, [r1, #4]
    439c:	b2d2      	uxtb	r2, r2
    439e:	f36c 0241 	bfi	r2, ip, #1, #1
    43a2:	7782      	strb	r2, [r0, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
    43a4:	f891 c011 	ldrb.w	ip, [r1, #17]
    43a8:	b2d2      	uxtb	r2, r2
    43aa:	f36c 0282 	bfi	r2, ip, #2, #1
    43ae:	7782      	strb	r2, [r0, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
    43b0:	78cb      	ldrb	r3, [r1, #3]
    43b2:	77c3      	strb	r3, [r0, #31]
    if (!p_config->skip_gpio_cfg)
    43b4:	7ccb      	ldrb	r3, [r1, #19]
    43b6:	f8d6 9000 	ldr.w	r9, [r6]
    43ba:	2b00      	cmp	r3, #0
    43bc:	d15e      	bne.n	447c <nrfx_spim_init+0x148>
                    : NRF_GPIO_PIN_S0S1;
    43be:	688b      	ldr	r3, [r1, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
    43c0:	7808      	ldrb	r0, [r1, #0]
                    : NRF_GPIO_PIN_S0S1;
    43c2:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
    43c6:	7b0b      	ldrb	r3, [r1, #12]
    43c8:	bf08      	it	eq
    43ca:	2403      	moveq	r4, #3
    43cc:	2b01      	cmp	r3, #1
    43ce:	f200 8095 	bhi.w	44fc <nrfx_spim_init+0x1c8>
        nrf_gpio_pin_clear(pin_number);
    43d2:	f002 fc13 	bl	6bfc <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    43d6:	780b      	ldrb	r3, [r1, #0]
    43d8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    43da:	a801      	add	r0, sp, #4
    43dc:	f7ff ff9c 	bl	4318 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    43e0:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    43e2:	0224      	lsls	r4, r4, #8
    reg->PIN_CNF[pin_number] = cnf;
    43e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    43e8:	f044 0201 	orr.w	r2, r4, #1
    reg->PIN_CNF[pin_number] = cnf;
    43ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    43f0:	7848      	ldrb	r0, [r1, #1]
    43f2:	28ff      	cmp	r0, #255	; 0xff
    43f4:	d00d      	beq.n	4412 <nrfx_spim_init+0xde>
        nrf_gpio_pin_clear(pin_number);
    43f6:	f002 fc01 	bl	6bfc <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
    43fa:	784b      	ldrb	r3, [r1, #1]
    43fc:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    43fe:	a801      	add	r0, sp, #4
    4400:	f7ff ff8a 	bl	4318 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4404:	9b01      	ldr	r3, [sp, #4]
    4406:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    440a:	f044 0203 	orr.w	r2, r4, #3
    reg->PIN_CNF[pin_number] = cnf;
    440e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    4412:	788b      	ldrb	r3, [r1, #2]
    4414:	2bff      	cmp	r3, #255	; 0xff
    4416:	d00c      	beq.n	4432 <nrfx_spim_init+0xfe>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4418:	a801      	add	r0, sp, #4
                         p_config->miso_pull,
    441a:	f891 a00e 	ldrb.w	sl, [r1, #14]
            nrf_gpio_cfg(p_config->miso_pin,
    441e:	9301      	str	r3, [sp, #4]
    4420:	f7ff ff7a 	bl	4318 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4424:	9b01      	ldr	r3, [sp, #4]
    4426:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    442a:	ea44 028a 	orr.w	r2, r4, sl, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    442e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    4432:	78c8      	ldrb	r0, [r1, #3]
    4434:	28ff      	cmp	r0, #255	; 0xff
    4436:	d010      	beq.n	445a <nrfx_spim_init+0x126>
    if (value == 0)
    4438:	790b      	ldrb	r3, [r1, #4]
    443a:	2b00      	cmp	r3, #0
    443c:	d061      	beq.n	4502 <nrfx_spim_init+0x1ce>
        nrf_gpio_pin_clear(pin_number);
    443e:	f002 fbdd 	bl	6bfc <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
    4442:	78cb      	ldrb	r3, [r1, #3]
    4444:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4446:	a801      	add	r0, sp, #4
    4448:	f7ff ff66 	bl	4318 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    444c:	9b01      	ldr	r3, [sp, #4]
    444e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4452:	f044 0203 	orr.w	r2, r4, #3
    reg->PIN_CNF[pin_number] = cnf;
    4456:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    445a:	7bc8      	ldrb	r0, [r1, #15]
    445c:	28ff      	cmp	r0, #255	; 0xff
    445e:	d00d      	beq.n	447c <nrfx_spim_init+0x148>
        nrf_gpio_pin_set(pin_number);
    4460:	f002 fbbf 	bl	6be2 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
    4464:	7bcb      	ldrb	r3, [r1, #15]
    4466:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4468:	a801      	add	r0, sp, #4
    446a:	f7ff ff55 	bl	4318 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    446e:	9b01      	ldr	r3, [sp, #4]
    4470:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4474:	f044 0403 	orr.w	r4, r4, #3
    reg->PIN_CNF[pin_number] = cnf;
    4478:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    447c:	7d0b      	ldrb	r3, [r1, #20]
    447e:	b993      	cbnz	r3, 44a6 <nrfx_spim_init+0x172>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    4480:	784b      	ldrb	r3, [r1, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    4482:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    4484:	2bff      	cmp	r3, #255	; 0xff
    4486:	bf18      	it	ne
    4488:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    448a:	788b      	ldrb	r3, [r1, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    448c:	f8c9 0508 	str.w	r0, [r9, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    4490:	bf08      	it	eq
    4492:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    4496:	2bff      	cmp	r3, #255	; 0xff
    4498:	bf08      	it	eq
    449a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    p_reg->PSEL.MOSI = mosi_pin;
    449e:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    44a2:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    44a6:	7c0b      	ldrb	r3, [r1, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
    44a8:	f8c8 3560 	str.w	r3, [r8, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    44ac:	688b      	ldr	r3, [r1, #8]
    44ae:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    44b2:	7b4b      	ldrb	r3, [r1, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    44b4:	7b0a      	ldrb	r2, [r1, #12]
    44b6:	3b00      	subs	r3, #0
    44b8:	bf18      	it	ne
    44ba:	2301      	movne	r3, #1
    switch (spi_mode)
    44bc:	2a02      	cmp	r2, #2
    44be:	d023      	beq.n	4508 <nrfx_spim_init+0x1d4>
    44c0:	2a03      	cmp	r2, #3
    44c2:	d024      	beq.n	450e <nrfx_spim_init+0x1da>
    44c4:	2a01      	cmp	r2, #1
    44c6:	d101      	bne.n	44cc <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    44c8:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    44cc:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    44d0:	798b      	ldrb	r3, [r1, #6]
    44d2:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    44d6:	2307      	movs	r3, #7
    44d8:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    44dc:	59eb      	ldr	r3, [r5, r7]
    44de:	b123      	cbz	r3, 44ea <nrfx_spim_init+0x1b6>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    44e0:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    44e2:	f340 3007 	sbfx	r0, r0, #12, #8
    44e6:	f7fe f895 	bl	2614 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    44ea:	19eb      	adds	r3, r5, r7
    44ec:	2200      	movs	r2, #0
    44ee:	775a      	strb	r2, [r3, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    44f0:	480b      	ldr	r0, [pc, #44]	; (4520 <nrfx_spim_init+0x1ec>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    44f2:	2201      	movs	r2, #1
    44f4:	771a      	strb	r2, [r3, #28]
}
    44f6:	b002      	add	sp, #8
    44f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_gpio_pin_set(pin_number);
    44fc:	f002 fb71 	bl	6be2 <nrf_gpio_pin_set>
    4500:	e769      	b.n	43d6 <nrfx_spim_init+0xa2>
    4502:	f002 fb6e 	bl	6be2 <nrf_gpio_pin_set>
    4506:	e79c      	b.n	4442 <nrfx_spim_init+0x10e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    4508:	f043 0304 	orr.w	r3, r3, #4
        break;
    450c:	e7de      	b.n	44cc <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    450e:	f043 0306 	orr.w	r3, r3, #6
        break;
    4512:	e7db      	b.n	44cc <nrfx_spim_init+0x198>
        return err_code;
    4514:	4803      	ldr	r0, [pc, #12]	; (4524 <nrfx_spim_init+0x1f0>)
    4516:	e7ee      	b.n	44f6 <nrfx_spim_init+0x1c2>
        return err_code;
    4518:	4803      	ldr	r0, [pc, #12]	; (4528 <nrfx_spim_init+0x1f4>)
    451a:	e7ec      	b.n	44f6 <nrfx_spim_init+0x1c2>
    451c:	20000e38 	.word	0x20000e38
    4520:	0bad0000 	.word	0x0bad0000
    4524:	0bad0005 	.word	0x0bad0005
    4528:	0bad0003 	.word	0x0bad0003

0000452c <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    452e:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    4530:	4c20      	ldr	r4, [pc, #128]	; (45b4 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    4532:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    4534:	015e      	lsls	r6, r3, #5
    4536:	eb04 1743 	add.w	r7, r4, r3, lsl #5
    453a:	59a3      	ldr	r3, [r4, r6]
    453c:	b1b3      	cbz	r3, 456c <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    453e:	f345 3007 	sbfx	r0, r5, #12, #8
    4542:	f7fe f875 	bl	2630 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    4546:	4b1c      	ldr	r3, [pc, #112]	; (45b8 <nrfx_spim_uninit+0x8c>)
    4548:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    454c:	7f7b      	ldrb	r3, [r7, #29]
    454e:	b16b      	cbz	r3, 456c <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4550:	2301      	movs	r3, #1
    4552:	616b      	str	r3, [r5, #20]
    4554:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4556:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    455a:	b923      	cbnz	r3, 4566 <nrfx_spim_uninit+0x3a>
    455c:	2001      	movs	r0, #1
    455e:	f002 fafa 	bl	6b56 <nrfx_busy_wait>
    4562:	3f01      	subs	r7, #1
    4564:	d1f7      	bne.n	4556 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    4566:	19a3      	adds	r3, r4, r6
    4568:	2200      	movs	r2, #0
    456a:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    456c:	2300      	movs	r3, #0
    456e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    4572:	19a3      	adds	r3, r4, r6
    4574:	7f9b      	ldrb	r3, [r3, #30]
    4576:	07d8      	lsls	r0, r3, #31
    4578:	d417      	bmi.n	45aa <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    457a:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    457e:	1c41      	adds	r1, r0, #1
    4580:	d001      	beq.n	4586 <nrfx_spim_uninit+0x5a>
    nrf_gpio_cfg_default(pin);
    4582:	f002 fb20 	bl	6bc6 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    4586:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    458a:	1c42      	adds	r2, r0, #1
    458c:	d001      	beq.n	4592 <nrfx_spim_uninit+0x66>
    nrf_gpio_cfg_default(pin);
    458e:	f002 fb1a 	bl	6bc6 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    4592:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    4596:	1c43      	adds	r3, r0, #1
    4598:	d001      	beq.n	459e <nrfx_spim_uninit+0x72>
    nrf_gpio_cfg_default(pin);
    459a:	f002 fb14 	bl	6bc6 <nrf_gpio_cfg_default>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    459e:	19a3      	adds	r3, r4, r6
    45a0:	7fd8      	ldrb	r0, [r3, #31]
    45a2:	28ff      	cmp	r0, #255	; 0xff
    45a4:	d001      	beq.n	45aa <nrfx_spim_uninit+0x7e>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    45a6:	f002 fb0e 	bl	6bc6 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    45aa:	4434      	add	r4, r6
    45ac:	2300      	movs	r3, #0
    45ae:	7723      	strb	r3, [r4, #28]
}
    45b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45b2:	bf00      	nop
    45b4:	20000e38 	.word	0x20000e38
    45b8:	00080152 	.word	0x00080152

000045bc <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    45bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    45c0:	4f38      	ldr	r7, [pc, #224]	; (46a4 <nrfx_spim_xfer+0xe8>)
    45c2:	7903      	ldrb	r3, [r0, #4]
    45c4:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    45c8:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    45ca:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    45ce:	4681      	mov	r9, r0
    45d0:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    45d2:	015e      	lsls	r6, r3, #5
    45d4:	2a00      	cmp	r2, #0
    45d6:	d163      	bne.n	46a0 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    45d8:	59ba      	ldr	r2, [r7, r6]
    45da:	b12a      	cbz	r2, 45e8 <nrfx_spim_xfer+0x2c>
    45dc:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    45e0:	bf04      	itt	eq
    45e2:	2201      	moveq	r2, #1
    45e4:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    45e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    45ec:	eb07 0c06 	add.w	ip, r7, r6
    45f0:	f10c 0c0c 	add.w	ip, ip, #12
    45f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    45f8:	2101      	movs	r1, #1
    45fa:	4640      	mov	r0, r8
    45fc:	f002 fb0b 	bl	6c16 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    4600:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    4602:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    4606:	b121      	cbz	r1, 4612 <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4608:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    460c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    4610:	d106      	bne.n	4620 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    4612:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    4614:	b152      	cbz	r2, 462c <nrfx_spim_xfer+0x70>
    4616:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    461a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    461e:	d005      	beq.n	462c <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
    4620:	443e      	add	r6, r7
    4622:	2300      	movs	r3, #0
        return err_code;
    4624:	4820      	ldr	r0, [pc, #128]	; (46a8 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
    4626:	7773      	strb	r3, [r6, #29]
}
    4628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    462c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    462e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4632:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4636:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    463a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    463e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4642:	2200      	movs	r2, #0
    4644:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    4648:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    464c:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    4650:	bf18      	it	ne
    4652:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    4654:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    4658:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    465c:	bf18      	it	ne
    465e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    4660:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    4664:	072a      	lsls	r2, r5, #28
    4666:	d507      	bpl.n	4678 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
    4668:	59ba      	ldr	r2, [r7, r6]
    466a:	b972      	cbnz	r2, 468a <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
    466c:	2100      	movs	r1, #0
    466e:	4640      	mov	r0, r8
    4670:	f002 fad1 	bl	6c16 <set_ss_pin_state>
    return err_code;
    4674:	480d      	ldr	r0, [pc, #52]	; (46ac <nrfx_spim_xfer+0xf0>)
    4676:	e7d7      	b.n	4628 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4678:	2201      	movs	r2, #1
    467a:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    467c:	59ba      	ldr	r2, [r7, r6]
    467e:	b922      	cbnz	r2, 468a <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4680:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    4684:	2a00      	cmp	r2, #0
    4686:	d0fb      	beq.n	4680 <nrfx_spim_xfer+0xc4>
    4688:	e7f0      	b.n	466c <nrfx_spim_xfer+0xb0>
    if (!enable)
    468a:	f015 0f04 	tst.w	r5, #4
    468e:	f04f 0240 	mov.w	r2, #64	; 0x40
    4692:	d002      	beq.n	469a <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
    4694:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4698:	e7ec      	b.n	4674 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
    469a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    469e:	e7e9      	b.n	4674 <nrfx_spim_xfer+0xb8>
        return err_code;
    46a0:	4803      	ldr	r0, [pc, #12]	; (46b0 <nrfx_spim_xfer+0xf4>)
    46a2:	e7c1      	b.n	4628 <nrfx_spim_xfer+0x6c>
    46a4:	20000e38 	.word	0x20000e38
    46a8:	0bad000a 	.word	0x0bad000a
    46ac:	0bad0000 	.word	0x0bad0000
    46b0:	0bad000b 	.word	0x0bad000b

000046b4 <nrfx_spim_0_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46b4:	4b06      	ldr	r3, [pc, #24]	; (46d0 <nrfx_spim_0_irq_handler+0x1c>)
    46b6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    46ba:	b13a      	cbz	r2, 46cc <nrfx_spim_0_irq_handler+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46bc:	2200      	movs	r2, #0
    46be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    46c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        }
#endif
        nrf_spim_event_clear(p_spim, NRF_SPIM_EVENT_END);
        NRFX_ASSERT(p_cb->handler);
        NRFX_LOG_DEBUG("Event: NRF_SPIM_EVENT_END.");
        finish_transfer(p_cb);
    46c6:	4803      	ldr	r0, [pc, #12]	; (46d4 <nrfx_spim_0_irq_handler+0x20>)
    46c8:	f002 bab5 	b.w	6c36 <finish_transfer>

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    46cc:	4770      	bx	lr
    46ce:	bf00      	nop
    46d0:	40003000 	.word	0x40003000
    46d4:	20000e38 	.word	0x20000e38

000046d8 <nrfx_spim_1_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    46dc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    46e0:	b13a      	cbz	r2, 46f2 <nrfx_spim_1_irq_handler+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46e2:	2200      	movs	r2, #0
    46e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    46e8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        finish_transfer(p_cb);
    46ec:	4801      	ldr	r0, [pc, #4]	; (46f4 <nrfx_spim_1_irq_handler+0x1c>)
    46ee:	f002 baa2 	b.w	6c36 <finish_transfer>

#if NRFX_CHECK(NRFX_SPIM1_ENABLED)
void nrfx_spim_1_irq_handler(void)
{
    irq_handler(NRF_SPIM1, &m_cb[NRFX_SPIM1_INST_IDX]);
}
    46f2:	4770      	bx	lr
    46f4:	20000e58 	.word	0x20000e58

000046f8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    46f8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    46fa:	4c11      	ldr	r4, [pc, #68]	; (4740 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    46fc:	4a11      	ldr	r2, [pc, #68]	; (4744 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    46fe:	4912      	ldr	r1, [pc, #72]	; (4748 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4700:	2303      	movs	r3, #3
    4702:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4704:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4706:	4b11      	ldr	r3, [pc, #68]	; (474c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    4708:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    470a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    470c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4710:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4712:	2300      	movs	r3, #0
    4714:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4716:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4718:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    471a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    471c:	4a0c      	ldr	r2, [pc, #48]	; (4750 <_DoInit+0x58>)
    471e:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4720:	2210      	movs	r2, #16
    4722:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    4724:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    4726:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4728:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    472a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    472c:	f002 f8b8 	bl	68a0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    4730:	4908      	ldr	r1, [pc, #32]	; (4754 <_DoInit+0x5c>)
    4732:	4620      	mov	r0, r4
    4734:	f002 f8b4 	bl	68a0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    4738:	2320      	movs	r3, #32
    473a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    473c:	bd10      	pop	{r4, pc}
    473e:	bf00      	nop
    4740:	20000e78 	.word	0x20000e78
    4744:	00007e8e 	.word	0x00007e8e
    4748:	00007e97 	.word	0x00007e97
    474c:	20001176 	.word	0x20001176
    4750:	20001166 	.word	0x20001166
    4754:	00007e9b 	.word	0x00007e9b

00004758 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    475c:	4f21      	ldr	r7, [pc, #132]	; (47e4 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    475e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4762:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4764:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4768:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    476a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    476c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    476e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4770:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4772:	d831      	bhi.n	47d8 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4774:	f8d2 a020 	ldr.w	sl, [r2, #32]
    4778:	ebaa 0905 	sub.w	r9, sl, r5
    477c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    4780:	4294      	cmp	r4, r2
    4782:	d811      	bhi.n	47a8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4784:	2318      	movs	r3, #24
    4786:	fb06 3303 	mla	r3, r6, r3, r3
    478a:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    478c:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    478e:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    4790:	4641      	mov	r1, r8
    4792:	4428      	add	r0, r5
    4794:	f002 f89e 	bl	68d4 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    4798:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    479a:	2318      	movs	r3, #24
    479c:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    47a0:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    47a2:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    47a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    47a8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    47aa:	429c      	cmp	r4, r3
    47ac:	d818      	bhi.n	47e0 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    47ae:	fb00 bb0b 	mla	fp, r0, fp, fp
    47b2:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    47b4:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    47b6:	f8db 0004 	ldr.w	r0, [fp, #4]
    47ba:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    47bc:	4428      	add	r0, r5
    47be:	f002 f889 	bl	68d4 <memcpy>
      if (NumBytes) {
    47c2:	ebb4 040a 	subs.w	r4, r4, sl
    47c6:	d0e8      	beq.n	479a <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    47c8:	f8db 0004 	ldr.w	r0, [fp, #4]
    47cc:	4622      	mov	r2, r4
    47ce:	eb08 0109 	add.w	r1, r8, r9
    47d2:	f002 f87f 	bl	68d4 <memcpy>
      return 1;
    47d6:	e7e0      	b.n	479a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    47d8:	3b01      	subs	r3, #1
    47da:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    47dc:	42a3      	cmp	r3, r4
    47de:	d2d1      	bcs.n	4784 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    47e0:	2000      	movs	r0, #0
    47e2:	e7df      	b.n	47a4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    47e4:	20000e78 	.word	0x20000e78

000047e8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    47e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    47ea:	4b14      	ldr	r3, [pc, #80]	; (483c <SEGGER_RTT_WriteNoLock+0x54>)
    47ec:	2718      	movs	r7, #24
    47ee:	fb00 7507 	mla	r5, r0, r7, r7
    47f2:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    47f4:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    47f8:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    47fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47fc:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    47fe:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    4800:	d00a      	beq.n	4818 <SEGGER_RTT_WriteNoLock+0x30>
    4802:	2b02      	cmp	r3, #2
    4804:	d014      	beq.n	4830 <SEGGER_RTT_WriteNoLock+0x48>
    4806:	b923      	cbnz	r3, 4812 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    4808:	4628      	mov	r0, r5
    480a:	f002 fa23 	bl	6c54 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    480e:	4284      	cmp	r4, r0
    4810:	d908      	bls.n	4824 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    4812:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    4814:	4620      	mov	r0, r4
    4816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    4818:	4628      	mov	r0, r5
    481a:	f002 fa1b 	bl	6c54 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    481e:	4284      	cmp	r4, r0
    4820:	bf28      	it	cs
    4822:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    4824:	4622      	mov	r2, r4
    4826:	4631      	mov	r1, r6
    4828:	4628      	mov	r0, r5
    482a:	f002 fa1c 	bl	6c66 <_WriteNoCheck>
    break;
    482e:	e7f1      	b.n	4814 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4830:	4628      	mov	r0, r5
}
    4832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4836:	f002 ba31 	b.w	6c9c <_WriteBlocking>
    483a:	bf00      	nop
    483c:	20000e78 	.word	0x20000e78

00004840 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    4840:	4b03      	ldr	r3, [pc, #12]	; (4850 <SEGGER_RTT_HasDataUp+0x10>)
    4842:	2218      	movs	r2, #24
    4844:	fb02 3300 	mla	r3, r2, r0, r3
    4848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    484a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    484c:	1a80      	subs	r0, r0, r2
    484e:	4770      	bx	lr
    4850:	20000e78 	.word	0x20000e78

00004854 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    4854:	4803      	ldr	r0, [pc, #12]	; (4864 <zephyr_rtt_mutex_lock+0x10>)
    4856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    485a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    485e:	f000 bb2d 	b.w	4ebc <z_impl_k_mutex_lock>
    4862:	bf00      	nop
    4864:	200001f0 	.word	0x200001f0

00004868 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    4868:	4801      	ldr	r0, [pc, #4]	; (4870 <zephyr_rtt_mutex_unlock+0x8>)
    486a:	f000 bba1 	b.w	4fb0 <z_impl_k_mutex_unlock>
    486e:	bf00      	nop
    4870:	200001f0 	.word	0x200001f0

00004874 <sen1_init>:

/////////////////////////////////////////////////////////////////////
//////////  INIT RELATED FUNCTIONS:

static int sen1_init(const struct device *dev)
{
    4874:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("sen1_init done\n");
    4876:	4b07      	ldr	r3, [pc, #28]	; (4894 <sen1_init+0x20>)
    4878:	9305      	str	r3, [sp, #20]
    487a:	2302      	movs	r3, #2
    487c:	9304      	str	r3, [sp, #16]
    487e:	4806      	ldr	r0, [pc, #24]	; (4898 <sen1_init+0x24>)
    4880:	2300      	movs	r3, #0
    4882:	aa04      	add	r2, sp, #16
    4884:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4888:	f7fd f910 	bl	1aac <z_impl_z_log_msg_static_create>
    return 0;
}
    488c:	2000      	movs	r0, #0
    488e:	b007      	add	sp, #28
    4890:	f85d fb04 	ldr.w	pc, [sp], #4
    4894:	00007ea2 	.word	0x00007ea2
    4898:	0000733c 	.word	0x0000733c

0000489c <sen1_sample_fetch>:
{
    489c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("you can fetch it yourself\n");
    489e:	4b07      	ldr	r3, [pc, #28]	; (48bc <sen1_sample_fetch+0x20>)
    48a0:	9305      	str	r3, [sp, #20]
    48a2:	2302      	movs	r3, #2
    48a4:	9304      	str	r3, [sp, #16]
    48a6:	4806      	ldr	r0, [pc, #24]	; (48c0 <sen1_sample_fetch+0x24>)
    48a8:	2300      	movs	r3, #0
    48aa:	aa04      	add	r2, sp, #16
    48ac:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    48b0:	f7fd f8fc 	bl	1aac <z_impl_z_log_msg_static_create>
}
    48b4:	2000      	movs	r0, #0
    48b6:	b007      	add	sp, #28
    48b8:	f85d fb04 	ldr.w	pc, [sp], #4
    48bc:	00007eb2 	.word	0x00007eb2
    48c0:	0000733c 	.word	0x0000733c

000048c4 <sen1_bist>:
{
    48c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("sen1 bist result - test proves i am a genius\n");
    48c6:	4b07      	ldr	r3, [pc, #28]	; (48e4 <sen1_bist+0x20>)
    48c8:	9305      	str	r3, [sp, #20]
    48ca:	2302      	movs	r3, #2
    48cc:	9304      	str	r3, [sp, #16]
    48ce:	4806      	ldr	r0, [pc, #24]	; (48e8 <sen1_bist+0x24>)
    48d0:	2300      	movs	r3, #0
    48d2:	aa04      	add	r2, sp, #16
    48d4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    48d8:	f7fd f8e8 	bl	1aac <z_impl_z_log_msg_static_create>
}
    48dc:	2000      	movs	r0, #0
    48de:	b007      	add	sp, #28
    48e0:	f85d fb04 	ldr.w	pc, [sp], #4
    48e4:	00007ecd 	.word	0x00007ecd
    48e8:	0000733c 	.word	0x0000733c

000048ec <sen1_attr_set>:
{
    48ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("from all your attribute you chose this one ?? \n");
    48ee:	4b07      	ldr	r3, [pc, #28]	; (490c <sen1_attr_set+0x20>)
    48f0:	9305      	str	r3, [sp, #20]
    48f2:	2302      	movs	r3, #2
    48f4:	9304      	str	r3, [sp, #16]
    48f6:	4806      	ldr	r0, [pc, #24]	; (4910 <sen1_attr_set+0x24>)
    48f8:	2300      	movs	r3, #0
    48fa:	aa04      	add	r2, sp, #16
    48fc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4900:	f7fd f8d4 	bl	1aac <z_impl_z_log_msg_static_create>
}
    4904:	2000      	movs	r0, #0
    4906:	b007      	add	sp, #28
    4908:	f85d fb04 	ldr.w	pc, [sp], #4
    490c:	00007efb 	.word	0x00007efb
    4910:	0000733c 	.word	0x0000733c

00004914 <sen2_init>:

/////////////////////////////////////////////////////////////////////
//////////  INIT RELATED FUNCTIONS:

static int sen2_init(const struct device *dev)
{
    4914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("sen2_init done\n");
    4916:	4b07      	ldr	r3, [pc, #28]	; (4934 <sen2_init+0x20>)
    4918:	9305      	str	r3, [sp, #20]
    491a:	2302      	movs	r3, #2
    491c:	9304      	str	r3, [sp, #16]
    491e:	4806      	ldr	r0, [pc, #24]	; (4938 <sen2_init+0x24>)
    4920:	2300      	movs	r3, #0
    4922:	aa04      	add	r2, sp, #16
    4924:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4928:	f7fd f8c0 	bl	1aac <z_impl_z_log_msg_static_create>
    return 0;
}
    492c:	2000      	movs	r0, #0
    492e:	b007      	add	sp, #28
    4930:	f85d fb04 	ldr.w	pc, [sp], #4
    4934:	00007f38 	.word	0x00007f38
    4938:	00007344 	.word	0x00007344

0000493c <sen2_sample_fetch>:
{
    493c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("you can fetch it yourself\n");
    493e:	4b07      	ldr	r3, [pc, #28]	; (495c <sen2_sample_fetch+0x20>)
    4940:	9305      	str	r3, [sp, #20]
    4942:	2302      	movs	r3, #2
    4944:	9304      	str	r3, [sp, #16]
    4946:	4806      	ldr	r0, [pc, #24]	; (4960 <sen2_sample_fetch+0x24>)
    4948:	2300      	movs	r3, #0
    494a:	aa04      	add	r2, sp, #16
    494c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4950:	f7fd f8ac 	bl	1aac <z_impl_z_log_msg_static_create>
}
    4954:	2000      	movs	r0, #0
    4956:	b007      	add	sp, #28
    4958:	f85d fb04 	ldr.w	pc, [sp], #4
    495c:	00007eb2 	.word	0x00007eb2
    4960:	00007344 	.word	0x00007344

00004964 <sen2_bist>:
{
    4964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("sen2 bist result - whos your dady??\n");
    4966:	4b07      	ldr	r3, [pc, #28]	; (4984 <sen2_bist+0x20>)
    4968:	9305      	str	r3, [sp, #20]
    496a:	2302      	movs	r3, #2
    496c:	9304      	str	r3, [sp, #16]
    496e:	4806      	ldr	r0, [pc, #24]	; (4988 <sen2_bist+0x24>)
    4970:	2300      	movs	r3, #0
    4972:	aa04      	add	r2, sp, #16
    4974:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4978:	f7fd f898 	bl	1aac <z_impl_z_log_msg_static_create>
}
    497c:	2000      	movs	r0, #0
    497e:	b007      	add	sp, #28
    4980:	f85d fb04 	ldr.w	pc, [sp], #4
    4984:	00007f48 	.word	0x00007f48
    4988:	00007344 	.word	0x00007344

0000498c <sen2_attr_set>:
{
    498c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("from all your attribute you chose this one ?? \n");
    498e:	4b07      	ldr	r3, [pc, #28]	; (49ac <sen2_attr_set+0x20>)
    4990:	9305      	str	r3, [sp, #20]
    4992:	2302      	movs	r3, #2
    4994:	9304      	str	r3, [sp, #16]
    4996:	4806      	ldr	r0, [pc, #24]	; (49b0 <sen2_attr_set+0x24>)
    4998:	2300      	movs	r3, #0
    499a:	aa04      	add	r2, sp, #16
    499c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    49a0:	f7fd f884 	bl	1aac <z_impl_z_log_msg_static_create>
}
    49a4:	2000      	movs	r0, #0
    49a6:	b007      	add	sp, #28
    49a8:	f85d fb04 	ldr.w	pc, [sp], #4
    49ac:	00007efb 	.word	0x00007efb
    49b0:	00007344 	.word	0x00007344

000049b4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    49b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49b8:	b086      	sub	sp, #24
    49ba:	4605      	mov	r5, r0
    49bc:	af00      	add	r7, sp, #0
    49be:	460e      	mov	r6, r1
	__asm__ volatile(
    49c0:	f04f 0320 	mov.w	r3, #32
    49c4:	f3ef 8811 	mrs	r8, BASEPRI
    49c8:	f383 8812 	msr	BASEPRI_MAX, r3
    49cc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    49d0:	f000 fe54 	bl	567c <z_impl_z_current_get>
    49d4:	2d04      	cmp	r5, #4
    49d6:	bf96      	itet	ls
    49d8:	4b2c      	ldrls	r3, [pc, #176]	; (4a8c <z_fatal_error+0xd8>)
    49da:	4b2d      	ldrhi	r3, [pc, #180]	; (4a90 <z_fatal_error+0xdc>)
    49dc:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    49e0:	46e9      	mov	r9, sp
    49e2:	b08a      	sub	sp, #40	; 0x28
    49e4:	4604      	mov	r4, r0
    49e6:	466a      	mov	r2, sp
    49e8:	492a      	ldr	r1, [pc, #168]	; (4a94 <z_fatal_error+0xe0>)
    49ea:	61d3      	str	r3, [r2, #28]
    49ec:	f240 3301 	movw	r3, #769	; 0x301
    49f0:	8493      	strh	r3, [r2, #36]	; 0x24
    49f2:	f04f 0a00 	mov.w	sl, #0
    49f6:	4b28      	ldr	r3, [pc, #160]	; (4a98 <z_fatal_error+0xe4>)
    49f8:	f8c2 a020 	str.w	sl, [r2, #32]
    49fc:	e9c2 1505 	strd	r1, r5, [r2, #20]
    4a00:	f842 3f10 	str.w	r3, [r2, #16]!
    4a04:	4825      	ldr	r0, [pc, #148]	; (4a9c <z_fatal_error+0xe8>)
    4a06:	4653      	mov	r3, sl
    4a08:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    4a0c:	f7fd f84e 	bl	1aac <z_impl_z_log_msg_static_create>
    4a10:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4a12:	b17e      	cbz	r6, 4a34 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4a14:	69f3      	ldr	r3, [r6, #28]
    4a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4a1a:	b15b      	cbz	r3, 4a34 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    4a1c:	4b20      	ldr	r3, [pc, #128]	; (4aa0 <z_fatal_error+0xec>)
    4a1e:	617b      	str	r3, [r7, #20]
    4a20:	2302      	movs	r3, #2
    4a22:	613b      	str	r3, [r7, #16]
    4a24:	481d      	ldr	r0, [pc, #116]	; (4a9c <z_fatal_error+0xe8>)
    4a26:	4653      	mov	r3, sl
    4a28:	f107 0210 	add.w	r2, r7, #16
    4a2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4a30:	f7fd f83c 	bl	1aac <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4a34:	b12c      	cbz	r4, 4a42 <z_fatal_error+0x8e>
    4a36:	4620      	mov	r0, r4
    4a38:	f002 f9c7 	bl	6dca <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4a3c:	b108      	cbz	r0, 4a42 <z_fatal_error+0x8e>
    4a3e:	7803      	ldrb	r3, [r0, #0]
    4a40:	b903      	cbnz	r3, 4a44 <z_fatal_error+0x90>
		thread_name = "unknown";
    4a42:	4818      	ldr	r0, [pc, #96]	; (4aa4 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4a44:	46e9      	mov	r9, sp
    4a46:	b08a      	sub	sp, #40	; 0x28
    4a48:	466a      	mov	r2, sp
    4a4a:	4b17      	ldr	r3, [pc, #92]	; (4aa8 <z_fatal_error+0xf4>)
    4a4c:	61d0      	str	r0, [r2, #28]
    4a4e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4a52:	f240 3301 	movw	r3, #769	; 0x301
    4a56:	8413      	strh	r3, [r2, #32]
    4a58:	4b14      	ldr	r3, [pc, #80]	; (4aac <z_fatal_error+0xf8>)
    4a5a:	f842 3f10 	str.w	r3, [r2, #16]!
    4a5e:	2300      	movs	r3, #0
    4a60:	480e      	ldr	r0, [pc, #56]	; (4a9c <z_fatal_error+0xe8>)
    4a62:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    4a66:	f7fd f821 	bl	1aac <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4a6a:	4631      	mov	r1, r6
    4a6c:	46cd      	mov	sp, r9
    4a6e:	4628      	mov	r0, r5
    4a70:	f7ff fabe 	bl	3ff0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4a74:	f388 8811 	msr	BASEPRI, r8
    4a78:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4a7c:	4620      	mov	r0, r4
    4a7e:	f7fe fa5f 	bl	2f40 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4a82:	3718      	adds	r7, #24
    4a84:	46bd      	mov	sp, r7
    4a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a8a:	bf00      	nop
    4a8c:	00007588 	.word	0x00007588
    4a90:	00007f7a 	.word	0x00007f7a
    4a94:	00007f90 	.word	0x00007f90
    4a98:	01000005 	.word	0x01000005
    4a9c:	0000737c 	.word	0x0000737c
    4aa0:	00007fb8 	.word	0x00007fb8
    4aa4:	00007f88 	.word	0x00007f88
    4aa8:	00007fd9 	.word	0x00007fd9
    4aac:	01000004 	.word	0x01000004

00004ab0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4ab0:	4b0f      	ldr	r3, [pc, #60]	; (4af0 <z_sys_init_run_level+0x40>)
{
    4ab2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4ab4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4ab8:	3001      	adds	r0, #1
    4aba:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4abe:	42a6      	cmp	r6, r4
    4ac0:	d800      	bhi.n	4ac4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4ac2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4ac4:	e9d4 3500 	ldrd	r3, r5, [r4]
    4ac8:	4628      	mov	r0, r5
    4aca:	4798      	blx	r3
		if (dev != NULL) {
    4acc:	b16d      	cbz	r5, 4aea <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    4ace:	b138      	cbz	r0, 4ae0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4ad0:	2800      	cmp	r0, #0
    4ad2:	bfb8      	it	lt
    4ad4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4ad6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    4ad8:	28ff      	cmp	r0, #255	; 0xff
    4ada:	bfa8      	it	ge
    4adc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    4ade:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4ae0:	68ea      	ldr	r2, [r5, #12]
    4ae2:	7853      	ldrb	r3, [r2, #1]
    4ae4:	f043 0301 	orr.w	r3, r3, #1
    4ae8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4aea:	3408      	adds	r4, #8
    4aec:	e7e7      	b.n	4abe <z_sys_init_run_level+0xe>
    4aee:	bf00      	nop
    4af0:	0000759c 	.word	0x0000759c

00004af4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4af4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4af6:	4b0a      	ldr	r3, [pc, #40]	; (4b20 <bg_thread_main+0x2c>)
    4af8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4afa:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    4afc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4afe:	f7ff ffd7 	bl	4ab0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4b02:	f001 f831 	bl	5b68 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    4b06:	2004      	movs	r0, #4
    4b08:	f7ff ffd2 	bl	4ab0 <z_sys_init_run_level>

	z_init_static_threads();
    4b0c:	f000 f95e 	bl	4dcc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4b10:	f7fb fc60 	bl	3d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4b14:	4a03      	ldr	r2, [pc, #12]	; (4b24 <bg_thread_main+0x30>)
    4b16:	7b13      	ldrb	r3, [r2, #12]
    4b18:	f023 0301 	bic.w	r3, r3, #1
    4b1c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4b1e:	bd08      	pop	{r3, pc}
    4b20:	20001576 	.word	0x20001576
    4b24:	20000788 	.word	0x20000788

00004b28 <z_bss_zero>:
{
    4b28:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4b2a:	4803      	ldr	r0, [pc, #12]	; (4b38 <z_bss_zero+0x10>)
    4b2c:	4a03      	ldr	r2, [pc, #12]	; (4b3c <z_bss_zero+0x14>)
    4b2e:	2100      	movs	r1, #0
    4b30:	1a12      	subs	r2, r2, r0
    4b32:	f002 f8f0 	bl	6d16 <z_early_memset>
}
    4b36:	bd08      	pop	{r3, pc}
    4b38:	20000228 	.word	0x20000228
    4b3c:	20001578 	.word	0x20001578

00004b40 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4b40:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4b42:	2300      	movs	r3, #0
{
    4b44:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4b46:	2201      	movs	r2, #1
    4b48:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4b4c:	4e13      	ldr	r6, [pc, #76]	; (4b9c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b4e:	4d14      	ldr	r5, [pc, #80]	; (4ba0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4b50:	9301      	str	r3, [sp, #4]
    4b52:	220f      	movs	r2, #15
    4b54:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4b58:	4912      	ldr	r1, [pc, #72]	; (4ba4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b5a:	2318      	movs	r3, #24
    4b5c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4b60:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4b64:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4b66:	f44f 70c0 	mov.w	r0, #384	; 0x180
    4b6a:	fb00 1104 	mla	r1, r0, r4, r1
    4b6e:	4b0e      	ldr	r3, [pc, #56]	; (4ba8 <z_init_cpu+0x68>)
    4b70:	9500      	str	r5, [sp, #0]
    4b72:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4b76:	4630      	mov	r0, r6
    4b78:	f000 f8ca 	bl	4d10 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b7c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4b7e:	4a0b      	ldr	r2, [pc, #44]	; (4bac <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4b80:	60ee      	str	r6, [r5, #12]
    4b82:	f023 0304 	bic.w	r3, r3, #4
    4b86:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4b88:	f44f 6304 	mov.w	r3, #2112	; 0x840
    4b8c:	fb04 3303 	mla	r3, r4, r3, r3
    4b90:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    4b92:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    4b94:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4b96:	b006      	add	sp, #24
    4b98:	bd70      	pop	{r4, r5, r6, pc}
    4b9a:	bf00      	nop
    4b9c:	20000708 	.word	0x20000708
    4ba0:	20000f30 	.word	0x20000f30
    4ba4:	20002100 	.word	0x20002100
    4ba8:	00004e85 	.word	0x00004e85
    4bac:	200018c0 	.word	0x200018c0

00004bb0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4bb0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4bb2:	2000      	movs	r0, #0
{
    4bb4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4bb6:	f7ff ff7b 	bl	4ab0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4bba:	4b2e      	ldr	r3, [pc, #184]	; (4c74 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4bbc:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4bc0:	4d2d      	ldr	r5, [pc, #180]	; (4c78 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    4bc2:	4e2e      	ldr	r6, [pc, #184]	; (4c7c <z_cstart+0xcc>)
    4bc4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4bc6:	4f2e      	ldr	r7, [pc, #184]	; (4c80 <z_cstart+0xd0>)
    4bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4bcc:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4bce:	2400      	movs	r4, #0
    4bd0:	23e0      	movs	r3, #224	; 0xe0
    4bd2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4bd6:	77ec      	strb	r4, [r5, #31]
    4bd8:	762c      	strb	r4, [r5, #24]
    4bda:	766c      	strb	r4, [r5, #25]
    4bdc:	76ac      	strb	r4, [r5, #26]
    4bde:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4be2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4be4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4be8:	626b      	str	r3, [r5, #36]	; 0x24
    4bea:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4bee:	f7fe f91b 	bl	2e28 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4bf2:	f7fd fc8b 	bl	250c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bfa:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4bfc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4bfe:	f7fe fa6f 	bl	30e0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4c02:	f7fe f9b3 	bl	2f6c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    4c06:	f7fc fde1 	bl	17cc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4c0a:	f240 1301 	movw	r3, #257	; 0x101
    4c0e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4c12:	ab06      	add	r3, sp, #24
    4c14:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4c16:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4c1a:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4c1c:	f002 f86f 	bl	6cfe <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    4c20:	2001      	movs	r0, #1
    4c22:	f7ff ff45 	bl	4ab0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4c26:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    4c28:	4d16      	ldr	r5, [pc, #88]	; (4c84 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4c2a:	f7ff ff41 	bl	4ab0 <z_sys_init_run_level>
	z_sched_init();
    4c2e:	f000 fc7d 	bl	552c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4c32:	4b15      	ldr	r3, [pc, #84]	; (4c88 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    4c34:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4c36:	9305      	str	r3, [sp, #20]
    4c38:	2301      	movs	r3, #1
    4c3a:	4914      	ldr	r1, [pc, #80]	; (4c8c <z_cstart+0xdc>)
    4c3c:	9400      	str	r4, [sp, #0]
    4c3e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4c46:	463b      	mov	r3, r7
    4c48:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4c4c:	4628      	mov	r0, r5
    4c4e:	f000 f85f 	bl	4d10 <z_setup_new_thread>
    4c52:	7b6a      	ldrb	r2, [r5, #13]
    4c54:	4606      	mov	r6, r0
    4c56:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4c5a:	4628      	mov	r0, r5
    4c5c:	736a      	strb	r2, [r5, #13]
    4c5e:	f002 f934 	bl	6eca <z_ready_thread>
	z_init_cpu(0);
    4c62:	4620      	mov	r0, r4
    4c64:	f7ff ff6c 	bl	4b40 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4c68:	463a      	mov	r2, r7
    4c6a:	4631      	mov	r1, r6
    4c6c:	4628      	mov	r0, r5
    4c6e:	f7fd fdbf 	bl	27f0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4c72:	bf00      	nop
    4c74:	20002100 	.word	0x20002100
    4c78:	e000ed00 	.word	0xe000ed00
    4c7c:	20000f30 	.word	0x20000f30
    4c80:	00004af5 	.word	0x00004af5
    4c84:	20000788 	.word	0x20000788
    4c88:	0000803b 	.word	0x0000803b
    4c8c:	20002280 	.word	0x20002280

00004c90 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4c90:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4c92:	4c06      	ldr	r4, [pc, #24]	; (4cac <init_mem_slab_module+0x1c>)
    4c94:	4d06      	ldr	r5, [pc, #24]	; (4cb0 <init_mem_slab_module+0x20>)
	int rc = 0;
    4c96:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4c98:	42ac      	cmp	r4, r5
    4c9a:	d300      	bcc.n	4c9e <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    4c9c:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    4c9e:	4620      	mov	r0, r4
    4ca0:	f002 f83d 	bl	6d1e <create_free_list>
		if (rc < 0) {
    4ca4:	2800      	cmp	r0, #0
    4ca6:	dbf9      	blt.n	4c9c <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4ca8:	341c      	adds	r4, #28
    4caa:	e7f5      	b.n	4c98 <init_mem_slab_module+0x8>
    4cac:	200001b4 	.word	0x200001b4
    4cb0:	200001b4 	.word	0x200001b4

00004cb4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4cb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4cb6:	460c      	mov	r4, r1
	__asm__ volatile(
    4cb8:	f04f 0520 	mov.w	r5, #32
    4cbc:	f3ef 8111 	mrs	r1, BASEPRI
    4cc0:	f385 8812 	msr	BASEPRI_MAX, r5
    4cc4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4cc8:	6945      	ldr	r5, [r0, #20]
    4cca:	b15d      	cbz	r5, 4ce4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    4ccc:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4cce:	682b      	ldr	r3, [r5, #0]
    4cd0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4cd2:	6983      	ldr	r3, [r0, #24]
    4cd4:	3301      	adds	r3, #1
    4cd6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4cd8:	2000      	movs	r0, #0
	__asm__ volatile(
    4cda:	f381 8811 	msr	BASEPRI, r1
    4cde:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4ce2:	e011      	b.n	4d08 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4ce4:	ea52 0603 	orrs.w	r6, r2, r3
    4ce8:	d103      	bne.n	4cf2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    4cea:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4cec:	f06f 000b 	mvn.w	r0, #11
    4cf0:	e7f3      	b.n	4cda <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4cf2:	e9cd 2300 	strd	r2, r3, [sp]
    4cf6:	4602      	mov	r2, r0
    4cf8:	3008      	adds	r0, #8
    4cfa:	f000 fb21 	bl	5340 <z_pend_curr>
		if (result == 0) {
    4cfe:	b918      	cbnz	r0, 4d08 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4d00:	4b02      	ldr	r3, [pc, #8]	; (4d0c <k_mem_slab_alloc+0x58>)
    4d02:	689b      	ldr	r3, [r3, #8]
    4d04:	695b      	ldr	r3, [r3, #20]
    4d06:	6023      	str	r3, [r4, #0]
}
    4d08:	b002      	add	sp, #8
    4d0a:	bd70      	pop	{r4, r5, r6, pc}
    4d0c:	20000f30 	.word	0x20000f30

00004d10 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4d10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4d14:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4d16:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4d18:	2604      	movs	r6, #4
    4d1a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4d1c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4d1e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4d20:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4d24:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4d26:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4d28:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4d2e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4d30:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4d34:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4d36:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4d3a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4d3e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4d40:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4d42:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4d44:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d48:	9202      	str	r2, [sp, #8]
    4d4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4d4c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4d4e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d52:	9200      	str	r2, [sp, #0]
    4d54:	4642      	mov	r2, r8
{
    4d56:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d58:	f7fd fd18 	bl	278c <arch_new_thread>
	if (!_current) {
    4d5c:	4b04      	ldr	r3, [pc, #16]	; (4d70 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    4d5e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4d60:	689b      	ldr	r3, [r3, #8]
    4d62:	b103      	cbz	r3, 4d66 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4d66:	6723      	str	r3, [r4, #112]	; 0x70
}
    4d68:	4640      	mov	r0, r8
    4d6a:	b004      	add	sp, #16
    4d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d70:	20000f30 	.word	0x20000f30

00004d74 <z_impl_k_thread_create>:
{
    4d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d76:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4d78:	2500      	movs	r5, #0
    4d7a:	9505      	str	r5, [sp, #20]
    4d7c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4d7e:	9504      	str	r5, [sp, #16]
    4d80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    4d82:	9503      	str	r5, [sp, #12]
    4d84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4d86:	9502      	str	r5, [sp, #8]
{
    4d88:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4d8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d8e:	9501      	str	r5, [sp, #4]
    4d90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4d92:	9500      	str	r5, [sp, #0]
{
    4d94:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4d96:	f7ff ffbb 	bl	4d10 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4d9a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    4d9e:	bf08      	it	eq
    4da0:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    4da4:	d005      	beq.n	4db2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4da6:	ea56 0307 	orrs.w	r3, r6, r7
    4daa:	d105      	bne.n	4db8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    4dac:	4620      	mov	r0, r4
    4dae:	f000 fb3d 	bl	542c <z_sched_start>
}
    4db2:	4620      	mov	r0, r4
    4db4:	b007      	add	sp, #28
    4db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4db8:	4903      	ldr	r1, [pc, #12]	; (4dc8 <z_impl_k_thread_create+0x54>)
    4dba:	463a      	mov	r2, r7
    4dbc:	4633      	mov	r3, r6
    4dbe:	f104 0018 	add.w	r0, r4, #24
    4dc2:	f000 fd29 	bl	5818 <z_add_timeout>
    4dc6:	e7f4      	b.n	4db2 <z_impl_k_thread_create+0x3e>
    4dc8:	00006e37 	.word	0x00006e37

00004dcc <z_init_static_threads>:
{
    4dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4dd0:	4c29      	ldr	r4, [pc, #164]	; (4e78 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4dd2:	4d2a      	ldr	r5, [pc, #168]	; (4e7c <z_init_static_threads+0xb0>)
{
    4dd4:	b087      	sub	sp, #28
    4dd6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4dd8:	42ae      	cmp	r6, r5
    4dda:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4dde:	d30f      	bcc.n	4e00 <z_init_static_threads+0x34>
	k_sched_lock();
    4de0:	f000 fb74 	bl	54cc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4de4:	4c24      	ldr	r4, [pc, #144]	; (4e78 <z_init_static_threads+0xac>)
    4de6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4e80 <z_init_static_threads+0xb4>
    4dea:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4dee:	f240 37e7 	movw	r7, #999	; 0x3e7
    4df2:	42ac      	cmp	r4, r5
    4df4:	d320      	bcc.n	4e38 <z_init_static_threads+0x6c>
}
    4df6:	b007      	add	sp, #28
    4df8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4dfc:	f000 bb7a 	b.w	54f4 <k_sched_unlock>
		z_setup_new_thread(
    4e00:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4e04:	9305      	str	r3, [sp, #20]
    4e06:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4e0a:	9304      	str	r3, [sp, #16]
    4e0c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4e10:	9303      	str	r3, [sp, #12]
    4e12:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4e16:	9302      	str	r3, [sp, #8]
    4e18:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4e1c:	9301      	str	r3, [sp, #4]
    4e1e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4e22:	9300      	str	r3, [sp, #0]
    4e24:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4e28:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4e2c:	f7ff ff70 	bl	4d10 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4e30:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4e34:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4e36:	e7ce      	b.n	4dd6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e3a:	1c5a      	adds	r2, r3, #1
    4e3c:	d00d      	beq.n	4e5a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    4e3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4e42:	2100      	movs	r1, #0
    4e44:	4638      	mov	r0, r7
    4e46:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4e4a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4e4e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4e52:	d104      	bne.n	4e5e <z_init_static_threads+0x92>
	z_sched_start(thread);
    4e54:	4640      	mov	r0, r8
    4e56:	f000 fae9 	bl	542c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4e5a:	3430      	adds	r4, #48	; 0x30
    4e5c:	e7c9      	b.n	4df2 <z_init_static_threads+0x26>
    4e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e62:	2300      	movs	r3, #0
    4e64:	f7fb f94c 	bl	100 <__aeabi_uldivmod>
    4e68:	4602      	mov	r2, r0
    4e6a:	460b      	mov	r3, r1
    4e6c:	f108 0018 	add.w	r0, r8, #24
    4e70:	4649      	mov	r1, r9
    4e72:	f000 fcd1 	bl	5818 <z_add_timeout>
    4e76:	e7f0      	b.n	4e5a <z_init_static_threads+0x8e>
    4e78:	00007310 	.word	0x00007310
    4e7c:	00007310 	.word	0x00007310
    4e80:	00006e37 	.word	0x00006e37

00004e84 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4e84:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4e86:	4c0b      	ldr	r4, [pc, #44]	; (4eb4 <idle+0x30>)
	return !z_sys_post_kernel;
    4e88:	4d0b      	ldr	r5, [pc, #44]	; (4eb8 <idle+0x34>)
	__asm__ volatile(
    4e8a:	f04f 0220 	mov.w	r2, #32
    4e8e:	f3ef 8311 	mrs	r3, BASEPRI
    4e92:	f382 8812 	msr	BASEPRI_MAX, r2
    4e96:	f3bf 8f6f 	isb	sy
    4e9a:	f002 f895 	bl	6fc8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4e9e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4ea0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4ea2:	b913      	cbnz	r3, 4eaa <idle+0x26>
	arch_cpu_idle();
    4ea4:	f7fd fb38 	bl	2518 <arch_cpu_idle>
}
    4ea8:	e7ef      	b.n	4e8a <idle+0x6>
    4eaa:	f7fd f975 	bl	2198 <pm_system_suspend>
    4eae:	2800      	cmp	r0, #0
    4eb0:	d1eb      	bne.n	4e8a <idle+0x6>
    4eb2:	e7f7      	b.n	4ea4 <idle+0x20>
    4eb4:	20000f30 	.word	0x20000f30
    4eb8:	20001576 	.word	0x20001576

00004ebc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4ebc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4ec0:	4604      	mov	r4, r0
    4ec2:	4617      	mov	r7, r2
    4ec4:	461e      	mov	r6, r3
    4ec6:	f04f 0320 	mov.w	r3, #32
    4eca:	f3ef 8811 	mrs	r8, BASEPRI
    4ece:	f383 8812 	msr	BASEPRI_MAX, r3
    4ed2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4ed6:	68c3      	ldr	r3, [r0, #12]
    4ed8:	4a33      	ldr	r2, [pc, #204]	; (4fa8 <z_impl_k_mutex_lock+0xec>)
    4eda:	b17b      	cbz	r3, 4efc <z_impl_k_mutex_lock+0x40>
    4edc:	6880      	ldr	r0, [r0, #8]
    4ede:	6891      	ldr	r1, [r2, #8]
    4ee0:	4288      	cmp	r0, r1
    4ee2:	d019      	beq.n	4f18 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4ee4:	ea57 0306 	orrs.w	r3, r7, r6
    4ee8:	d118      	bne.n	4f1c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4eea:	f388 8811 	msr	BASEPRI, r8
    4eee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4ef2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4ef6:	b002      	add	sp, #8
    4ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4efc:	6891      	ldr	r1, [r2, #8]
    4efe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4f02:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4f04:	3301      	adds	r3, #1
    4f06:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4f08:	6893      	ldr	r3, [r2, #8]
    4f0a:	60a3      	str	r3, [r4, #8]
    4f0c:	f388 8811 	msr	BASEPRI, r8
    4f10:	f3bf 8f6f 	isb	sy
		return 0;
    4f14:	2000      	movs	r0, #0
    4f16:	e7ee      	b.n	4ef6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    4f18:	6921      	ldr	r1, [r4, #16]
    4f1a:	e7f2      	b.n	4f02 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4f1c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4f20:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    4f24:	4299      	cmp	r1, r3
    4f26:	bfa8      	it	ge
    4f28:	4619      	movge	r1, r3
    4f2a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4f2e:	4291      	cmp	r1, r2
    4f30:	bfb8      	it	lt
    4f32:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4f34:	428b      	cmp	r3, r1
    4f36:	dd2e      	ble.n	4f96 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    4f38:	f001 ff50 	bl	6ddc <adjust_owner_prio.isra.0>
    4f3c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4f3e:	e9cd 7600 	strd	r7, r6, [sp]
    4f42:	481a      	ldr	r0, [pc, #104]	; (4fac <z_impl_k_mutex_lock+0xf0>)
    4f44:	4622      	mov	r2, r4
    4f46:	4641      	mov	r1, r8
    4f48:	f000 f9fa 	bl	5340 <z_pend_curr>
	if (got_mutex == 0) {
    4f4c:	2800      	cmp	r0, #0
    4f4e:	d0e1      	beq.n	4f14 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    4f50:	f04f 0320 	mov.w	r3, #32
    4f54:	f3ef 8611 	mrs	r6, BASEPRI
    4f58:	f383 8812 	msr	BASEPRI_MAX, r3
    4f5c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    4f60:	68a0      	ldr	r0, [r4, #8]
    4f62:	b1d0      	cbz	r0, 4f9a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4f64:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4f66:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f68:	429c      	cmp	r4, r3
    4f6a:	d00a      	beq.n	4f82 <z_impl_k_mutex_lock+0xc6>
    4f6c:	b14b      	cbz	r3, 4f82 <z_impl_k_mutex_lock+0xc6>
    4f6e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4f72:	4299      	cmp	r1, r3
    4f74:	bfa8      	it	ge
    4f76:	4619      	movge	r1, r3
    4f78:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4f7c:	4299      	cmp	r1, r3
    4f7e:	bfb8      	it	lt
    4f80:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    4f82:	f001 ff2b 	bl	6ddc <adjust_owner_prio.isra.0>
    4f86:	b140      	cbz	r0, 4f9a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    4f88:	4808      	ldr	r0, [pc, #32]	; (4fac <z_impl_k_mutex_lock+0xf0>)
    4f8a:	4631      	mov	r1, r6
    4f8c:	f000 fa3c 	bl	5408 <z_reschedule>
	return -EAGAIN;
    4f90:	f06f 000a 	mvn.w	r0, #10
    4f94:	e7af      	b.n	4ef6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    4f96:	2500      	movs	r5, #0
    4f98:	e7d1      	b.n	4f3e <z_impl_k_mutex_lock+0x82>
	if (resched) {
    4f9a:	2d00      	cmp	r5, #0
    4f9c:	d1f4      	bne.n	4f88 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    4f9e:	f386 8811 	msr	BASEPRI, r6
    4fa2:	f3bf 8f6f 	isb	sy
    4fa6:	e7f3      	b.n	4f90 <z_impl_k_mutex_lock+0xd4>
    4fa8:	20000f30 	.word	0x20000f30
    4fac:	20001577 	.word	0x20001577

00004fb0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4fb0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4fb2:	6883      	ldr	r3, [r0, #8]
{
    4fb4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4fb6:	b36b      	cbz	r3, 5014 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4fb8:	4a19      	ldr	r2, [pc, #100]	; (5020 <z_impl_k_mutex_unlock+0x70>)
    4fba:	6892      	ldr	r2, [r2, #8]
    4fbc:	4293      	cmp	r3, r2
    4fbe:	d12c      	bne.n	501a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4fc0:	68c3      	ldr	r3, [r0, #12]
    4fc2:	2b01      	cmp	r3, #1
    4fc4:	d903      	bls.n	4fce <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    4fc6:	3b01      	subs	r3, #1
    4fc8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    4fca:	2000      	movs	r0, #0
}
    4fcc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4fce:	f04f 0320 	mov.w	r3, #32
    4fd2:	f3ef 8511 	mrs	r5, BASEPRI
    4fd6:	f383 8812 	msr	BASEPRI_MAX, r3
    4fda:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4fde:	6901      	ldr	r1, [r0, #16]
    4fe0:	6880      	ldr	r0, [r0, #8]
    4fe2:	f001 fefb 	bl	6ddc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4fe6:	4620      	mov	r0, r4
    4fe8:	f001 ffa6 	bl	6f38 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4fec:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4fee:	b158      	cbz	r0, 5008 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    4ff0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4ff4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4ff6:	2200      	movs	r2, #0
    4ff8:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4ffa:	f001 ff66 	bl	6eca <z_ready_thread>
		z_reschedule(&lock, key);
    4ffe:	4809      	ldr	r0, [pc, #36]	; (5024 <z_impl_k_mutex_unlock+0x74>)
    5000:	4629      	mov	r1, r5
    5002:	f000 fa01 	bl	5408 <z_reschedule>
    5006:	e7e0      	b.n	4fca <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5008:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    500a:	f385 8811 	msr	BASEPRI, r5
    500e:	f3bf 8f6f 	isb	sy
    5012:	e7da      	b.n	4fca <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    5014:	f06f 0015 	mvn.w	r0, #21
    5018:	e7d8      	b.n	4fcc <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    501a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    501e:	e7d5      	b.n	4fcc <z_impl_k_mutex_unlock+0x1c>
    5020:	20000f30 	.word	0x20000f30
    5024:	20001577 	.word	0x20001577

00005028 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5028:	b538      	push	{r3, r4, r5, lr}
    502a:	4604      	mov	r4, r0
	__asm__ volatile(
    502c:	f04f 0320 	mov.w	r3, #32
    5030:	f3ef 8511 	mrs	r5, BASEPRI
    5034:	f383 8812 	msr	BASEPRI_MAX, r3
    5038:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    503c:	f001 ff7c 	bl	6f38 <z_unpend_first_thread>

	if (thread != NULL) {
    5040:	b148      	cbz	r0, 5056 <z_impl_k_sem_give+0x2e>
    5042:	2200      	movs	r2, #0
    5044:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5046:	f001 ff40 	bl	6eca <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    504a:	4629      	mov	r1, r5
    504c:	4805      	ldr	r0, [pc, #20]	; (5064 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    504e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5052:	f000 b9d9 	b.w	5408 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5056:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    505a:	429a      	cmp	r2, r3
    505c:	bf18      	it	ne
    505e:	3301      	addne	r3, #1
    5060:	60a3      	str	r3, [r4, #8]
}
    5062:	e7f2      	b.n	504a <z_impl_k_sem_give+0x22>
    5064:	20001577 	.word	0x20001577

00005068 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5068:	b513      	push	{r0, r1, r4, lr}
    506a:	f04f 0420 	mov.w	r4, #32
    506e:	f3ef 8111 	mrs	r1, BASEPRI
    5072:	f384 8812 	msr	BASEPRI_MAX, r4
    5076:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    507a:	6884      	ldr	r4, [r0, #8]
    507c:	b144      	cbz	r4, 5090 <z_impl_k_sem_take+0x28>
		sem->count--;
    507e:	3c01      	subs	r4, #1
    5080:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    5082:	f381 8811 	msr	BASEPRI, r1
    5086:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    508a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    508c:	b002      	add	sp, #8
    508e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5090:	ea52 0403 	orrs.w	r4, r2, r3
    5094:	d106      	bne.n	50a4 <z_impl_k_sem_take+0x3c>
    5096:	f381 8811 	msr	BASEPRI, r1
    509a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    509e:	f06f 000f 	mvn.w	r0, #15
    50a2:	e7f3      	b.n	508c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    50a4:	e9cd 2300 	strd	r2, r3, [sp]
    50a8:	4602      	mov	r2, r0
    50aa:	4802      	ldr	r0, [pc, #8]	; (50b4 <z_impl_k_sem_take+0x4c>)
    50ac:	f000 f948 	bl	5340 <z_pend_curr>
	return ret;
    50b0:	e7ec      	b.n	508c <z_impl_k_sem_take+0x24>
    50b2:	bf00      	nop
    50b4:	20001577 	.word	0x20001577

000050b8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    50b8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    50ba:	4d07      	ldr	r5, [pc, #28]	; (50d8 <z_reset_time_slice+0x20>)
    50bc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    50be:	b154      	cbz	r4, 50d6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    50c0:	f7fe ff8c 	bl	3fdc <sys_clock_elapsed>
    50c4:	4b05      	ldr	r3, [pc, #20]	; (50dc <z_reset_time_slice+0x24>)
    50c6:	4404      	add	r4, r0
    50c8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    50ca:	6828      	ldr	r0, [r5, #0]
    50cc:	2100      	movs	r1, #0
	}
}
    50ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    50d2:	f001 bf89 	b.w	6fe8 <z_set_timeout_expiry>
}
    50d6:	bd38      	pop	{r3, r4, r5, pc}
    50d8:	20000f60 	.word	0x20000f60
    50dc:	20000f30 	.word	0x20000f30

000050e0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    50e0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    50e2:	4d0d      	ldr	r5, [pc, #52]	; (5118 <update_cache+0x38>)
    50e4:	462b      	mov	r3, r5
    50e6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50ea:	429c      	cmp	r4, r3
    50ec:	d000      	beq.n	50f0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    50ee:	b904      	cbnz	r4, 50f2 <update_cache+0x12>
    50f0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    50f2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    50f4:	b938      	cbnz	r0, 5106 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    50f6:	7b5a      	ldrb	r2, [r3, #13]
    50f8:	06d2      	lsls	r2, r2, #27
    50fa:	d104      	bne.n	5106 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    50fc:	69a2      	ldr	r2, [r4, #24]
    50fe:	b912      	cbnz	r2, 5106 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5100:	89da      	ldrh	r2, [r3, #14]
    5102:	2a7f      	cmp	r2, #127	; 0x7f
    5104:	d805      	bhi.n	5112 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5106:	429c      	cmp	r4, r3
    5108:	d002      	beq.n	5110 <update_cache+0x30>
			z_reset_time_slice(thread);
    510a:	4620      	mov	r0, r4
    510c:	f7ff ffd4 	bl	50b8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5110:	4623      	mov	r3, r4
    5112:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5114:	bd38      	pop	{r3, r4, r5, pc}
    5116:	bf00      	nop
    5118:	20000f30 	.word	0x20000f30

0000511c <move_thread_to_end_of_prio_q>:
{
    511c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    511e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5122:	7b43      	ldrb	r3, [r0, #13]
    5124:	2a00      	cmp	r2, #0
{
    5126:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5128:	da04      	bge.n	5134 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    512a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    512e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5130:	f001 fe6f 	bl	6e12 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5134:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5136:	4a15      	ldr	r2, [pc, #84]	; (518c <move_thread_to_end_of_prio_q+0x70>)
    5138:	f063 037f 	orn	r3, r3, #127	; 0x7f
    513c:	4610      	mov	r0, r2
    513e:	734b      	strb	r3, [r1, #13]
    5140:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5144:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5146:	4283      	cmp	r3, r0
    5148:	bf08      	it	eq
    514a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    514c:	b923      	cbnz	r3, 5158 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    514e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    5152:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5154:	6251      	str	r1, [r2, #36]	; 0x24
}
    5156:	e00c      	b.n	5172 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    5158:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    515c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5160:	42b5      	cmp	r5, r6
    5162:	d00e      	beq.n	5182 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5164:	42ae      	cmp	r6, r5
    5166:	dd0c      	ble.n	5182 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5168:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    516a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    516e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5170:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5172:	6890      	ldr	r0, [r2, #8]
    5174:	1a43      	subs	r3, r0, r1
    5176:	4258      	negs	r0, r3
}
    5178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    517c:	4158      	adcs	r0, r3
    517e:	f7ff bfaf 	b.w	50e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5182:	429c      	cmp	r4, r3
    5184:	d0e3      	beq.n	514e <move_thread_to_end_of_prio_q+0x32>
    5186:	681b      	ldr	r3, [r3, #0]
    5188:	e7e0      	b.n	514c <move_thread_to_end_of_prio_q+0x30>
    518a:	bf00      	nop
    518c:	20000f30 	.word	0x20000f30

00005190 <ready_thread>:
{
    5190:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5192:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5196:	7b42      	ldrb	r2, [r0, #13]
    5198:	2b00      	cmp	r3, #0
    519a:	db29      	blt.n	51f0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    519c:	06d3      	lsls	r3, r2, #27
    519e:	d127      	bne.n	51f0 <ready_thread+0x60>
	return node->next != NULL;
    51a0:	6983      	ldr	r3, [r0, #24]
    51a2:	bb2b      	cbnz	r3, 51f0 <ready_thread+0x60>
	return list->head == list;
    51a4:	4913      	ldr	r1, [pc, #76]	; (51f4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    51a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    51aa:	7342      	strb	r2, [r0, #13]
    51ac:	460a      	mov	r2, r1
    51ae:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51b2:	4294      	cmp	r4, r2
    51b4:	bf18      	it	ne
    51b6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    51b8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    51ba:	b923      	cbnz	r3, 51c6 <ready_thread+0x36>
	node->prev = tail;
    51bc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    51c0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    51c2:	6248      	str	r0, [r1, #36]	; 0x24
}
    51c4:	e00c      	b.n	51e0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    51c6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    51ca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    51ce:	42b5      	cmp	r5, r6
    51d0:	d00a      	beq.n	51e8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    51d2:	42ae      	cmp	r6, r5
    51d4:	dd08      	ble.n	51e8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    51d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    51d8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    51dc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    51de:	6058      	str	r0, [r3, #4]
}
    51e0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    51e2:	2000      	movs	r0, #0
    51e4:	f7ff bf7c 	b.w	50e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    51e8:	42a3      	cmp	r3, r4
    51ea:	d0e7      	beq.n	51bc <ready_thread+0x2c>
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	e7e4      	b.n	51ba <ready_thread+0x2a>
}
    51f0:	bc70      	pop	{r4, r5, r6}
    51f2:	4770      	bx	lr
    51f4:	20000f30 	.word	0x20000f30

000051f8 <unready_thread>:
{
    51f8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    51fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    51fe:	7b43      	ldrb	r3, [r0, #13]
    5200:	2a00      	cmp	r2, #0
{
    5202:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5204:	da04      	bge.n	5210 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    520a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    520c:	f001 fe01 	bl	6e12 <sys_dlist_remove>
	update_cache(thread == _current);
    5210:	4b04      	ldr	r3, [pc, #16]	; (5224 <unready_thread+0x2c>)
    5212:	6898      	ldr	r0, [r3, #8]
    5214:	1a43      	subs	r3, r0, r1
    5216:	4258      	negs	r0, r3
    5218:	4158      	adcs	r0, r3
}
    521a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    521e:	f7ff bf5f 	b.w	50e0 <update_cache>
    5222:	bf00      	nop
    5224:	20000f30 	.word	0x20000f30

00005228 <pend_locked>:
{
    5228:	b570      	push	{r4, r5, r6, lr}
    522a:	4615      	mov	r5, r2
    522c:	461c      	mov	r4, r3
    522e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5230:	f001 fe23 	bl	6e7a <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5234:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5238:	bf08      	it	eq
    523a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    523e:	d008      	beq.n	5252 <pend_locked+0x2a>
    5240:	462a      	mov	r2, r5
    5242:	4623      	mov	r3, r4
    5244:	f106 0018 	add.w	r0, r6, #24
    5248:	4902      	ldr	r1, [pc, #8]	; (5254 <pend_locked+0x2c>)
}
    524a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    524e:	f000 bae3 	b.w	5818 <z_add_timeout>
    5252:	bd70      	pop	{r4, r5, r6, pc}
    5254:	00006e37 	.word	0x00006e37

00005258 <k_sched_time_slice_set>:
{
    5258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    525a:	4604      	mov	r4, r0
    525c:	460d      	mov	r5, r1
	__asm__ volatile(
    525e:	f04f 0320 	mov.w	r3, #32
    5262:	f3ef 8711 	mrs	r7, BASEPRI
    5266:	f383 8812 	msr	BASEPRI_MAX, r3
    526a:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    526e:	2600      	movs	r6, #0
    5270:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5274:	f240 30e7 	movw	r0, #999	; 0x3e7
    5278:	4631      	mov	r1, r6
    527a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    527e:	2300      	movs	r3, #0
    5280:	fbe4 010c 	umlal	r0, r1, r4, ip
    5284:	f7fa ff3c 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5288:	42b4      	cmp	r4, r6
    528a:	dd02      	ble.n	5292 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    528c:	2802      	cmp	r0, #2
    528e:	bfb8      	it	lt
    5290:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    5292:	4a07      	ldr	r2, [pc, #28]	; (52b0 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    5294:	4b07      	ldr	r3, [pc, #28]	; (52b4 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    5296:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    5298:	4a07      	ldr	r2, [pc, #28]	; (52b8 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    529a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    529c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    529e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    52a0:	f7ff ff0a 	bl	50b8 <z_reset_time_slice>
	__asm__ volatile(
    52a4:	f387 8811 	msr	BASEPRI, r7
    52a8:	f3bf 8f6f 	isb	sy
}
    52ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52ae:	bf00      	nop
    52b0:	20000f60 	.word	0x20000f60
    52b4:	20000f30 	.word	0x20000f30
    52b8:	20000f5c 	.word	0x20000f5c

000052bc <z_time_slice>:
{
    52bc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    52be:	f04f 0320 	mov.w	r3, #32
    52c2:	f3ef 8511 	mrs	r5, BASEPRI
    52c6:	f383 8812 	msr	BASEPRI_MAX, r3
    52ca:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    52ce:	4b17      	ldr	r3, [pc, #92]	; (532c <z_time_slice+0x70>)
    52d0:	4a17      	ldr	r2, [pc, #92]	; (5330 <z_time_slice+0x74>)
    52d2:	689c      	ldr	r4, [r3, #8]
    52d4:	6811      	ldr	r1, [r2, #0]
    52d6:	428c      	cmp	r4, r1
    52d8:	d107      	bne.n	52ea <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    52da:	4620      	mov	r0, r4
    52dc:	f7ff feec 	bl	50b8 <z_reset_time_slice>
	__asm__ volatile(
    52e0:	f385 8811 	msr	BASEPRI, r5
    52e4:	f3bf 8f6f 	isb	sy
}
    52e8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    52ea:	2100      	movs	r1, #0
    52ec:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    52ee:	4a11      	ldr	r2, [pc, #68]	; (5334 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    52f0:	6812      	ldr	r2, [r2, #0]
    52f2:	b1c2      	cbz	r2, 5326 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    52f4:	89e2      	ldrh	r2, [r4, #14]
    52f6:	2a7f      	cmp	r2, #127	; 0x7f
    52f8:	d815      	bhi.n	5326 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    52fa:	7b62      	ldrb	r2, [r4, #13]
    52fc:	06d2      	lsls	r2, r2, #27
    52fe:	d112      	bne.n	5326 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5300:	4a0d      	ldr	r2, [pc, #52]	; (5338 <z_time_slice+0x7c>)
    5302:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5306:	6812      	ldr	r2, [r2, #0]
    5308:	4291      	cmp	r1, r2
    530a:	db0c      	blt.n	5326 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    530c:	4a0b      	ldr	r2, [pc, #44]	; (533c <z_time_slice+0x80>)
    530e:	4294      	cmp	r4, r2
    5310:	d009      	beq.n	5326 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5312:	691a      	ldr	r2, [r3, #16]
    5314:	4282      	cmp	r2, r0
    5316:	dc03      	bgt.n	5320 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5318:	4620      	mov	r0, r4
    531a:	f7ff feff 	bl	511c <move_thread_to_end_of_prio_q>
    531e:	e7dc      	b.n	52da <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5320:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5322:	611a      	str	r2, [r3, #16]
    5324:	e7dc      	b.n	52e0 <z_time_slice+0x24>
    5326:	2200      	movs	r2, #0
    5328:	e7fb      	b.n	5322 <z_time_slice+0x66>
    532a:	bf00      	nop
    532c:	20000f30 	.word	0x20000f30
    5330:	20000f58 	.word	0x20000f58
    5334:	20000f60 	.word	0x20000f60
    5338:	20000f5c 	.word	0x20000f5c
    533c:	20000708 	.word	0x20000708

00005340 <z_pend_curr>:
{
    5340:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    5342:	480c      	ldr	r0, [pc, #48]	; (5374 <z_pend_curr+0x34>)
    5344:	4d0c      	ldr	r5, [pc, #48]	; (5378 <z_pend_curr+0x38>)
    5346:	6886      	ldr	r6, [r0, #8]
    5348:	602e      	str	r6, [r5, #0]
{
    534a:	460c      	mov	r4, r1
    534c:	4611      	mov	r1, r2
    534e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    5352:	f04f 0620 	mov.w	r6, #32
    5356:	f3ef 8511 	mrs	r5, BASEPRI
    535a:	f386 8812 	msr	BASEPRI_MAX, r6
    535e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    5362:	6880      	ldr	r0, [r0, #8]
    5364:	f7ff ff60 	bl	5228 <pend_locked>
	ret = arch_swap(key);
    5368:	4620      	mov	r0, r4
}
    536a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    536e:	f7fd b9b9 	b.w	26e4 <arch_swap>
    5372:	bf00      	nop
    5374:	20000f30 	.word	0x20000f30
    5378:	20000f58 	.word	0x20000f58

0000537c <z_set_prio>:
{
    537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    537e:	4604      	mov	r4, r0
    5380:	f04f 0320 	mov.w	r3, #32
    5384:	f3ef 8611 	mrs	r6, BASEPRI
    5388:	f383 8812 	msr	BASEPRI_MAX, r3
    538c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5390:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5392:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5394:	b249      	sxtb	r1, r1
    5396:	d119      	bne.n	53cc <z_set_prio+0x50>
	return node->next != NULL;
    5398:	6985      	ldr	r5, [r0, #24]
    539a:	b9bd      	cbnz	r5, 53cc <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    539c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    53a0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    53a2:	f001 fd36 	bl	6e12 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    53a6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    53a8:	4a16      	ldr	r2, [pc, #88]	; (5404 <z_set_prio+0x88>)
				thread->base.prio = prio;
    53aa:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    53ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    53b0:	7343      	strb	r3, [r0, #13]
    53b2:	4613      	mov	r3, r2
    53b4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53b8:	4298      	cmp	r0, r3
    53ba:	bf18      	it	ne
    53bc:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    53be:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53c0:	b95d      	cbnz	r5, 53da <z_set_prio+0x5e>
	node->prev = tail;
    53c2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    53c6:	6004      	str	r4, [r0, #0]
	list->tail = node;
    53c8:	6254      	str	r4, [r2, #36]	; 0x24
}
    53ca:	e011      	b.n	53f0 <z_set_prio+0x74>
			thread->base.prio = prio;
    53cc:	73a1      	strb	r1, [r4, #14]
    53ce:	2000      	movs	r0, #0
	__asm__ volatile(
    53d0:	f386 8811 	msr	BASEPRI, r6
    53d4:	f3bf 8f6f 	isb	sy
}
    53d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    53da:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    53de:	42b9      	cmp	r1, r7
    53e0:	d00b      	beq.n	53fa <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    53e2:	428f      	cmp	r7, r1
    53e4:	dd09      	ble.n	53fa <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    53e6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    53e8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    53ec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    53ee:	606c      	str	r4, [r5, #4]
			update_cache(1);
    53f0:	2001      	movs	r0, #1
    53f2:	f7ff fe75 	bl	50e0 <update_cache>
    53f6:	2001      	movs	r0, #1
    53f8:	e7ea      	b.n	53d0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    53fa:	42a8      	cmp	r0, r5
    53fc:	d0e1      	beq.n	53c2 <z_set_prio+0x46>
    53fe:	682d      	ldr	r5, [r5, #0]
    5400:	e7de      	b.n	53c0 <z_set_prio+0x44>
    5402:	bf00      	nop
    5404:	20000f30 	.word	0x20000f30

00005408 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5408:	b949      	cbnz	r1, 541e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    540a:	f3ef 8005 	mrs	r0, IPSR
    540e:	b930      	cbnz	r0, 541e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5410:	4b05      	ldr	r3, [pc, #20]	; (5428 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5412:	69da      	ldr	r2, [r3, #28]
    5414:	689b      	ldr	r3, [r3, #8]
    5416:	429a      	cmp	r2, r3
    5418:	d001      	beq.n	541e <z_reschedule+0x16>
    541a:	f7fd b963 	b.w	26e4 <arch_swap>
    541e:	f381 8811 	msr	BASEPRI, r1
    5422:	f3bf 8f6f 	isb	sy
}
    5426:	4770      	bx	lr
    5428:	20000f30 	.word	0x20000f30

0000542c <z_sched_start>:
{
    542c:	b510      	push	{r4, lr}
	__asm__ volatile(
    542e:	f04f 0220 	mov.w	r2, #32
    5432:	f3ef 8411 	mrs	r4, BASEPRI
    5436:	f382 8812 	msr	BASEPRI_MAX, r2
    543a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    543e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5440:	0751      	lsls	r1, r2, #29
    5442:	d404      	bmi.n	544e <z_sched_start+0x22>
	__asm__ volatile(
    5444:	f384 8811 	msr	BASEPRI, r4
    5448:	f3bf 8f6f 	isb	sy
}
    544c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    544e:	f022 0204 	bic.w	r2, r2, #4
    5452:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5454:	f7ff fe9c 	bl	5190 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5458:	4621      	mov	r1, r4
    545a:	4802      	ldr	r0, [pc, #8]	; (5464 <z_sched_start+0x38>)
}
    545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5460:	f7ff bfd2 	b.w	5408 <z_reschedule>
    5464:	20001577 	.word	0x20001577

00005468 <z_impl_k_thread_suspend>:
{
    5468:	b570      	push	{r4, r5, r6, lr}
    546a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    546c:	3018      	adds	r0, #24
    546e:	f001 fd95 	bl	6f9c <z_abort_timeout>
	__asm__ volatile(
    5472:	f04f 0320 	mov.w	r3, #32
    5476:	f3ef 8611 	mrs	r6, BASEPRI
    547a:	f383 8812 	msr	BASEPRI_MAX, r3
    547e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5482:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5486:	7b63      	ldrb	r3, [r4, #13]
    5488:	2a00      	cmp	r2, #0
    548a:	da05      	bge.n	5498 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    548c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5490:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5492:	4620      	mov	r0, r4
    5494:	f001 fcbd 	bl	6e12 <sys_dlist_remove>
		update_cache(thread == _current);
    5498:	4d0b      	ldr	r5, [pc, #44]	; (54c8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    549a:	7b63      	ldrb	r3, [r4, #13]
    549c:	68a8      	ldr	r0, [r5, #8]
    549e:	f043 0310 	orr.w	r3, r3, #16
    54a2:	7363      	strb	r3, [r4, #13]
    54a4:	1b03      	subs	r3, r0, r4
    54a6:	4258      	negs	r0, r3
    54a8:	4158      	adcs	r0, r3
    54aa:	f7ff fe19 	bl	50e0 <update_cache>
	__asm__ volatile(
    54ae:	f386 8811 	msr	BASEPRI, r6
    54b2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    54b6:	68ab      	ldr	r3, [r5, #8]
    54b8:	42a3      	cmp	r3, r4
    54ba:	d103      	bne.n	54c4 <z_impl_k_thread_suspend+0x5c>
}
    54bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    54c0:	f001 bd62 	b.w	6f88 <z_reschedule_unlocked>
}
    54c4:	bd70      	pop	{r4, r5, r6, pc}
    54c6:	bf00      	nop
    54c8:	20000f30 	.word	0x20000f30

000054cc <k_sched_lock>:
	__asm__ volatile(
    54cc:	f04f 0320 	mov.w	r3, #32
    54d0:	f3ef 8111 	mrs	r1, BASEPRI
    54d4:	f383 8812 	msr	BASEPRI_MAX, r3
    54d8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    54dc:	4b04      	ldr	r3, [pc, #16]	; (54f0 <k_sched_lock+0x24>)
    54de:	689a      	ldr	r2, [r3, #8]
    54e0:	7bd3      	ldrb	r3, [r2, #15]
    54e2:	3b01      	subs	r3, #1
    54e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    54e6:	f381 8811 	msr	BASEPRI, r1
    54ea:	f3bf 8f6f 	isb	sy
}
    54ee:	4770      	bx	lr
    54f0:	20000f30 	.word	0x20000f30

000054f4 <k_sched_unlock>:
{
    54f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    54f6:	f04f 0320 	mov.w	r3, #32
    54fa:	f3ef 8411 	mrs	r4, BASEPRI
    54fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5502:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5506:	4b08      	ldr	r3, [pc, #32]	; (5528 <k_sched_unlock+0x34>)
    5508:	689a      	ldr	r2, [r3, #8]
    550a:	7bd3      	ldrb	r3, [r2, #15]
    550c:	3301      	adds	r3, #1
    550e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5510:	2000      	movs	r0, #0
    5512:	f7ff fde5 	bl	50e0 <update_cache>
	__asm__ volatile(
    5516:	f384 8811 	msr	BASEPRI, r4
    551a:	f3bf 8f6f 	isb	sy
}
    551e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5522:	f001 bd31 	b.w	6f88 <z_reschedule_unlocked>
    5526:	bf00      	nop
    5528:	20000f30 	.word	0x20000f30

0000552c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    552c:	4b04      	ldr	r3, [pc, #16]	; (5540 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    552e:	2100      	movs	r1, #0
    5530:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5534:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5538:	4608      	mov	r0, r1
    553a:	f7ff be8d 	b.w	5258 <k_sched_time_slice_set>
    553e:	bf00      	nop
    5540:	20000f30 	.word	0x20000f30

00005544 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5546:	f04f 0320 	mov.w	r3, #32
    554a:	f3ef 8511 	mrs	r5, BASEPRI
    554e:	f383 8812 	msr	BASEPRI_MAX, r3
    5552:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5556:	4919      	ldr	r1, [pc, #100]	; (55bc <z_impl_k_yield+0x78>)
    5558:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    555a:	7b43      	ldrb	r3, [r0, #13]
    555c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5560:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5562:	f001 fc56 	bl	6e12 <sys_dlist_remove>
	}
	queue_thread(_current);
    5566:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5568:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    556a:	4608      	mov	r0, r1
    556c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5570:	735a      	strb	r2, [r3, #13]
    5572:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    5576:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5578:	4282      	cmp	r2, r0
    557a:	bf08      	it	eq
    557c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    557e:	b922      	cbnz	r2, 558a <z_impl_k_yield+0x46>
	node->prev = tail;
    5580:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    5584:	6023      	str	r3, [r4, #0]
	list->tail = node;
    5586:	624b      	str	r3, [r1, #36]	; 0x24
}
    5588:	e00c      	b.n	55a4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    558a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    558e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    5592:	42be      	cmp	r6, r7
    5594:	d00e      	beq.n	55b4 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5596:	42b7      	cmp	r7, r6
    5598:	dd0c      	ble.n	55b4 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    559a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    559c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    55a0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    55a2:	6053      	str	r3, [r2, #4]
	update_cache(1);
    55a4:	2001      	movs	r0, #1
    55a6:	f7ff fd9b 	bl	50e0 <update_cache>
    55aa:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    55ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    55b0:	f7fd b898 	b.w	26e4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    55b4:	42a2      	cmp	r2, r4
    55b6:	d0e3      	beq.n	5580 <z_impl_k_yield+0x3c>
    55b8:	6812      	ldr	r2, [r2, #0]
    55ba:	e7e0      	b.n	557e <z_impl_k_yield+0x3a>
    55bc:	20000f30 	.word	0x20000f30

000055c0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    55c0:	ea50 0301 	orrs.w	r3, r0, r1
{
    55c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55c8:	4605      	mov	r5, r0
    55ca:	460e      	mov	r6, r1
	if (ticks == 0) {
    55cc:	d103      	bne.n	55d6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    55ce:	f7ff ffb9 	bl	5544 <z_impl_k_yield>
		k_yield();
		return 0;
    55d2:	2000      	movs	r0, #0
    55d4:	e02c      	b.n	5630 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    55d6:	1c83      	adds	r3, r0, #2
    55d8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    55dc:	db2a      	blt.n	5634 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    55de:	f001 fd1f 	bl	7020 <sys_clock_tick_get_32>
    55e2:	1944      	adds	r4, r0, r5
    55e4:	f04f 0320 	mov.w	r3, #32
    55e8:	f3ef 8811 	mrs	r8, BASEPRI
    55ec:	f383 8812 	msr	BASEPRI_MAX, r3
    55f0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    55f4:	4f11      	ldr	r7, [pc, #68]	; (563c <z_tick_sleep+0x7c>)
    55f6:	4b12      	ldr	r3, [pc, #72]	; (5640 <z_tick_sleep+0x80>)
    55f8:	68b8      	ldr	r0, [r7, #8]
    55fa:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    55fc:	f7ff fdfc 	bl	51f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5600:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5602:	4910      	ldr	r1, [pc, #64]	; (5644 <z_tick_sleep+0x84>)
    5604:	462a      	mov	r2, r5
    5606:	4633      	mov	r3, r6
    5608:	3018      	adds	r0, #24
    560a:	f000 f905 	bl	5818 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    560e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5610:	7b53      	ldrb	r3, [r2, #13]
    5612:	f043 0310 	orr.w	r3, r3, #16
    5616:	7353      	strb	r3, [r2, #13]
    5618:	4640      	mov	r0, r8
    561a:	f7fd f863 	bl	26e4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    561e:	f001 fcff 	bl	7020 <sys_clock_tick_get_32>
    5622:	1a20      	subs	r0, r4, r0
    5624:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5628:	2801      	cmp	r0, #1
    562a:	f173 0300 	sbcs.w	r3, r3, #0
    562e:	dbd0      	blt.n	55d2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    5630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5634:	f06f 0401 	mvn.w	r4, #1
    5638:	1a24      	subs	r4, r4, r0
    563a:	e7d3      	b.n	55e4 <z_tick_sleep+0x24>
    563c:	20000f30 	.word	0x20000f30
    5640:	20000f58 	.word	0x20000f58
    5644:	00006e37 	.word	0x00006e37

00005648 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5648:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    564c:	bf08      	it	eq
    564e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    5652:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5654:	d106      	bne.n	5664 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5656:	4b08      	ldr	r3, [pc, #32]	; (5678 <z_impl_k_sleep+0x30>)
    5658:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    565a:	f7ff ff05 	bl	5468 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    565e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5662:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5664:	f7ff ffac 	bl	55c0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    566c:	fb80 0303 	smull	r0, r3, r0, r3
    5670:	0bc0      	lsrs	r0, r0, #15
    5672:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5676:	e7f4      	b.n	5662 <z_impl_k_sleep+0x1a>
    5678:	20000f30 	.word	0x20000f30

0000567c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    567c:	4b01      	ldr	r3, [pc, #4]	; (5684 <z_impl_z_current_get+0x8>)
    567e:	6898      	ldr	r0, [r3, #8]
    5680:	4770      	bx	lr
    5682:	bf00      	nop
    5684:	20000f30 	.word	0x20000f30

00005688 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    568c:	4604      	mov	r4, r0
    568e:	f04f 0320 	mov.w	r3, #32
    5692:	f3ef 8611 	mrs	r6, BASEPRI
    5696:	f383 8812 	msr	BASEPRI_MAX, r3
    569a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    569e:	7b03      	ldrb	r3, [r0, #12]
    56a0:	07d9      	lsls	r1, r3, #31
    56a2:	d50b      	bpl.n	56bc <z_thread_abort+0x34>
	__asm__ volatile(
    56a4:	f386 8811 	msr	BASEPRI, r6
    56a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    56ac:	4040      	eors	r0, r0
    56ae:	f380 8811 	msr	BASEPRI, r0
    56b2:	f04f 0004 	mov.w	r0, #4
    56b6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    56b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    56bc:	7b43      	ldrb	r3, [r0, #13]
    56be:	071a      	lsls	r2, r3, #28
    56c0:	d504      	bpl.n	56cc <z_thread_abort+0x44>
    56c2:	f386 8811 	msr	BASEPRI, r6
    56c6:	f3bf 8f6f 	isb	sy
    56ca:	e7f5      	b.n	56b8 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    56cc:	f023 0220 	bic.w	r2, r3, #32
    56d0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    56d4:	09d2      	lsrs	r2, r2, #7
    56d6:	d120      	bne.n	571a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    56d8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    56da:	68a3      	ldr	r3, [r4, #8]
    56dc:	b113      	cbz	r3, 56e4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    56de:	4620      	mov	r0, r4
    56e0:	f001 fb9f 	bl	6e22 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    56e4:	f104 0018 	add.w	r0, r4, #24
    56e8:	f001 fc58 	bl	6f9c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    56ec:	f104 0758 	add.w	r7, r4, #88	; 0x58
    56f0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    56f4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56f6:	42bd      	cmp	r5, r7
    56f8:	d000      	beq.n	56fc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    56fa:	b9b5      	cbnz	r5, 572a <z_thread_abort+0xa2>
		update_cache(1);
    56fc:	2001      	movs	r0, #1
    56fe:	f7ff fcef 	bl	50e0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5702:	4b10      	ldr	r3, [pc, #64]	; (5744 <z_thread_abort+0xbc>)
    5704:	689b      	ldr	r3, [r3, #8]
    5706:	42a3      	cmp	r3, r4
    5708:	d1db      	bne.n	56c2 <z_thread_abort+0x3a>
    570a:	f3ef 8305 	mrs	r3, IPSR
    570e:	2b00      	cmp	r3, #0
    5710:	d1d7      	bne.n	56c2 <z_thread_abort+0x3a>
    5712:	4630      	mov	r0, r6
    5714:	f7fc ffe6 	bl	26e4 <arch_swap>
	return ret;
    5718:	e7d3      	b.n	56c2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    571a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    571e:	f043 0308 	orr.w	r3, r3, #8
    5722:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5724:	f001 fb75 	bl	6e12 <sys_dlist_remove>
}
    5728:	e7d7      	b.n	56da <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    572a:	4628      	mov	r0, r5
    572c:	f001 fb79 	bl	6e22 <unpend_thread_no_timeout>
    5730:	f105 0018 	add.w	r0, r5, #24
    5734:	f001 fc32 	bl	6f9c <z_abort_timeout>
    5738:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    573c:	4628      	mov	r0, r5
    573e:	f7ff fd27 	bl	5190 <ready_thread>
    5742:	e7d7      	b.n	56f4 <z_thread_abort+0x6c>
    5744:	20000f30 	.word	0x20000f30

00005748 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5748:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    574a:	4806      	ldr	r0, [pc, #24]	; (5764 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    574c:	4a06      	ldr	r2, [pc, #24]	; (5768 <z_data_copy+0x20>)
    574e:	4907      	ldr	r1, [pc, #28]	; (576c <z_data_copy+0x24>)
    5750:	1a12      	subs	r2, r2, r0
    5752:	f001 fae2 	bl	6d1a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    575a:	4a05      	ldr	r2, [pc, #20]	; (5770 <z_data_copy+0x28>)
    575c:	4905      	ldr	r1, [pc, #20]	; (5774 <z_data_copy+0x2c>)
    575e:	4806      	ldr	r0, [pc, #24]	; (5778 <z_data_copy+0x30>)
    5760:	f001 badb 	b.w	6d1a <z_early_memcpy>
    5764:	20000000 	.word	0x20000000
    5768:	20000228 	.word	0x20000228
    576c:	00008074 	.word	0x00008074
    5770:	00000000 	.word	0x00000000
    5774:	00008074 	.word	0x00008074
    5778:	20000000 	.word	0x20000000

0000577c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    577c:	4b03      	ldr	r3, [pc, #12]	; (578c <elapsed+0x10>)
    577e:	681b      	ldr	r3, [r3, #0]
    5780:	b90b      	cbnz	r3, 5786 <elapsed+0xa>
    5782:	f7fe bc2b 	b.w	3fdc <sys_clock_elapsed>
}
    5786:	2000      	movs	r0, #0
    5788:	4770      	bx	lr
    578a:	bf00      	nop
    578c:	20000f64 	.word	0x20000f64

00005790 <next_timeout>:

static int32_t next_timeout(void)
{
    5790:	b510      	push	{r4, lr}
	return list->head == list;
    5792:	4b11      	ldr	r3, [pc, #68]	; (57d8 <next_timeout+0x48>)
    5794:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5796:	429c      	cmp	r4, r3
    5798:	d10a      	bne.n	57b0 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    579a:	f7ff ffef 	bl	577c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    579e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    57a2:	4b0e      	ldr	r3, [pc, #56]	; (57dc <next_timeout+0x4c>)
    57a4:	691b      	ldr	r3, [r3, #16]
    57a6:	b113      	cbz	r3, 57ae <next_timeout+0x1e>
    57a8:	4298      	cmp	r0, r3
    57aa:	bfa8      	it	ge
    57ac:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    57ae:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    57b0:	f7ff ffe4 	bl	577c <elapsed>
	if ((to == NULL) ||
    57b4:	2c00      	cmp	r4, #0
    57b6:	d0f2      	beq.n	579e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    57b8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    57bc:	1a1b      	subs	r3, r3, r0
    57be:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    57c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    57c6:	f172 0100 	sbcs.w	r1, r2, #0
    57ca:	dae8      	bge.n	579e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    57cc:	2a00      	cmp	r2, #0
    57ce:	bfac      	ite	ge
    57d0:	4618      	movge	r0, r3
    57d2:	2000      	movlt	r0, #0
    57d4:	e7e5      	b.n	57a2 <next_timeout+0x12>
    57d6:	bf00      	nop
    57d8:	20000104 	.word	0x20000104
    57dc:	20000f30 	.word	0x20000f30

000057e0 <remove_timeout>:
{
    57e0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    57e2:	b170      	cbz	r0, 5802 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    57e4:	4b0b      	ldr	r3, [pc, #44]	; (5814 <remove_timeout+0x34>)
    57e6:	685b      	ldr	r3, [r3, #4]
    57e8:	4298      	cmp	r0, r3
    57ea:	d00a      	beq.n	5802 <remove_timeout+0x22>
    57ec:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    57ee:	b143      	cbz	r3, 5802 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    57f0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    57f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    57f8:	1912      	adds	r2, r2, r4
    57fa:	eb41 0105 	adc.w	r1, r1, r5
    57fe:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5802:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    5806:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5808:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    580a:	2300      	movs	r3, #0
	node->prev = NULL;
    580c:	e9c0 3300 	strd	r3, r3, [r0]
}
    5810:	bd30      	pop	{r4, r5, pc}
    5812:	bf00      	nop
    5814:	20000104 	.word	0x20000104

00005818 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    581c:	bf08      	it	eq
    581e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5824:	4604      	mov	r4, r0
    5826:	461d      	mov	r5, r3
    5828:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    582a:	d061      	beq.n	58f0 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    582c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    582e:	f04f 0320 	mov.w	r3, #32
    5832:	f3ef 8711 	mrs	r7, BASEPRI
    5836:	f383 8812 	msr	BASEPRI_MAX, r3
    583a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    583e:	3201      	adds	r2, #1
    5840:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    5844:	da24      	bge.n	5890 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5846:	4930      	ldr	r1, [pc, #192]	; (5908 <z_add_timeout+0xf0>)
    5848:	e9d1 2000 	ldrd	r2, r0, [r1]
    584c:	f06f 0301 	mvn.w	r3, #1
    5850:	1a9b      	subs	r3, r3, r2
    5852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5856:	eb62 0000 	sbc.w	r0, r2, r0
    585a:	1b9e      	subs	r6, r3, r6
    585c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    5860:	2e01      	cmp	r6, #1
    5862:	f170 0300 	sbcs.w	r3, r0, #0
    5866:	da01      	bge.n	586c <z_add_timeout+0x54>
    5868:	2601      	movs	r6, #1
    586a:	2000      	movs	r0, #0
    586c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    5870:	4e26      	ldr	r6, [pc, #152]	; (590c <z_add_timeout+0xf4>)
    5872:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    5876:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5878:	45b4      	cmp	ip, r6
    587a:	bf08      	it	eq
    587c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    5880:	f1bc 0f00 	cmp.w	ip, #0
    5884:	d10d      	bne.n	58a2 <z_add_timeout+0x8a>
	node->prev = tail;
    5886:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    588a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    588c:	6074      	str	r4, [r6, #4]
}
    588e:	e01c      	b.n	58ca <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    5890:	f7ff ff74 	bl	577c <elapsed>
    5894:	3601      	adds	r6, #1
    5896:	f145 0500 	adc.w	r5, r5, #0
    589a:	1836      	adds	r6, r6, r0
    589c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    58a0:	e7e4      	b.n	586c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    58a2:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    58a6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    58aa:	4293      	cmp	r3, r2
    58ac:	eb71 0e00 	sbcs.w	lr, r1, r0
    58b0:	da1f      	bge.n	58f2 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    58b2:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    58b4:	f8dc 3004 	ldr.w	r3, [ip, #4]
    58b8:	eb60 0001 	sbc.w	r0, r0, r1
    58bc:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    58c0:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    58c4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    58c6:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    58ca:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58cc:	42b3      	cmp	r3, r6
    58ce:	d00b      	beq.n	58e8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    58d0:	429c      	cmp	r4, r3
    58d2:	d109      	bne.n	58e8 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    58d4:	f7ff ff5c 	bl	5790 <next_timeout>

			if (next_time == 0 ||
    58d8:	b118      	cbz	r0, 58e2 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    58da:	4b0d      	ldr	r3, [pc, #52]	; (5910 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    58dc:	691b      	ldr	r3, [r3, #16]
    58de:	4283      	cmp	r3, r0
    58e0:	d002      	beq.n	58e8 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    58e2:	2100      	movs	r1, #0
    58e4:	f7fe fb48 	bl	3f78 <sys_clock_set_timeout>
	__asm__ volatile(
    58e8:	f387 8811 	msr	BASEPRI, r7
    58ec:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    58f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    58f2:	1a9b      	subs	r3, r3, r2
    58f4:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    58f8:	45ac      	cmp	ip, r5
    58fa:	e9c4 3104 	strd	r3, r1, [r4, #16]
    58fe:	d0c2      	beq.n	5886 <z_add_timeout+0x6e>
    5900:	f8dc c000 	ldr.w	ip, [ip]
    5904:	e7bc      	b.n	5880 <z_add_timeout+0x68>
    5906:	bf00      	nop
    5908:	20000808 	.word	0x20000808
    590c:	20000104 	.word	0x20000104
    5910:	20000f30 	.word	0x20000f30

00005914 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5918:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    591a:	f7ff fccf 	bl	52bc <z_time_slice>
	__asm__ volatile(
    591e:	f04f 0320 	mov.w	r3, #32
    5922:	f3ef 8611 	mrs	r6, BASEPRI
    5926:	f383 8812 	msr	BASEPRI_MAX, r3
    592a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    592e:	4f23      	ldr	r7, [pc, #140]	; (59bc <sys_clock_announce+0xa8>)
	return list->head == list;
    5930:	f8df 808c 	ldr.w	r8, [pc, #140]	; 59c0 <sys_clock_announce+0xac>
    5934:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5938:	4a22      	ldr	r2, [pc, #136]	; (59c4 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    593a:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    593c:	4540      	cmp	r0, r8
		curr_tick += dt;
    593e:	e9d2 3e00 	ldrd	r3, lr, [r2]
    5942:	ea4f 71e4 	mov.w	r1, r4, asr #31
    5946:	d00b      	beq.n	5960 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5948:	b150      	cbz	r0, 5960 <sys_clock_announce+0x4c>
    594a:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    594e:	42ac      	cmp	r4, r5
    5950:	eb71 090c 	sbcs.w	r9, r1, ip
    5954:	da16      	bge.n	5984 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5956:	1b2d      	subs	r5, r5, r4
    5958:	eb6c 0c01 	sbc.w	ip, ip, r1
    595c:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5960:	18e3      	adds	r3, r4, r3
    5962:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    5966:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5968:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    596c:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    596e:	f7ff ff0f 	bl	5790 <next_timeout>
    5972:	4621      	mov	r1, r4
    5974:	f7fe fb00 	bl	3f78 <sys_clock_set_timeout>
	__asm__ volatile(
    5978:	f386 8811 	msr	BASEPRI, r6
    597c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5984:	18eb      	adds	r3, r5, r3
    5986:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    598a:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    598e:	2200      	movs	r2, #0
    5990:	2300      	movs	r3, #0
    5992:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    5996:	f7ff ff23 	bl	57e0 <remove_timeout>
    599a:	f386 8811 	msr	BASEPRI, r6
    599e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    59a2:	6883      	ldr	r3, [r0, #8]
    59a4:	4798      	blx	r3
	__asm__ volatile(
    59a6:	f04f 0320 	mov.w	r3, #32
    59aa:	f3ef 8611 	mrs	r6, BASEPRI
    59ae:	f383 8812 	msr	BASEPRI_MAX, r3
    59b2:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    59b6:	683c      	ldr	r4, [r7, #0]
    59b8:	1b64      	subs	r4, r4, r5
    59ba:	e7bb      	b.n	5934 <sys_clock_announce+0x20>
    59bc:	20000f64 	.word	0x20000f64
    59c0:	20000104 	.word	0x20000104
    59c4:	20000808 	.word	0x20000808

000059c8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    59c8:	b510      	push	{r4, lr}
    59ca:	f04f 0320 	mov.w	r3, #32
    59ce:	f3ef 8411 	mrs	r4, BASEPRI
    59d2:	f383 8812 	msr	BASEPRI_MAX, r3
    59d6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    59da:	f7ff fecf 	bl	577c <elapsed>
    59de:	4a06      	ldr	r2, [pc, #24]	; (59f8 <sys_clock_tick_get+0x30>)
    59e0:	4603      	mov	r3, r0
    59e2:	e9d2 0100 	ldrd	r0, r1, [r2]
    59e6:	1818      	adds	r0, r3, r0
    59e8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    59ec:	f384 8811 	msr	BASEPRI, r4
    59f0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    59f4:	bd10      	pop	{r4, pc}
    59f6:	bf00      	nop
    59f8:	20000808 	.word	0x20000808

000059fc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    59fc:	b570      	push	{r4, r5, r6, lr}
    59fe:	4604      	mov	r4, r0
	__asm__ volatile(
    5a00:	f04f 0320 	mov.w	r3, #32
    5a04:	f3ef 8511 	mrs	r5, BASEPRI
    5a08:	f383 8812 	msr	BASEPRI_MAX, r3
    5a0c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5a10:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    5a14:	3301      	adds	r3, #1
    5a16:	f142 0200 	adc.w	r2, r2, #0
    5a1a:	2b02      	cmp	r3, #2
    5a1c:	f172 0200 	sbcs.w	r2, r2, #0
    5a20:	d322      	bcc.n	5a68 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    5a22:	f001 fb01 	bl	7028 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    5a26:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    5a2a:	3001      	adds	r0, #1
    5a2c:	f141 0100 	adc.w	r1, r1, #0
    5a30:	18c0      	adds	r0, r0, r3
    5a32:	eb41 0102 	adc.w	r1, r1, r2
    5a36:	2801      	cmp	r0, #1
    5a38:	f171 0100 	sbcs.w	r1, r1, #0
    5a3c:	db32      	blt.n	5aa4 <z_timer_expiration_handler+0xa8>
    5a3e:	f001 faf3 	bl	7028 <z_impl_k_uptime_ticks>
    5a42:	3001      	adds	r0, #1
    5a44:	f141 0300 	adc.w	r3, r1, #0
    5a48:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    5a4c:	1880      	adds	r0, r0, r2
    5a4e:	f06f 0201 	mvn.w	r2, #1
    5a52:	eb43 0301 	adc.w	r3, r3, r1
    5a56:	1a12      	subs	r2, r2, r0
    5a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5a5c:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5a60:	491a      	ldr	r1, [pc, #104]	; (5acc <z_timer_expiration_handler+0xd0>)
    5a62:	4620      	mov	r0, r4
    5a64:	f7ff fed8 	bl	5818 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    5a68:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5a6a:	3301      	adds	r3, #1
    5a6c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    5a6e:	6a23      	ldr	r3, [r4, #32]
    5a70:	b173      	cbz	r3, 5a90 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    5a72:	f385 8811 	msr	BASEPRI, r5
    5a76:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5a7a:	6a23      	ldr	r3, [r4, #32]
    5a7c:	4620      	mov	r0, r4
    5a7e:	4798      	blx	r3
	__asm__ volatile(
    5a80:	f04f 0320 	mov.w	r3, #32
    5a84:	f3ef 8511 	mrs	r5, BASEPRI
    5a88:	f383 8812 	msr	BASEPRI_MAX, r3
    5a8c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5a90:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a94:	42a6      	cmp	r6, r4
    5a96:	d000      	beq.n	5a9a <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5a98:	b94e      	cbnz	r6, 5aae <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    5a9a:	f385 8811 	msr	BASEPRI, r5
    5a9e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    5aa2:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    5aa4:	f06f 0201 	mvn.w	r2, #1
    5aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5aac:	e7d8      	b.n	5a60 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    5aae:	4630      	mov	r0, r6
    5ab0:	f001 fa1b 	bl	6eea <z_unpend_thread_no_timeout>
    5ab4:	2300      	movs	r3, #0
    5ab6:	67b3      	str	r3, [r6, #120]	; 0x78
    5ab8:	f385 8811 	msr	BASEPRI, r5
    5abc:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5ac0:	4630      	mov	r0, r6
}
    5ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    5ac6:	f001 ba00 	b.w	6eca <z_ready_thread>
    5aca:	bf00      	nop
    5acc:	000059fd 	.word	0x000059fd

00005ad0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5ad8:	bf08      	it	eq
    5ada:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5ade:	4605      	mov	r5, r0
    5ae0:	4614      	mov	r4, r2
    5ae2:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    5ae6:	4619      	mov	r1, r3
    5ae8:	4691      	mov	r9, r2
    5aea:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5aec:	d037      	beq.n	5b5e <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5aee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5af2:	bf08      	it	eq
    5af4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5af8:	4637      	mov	r7, r6
    5afa:	4682      	mov	sl, r0
    5afc:	d011      	beq.n	5b22 <z_impl_k_timer_start+0x52>
    5afe:	ea50 0306 	orrs.w	r3, r0, r6
    5b02:	d00e      	beq.n	5b22 <z_impl_k_timer_start+0x52>
    5b04:	1c72      	adds	r2, r6, #1
    5b06:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    5b0a:	db0a      	blt.n	5b22 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    5b0c:	2e02      	cmp	r6, #2
    5b0e:	4684      	mov	ip, r0
    5b10:	f170 0000 	sbcs.w	r0, r0, #0
    5b14:	bfbc      	itt	lt
    5b16:	2702      	movlt	r7, #2
    5b18:	f04f 0c00 	movlt.w	ip, #0
    5b1c:	3f01      	subs	r7, #1
    5b1e:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5b22:	1c63      	adds	r3, r4, #1
    5b24:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    5b28:	db0a      	blt.n	5b40 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5b2a:	2c01      	cmp	r4, #1
    5b2c:	f171 0300 	sbcs.w	r3, r1, #0
    5b30:	4622      	mov	r2, r4
    5b32:	bfbc      	itt	lt
    5b34:	2201      	movlt	r2, #1
    5b36:	2100      	movlt	r1, #0
    5b38:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    5b3c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    5b40:	4628      	mov	r0, r5
    5b42:	f001 fa2b 	bl	6f9c <z_abort_timeout>
	timer->period = period;
    5b46:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
    5b4a:	2300      	movs	r3, #0
    5b4c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5b4e:	464a      	mov	r2, r9
    5b50:	4643      	mov	r3, r8
    5b52:	4628      	mov	r0, r5
    5b54:	4903      	ldr	r1, [pc, #12]	; (5b64 <z_impl_k_timer_start+0x94>)
		     duration);
}
    5b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5b5a:	f7ff be5d 	b.w	5818 <z_add_timeout>
}
    5b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b62:	bf00      	nop
    5b64:	000059fd 	.word	0x000059fd

00005b68 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    5b68:	4801      	ldr	r0, [pc, #4]	; (5b70 <boot_banner+0x8>)
    5b6a:	f000 ba5a 	b.w	6022 <printk>
    5b6e:	bf00      	nop
    5b70:	00008043 	.word	0x00008043

00005b74 <nrf_cc3xx_platform_init_no_rng>:
    5b74:	b510      	push	{r4, lr}
    5b76:	4c0a      	ldr	r4, [pc, #40]	; (5ba0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5b78:	6823      	ldr	r3, [r4, #0]
    5b7a:	b11b      	cbz	r3, 5b84 <nrf_cc3xx_platform_init_no_rng+0x10>
    5b7c:	2301      	movs	r3, #1
    5b7e:	6023      	str	r3, [r4, #0]
    5b80:	2000      	movs	r0, #0
    5b82:	bd10      	pop	{r4, pc}
    5b84:	f000 f8e6 	bl	5d54 <CC_LibInitNoRng>
    5b88:	2800      	cmp	r0, #0
    5b8a:	d0f7      	beq.n	5b7c <nrf_cc3xx_platform_init_no_rng+0x8>
    5b8c:	3801      	subs	r0, #1
    5b8e:	2806      	cmp	r0, #6
    5b90:	d803      	bhi.n	5b9a <nrf_cc3xx_platform_init_no_rng+0x26>
    5b92:	4b04      	ldr	r3, [pc, #16]	; (5ba4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5b94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5b98:	bd10      	pop	{r4, pc}
    5b9a:	4803      	ldr	r0, [pc, #12]	; (5ba8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5b9c:	bd10      	pop	{r4, pc}
    5b9e:	bf00      	nop
    5ba0:	20000f68 	.word	0x20000f68
    5ba4:	000075b4 	.word	0x000075b4
    5ba8:	ffff8ffe 	.word	0xffff8ffe

00005bac <nrf_cc3xx_platform_abort>:
    5bac:	f3bf 8f4f 	dsb	sy
    5bb0:	4905      	ldr	r1, [pc, #20]	; (5bc8 <nrf_cc3xx_platform_abort+0x1c>)
    5bb2:	4b06      	ldr	r3, [pc, #24]	; (5bcc <nrf_cc3xx_platform_abort+0x20>)
    5bb4:	68ca      	ldr	r2, [r1, #12]
    5bb6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5bba:	4313      	orrs	r3, r2
    5bbc:	60cb      	str	r3, [r1, #12]
    5bbe:	f3bf 8f4f 	dsb	sy
    5bc2:	bf00      	nop
    5bc4:	e7fd      	b.n	5bc2 <nrf_cc3xx_platform_abort+0x16>
    5bc6:	bf00      	nop
    5bc8:	e000ed00 	.word	0xe000ed00
    5bcc:	05fa0004 	.word	0x05fa0004

00005bd0 <CC_PalAbort>:
    5bd0:	b410      	push	{r4}
    5bd2:	4b09      	ldr	r3, [pc, #36]	; (5bf8 <CC_PalAbort+0x28>)
    5bd4:	4909      	ldr	r1, [pc, #36]	; (5bfc <CC_PalAbort+0x2c>)
    5bd6:	4c0a      	ldr	r4, [pc, #40]	; (5c00 <CC_PalAbort+0x30>)
    5bd8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5bdc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5be0:	6849      	ldr	r1, [r1, #4]
    5be2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5be6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5bea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5bee:	2300      	movs	r3, #0
    5bf0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    5bf4:	bc10      	pop	{r4}
    5bf6:	4708      	bx	r1
    5bf8:	5002b000 	.word	0x5002b000
    5bfc:	2000010c 	.word	0x2000010c
    5c00:	5002a000 	.word	0x5002a000

00005c04 <nrf_cc3xx_platform_set_abort>:
    5c04:	e9d0 1200 	ldrd	r1, r2, [r0]
    5c08:	4b01      	ldr	r3, [pc, #4]	; (5c10 <nrf_cc3xx_platform_set_abort+0xc>)
    5c0a:	e9c3 1200 	strd	r1, r2, [r3]
    5c0e:	4770      	bx	lr
    5c10:	2000010c 	.word	0x2000010c

00005c14 <mutex_free>:
    5c14:	b510      	push	{r4, lr}
    5c16:	4604      	mov	r4, r0
    5c18:	b150      	cbz	r0, 5c30 <mutex_free+0x1c>
    5c1a:	6863      	ldr	r3, [r4, #4]
    5c1c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5c20:	d005      	beq.n	5c2e <mutex_free+0x1a>
    5c22:	4a06      	ldr	r2, [pc, #24]	; (5c3c <mutex_free+0x28>)
    5c24:	4293      	cmp	r3, r2
    5c26:	d002      	beq.n	5c2e <mutex_free+0x1a>
    5c28:	2300      	movs	r3, #0
    5c2a:	6023      	str	r3, [r4, #0]
    5c2c:	6062      	str	r2, [r4, #4]
    5c2e:	bd10      	pop	{r4, pc}
    5c30:	4b03      	ldr	r3, [pc, #12]	; (5c40 <mutex_free+0x2c>)
    5c32:	4804      	ldr	r0, [pc, #16]	; (5c44 <mutex_free+0x30>)
    5c34:	685b      	ldr	r3, [r3, #4]
    5c36:	4798      	blx	r3
    5c38:	e7ef      	b.n	5c1a <mutex_free+0x6>
    5c3a:	bf00      	nop
    5c3c:	a95c5f2c 	.word	0xa95c5f2c
    5c40:	2000010c 	.word	0x2000010c
    5c44:	000075d0 	.word	0x000075d0

00005c48 <mutex_lock>:
    5c48:	b1c8      	cbz	r0, 5c7e <mutex_lock+0x36>
    5c4a:	6843      	ldr	r3, [r0, #4]
    5c4c:	4a0d      	ldr	r2, [pc, #52]	; (5c84 <mutex_lock+0x3c>)
    5c4e:	4293      	cmp	r3, r2
    5c50:	d013      	beq.n	5c7a <mutex_lock+0x32>
    5c52:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5c56:	d00e      	beq.n	5c76 <mutex_lock+0x2e>
    5c58:	2301      	movs	r3, #1
    5c5a:	e850 2f00 	ldrex	r2, [r0]
    5c5e:	4619      	mov	r1, r3
    5c60:	e840 1c00 	strex	ip, r1, [r0]
    5c64:	f09c 0f00 	teq	ip, #0
    5c68:	d1f7      	bne.n	5c5a <mutex_lock+0x12>
    5c6a:	2a01      	cmp	r2, #1
    5c6c:	d0f5      	beq.n	5c5a <mutex_lock+0x12>
    5c6e:	f3bf 8f5f 	dmb	sy
    5c72:	2000      	movs	r0, #0
    5c74:	4770      	bx	lr
    5c76:	4804      	ldr	r0, [pc, #16]	; (5c88 <mutex_lock+0x40>)
    5c78:	4770      	bx	lr
    5c7a:	4804      	ldr	r0, [pc, #16]	; (5c8c <mutex_lock+0x44>)
    5c7c:	4770      	bx	lr
    5c7e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5c82:	4770      	bx	lr
    5c84:	a95c5f2c 	.word	0xa95c5f2c
    5c88:	ffff8fe9 	.word	0xffff8fe9
    5c8c:	ffff8fea 	.word	0xffff8fea

00005c90 <mutex_unlock>:
    5c90:	b180      	cbz	r0, 5cb4 <mutex_unlock+0x24>
    5c92:	6843      	ldr	r3, [r0, #4]
    5c94:	4a09      	ldr	r2, [pc, #36]	; (5cbc <mutex_unlock+0x2c>)
    5c96:	4293      	cmp	r3, r2
    5c98:	d00a      	beq.n	5cb0 <mutex_unlock+0x20>
    5c9a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5c9e:	d005      	beq.n	5cac <mutex_unlock+0x1c>
    5ca0:	f3bf 8f5f 	dmb	sy
    5ca4:	2300      	movs	r3, #0
    5ca6:	6003      	str	r3, [r0, #0]
    5ca8:	4618      	mov	r0, r3
    5caa:	4770      	bx	lr
    5cac:	4804      	ldr	r0, [pc, #16]	; (5cc0 <mutex_unlock+0x30>)
    5cae:	4770      	bx	lr
    5cb0:	4804      	ldr	r0, [pc, #16]	; (5cc4 <mutex_unlock+0x34>)
    5cb2:	4770      	bx	lr
    5cb4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5cb8:	4770      	bx	lr
    5cba:	bf00      	nop
    5cbc:	a95c5f2c 	.word	0xa95c5f2c
    5cc0:	ffff8fe9 	.word	0xffff8fe9
    5cc4:	ffff8fea 	.word	0xffff8fea

00005cc8 <mutex_init>:
    5cc8:	b510      	push	{r4, lr}
    5cca:	4604      	mov	r4, r0
    5ccc:	b120      	cbz	r0, 5cd8 <mutex_init+0x10>
    5cce:	4b04      	ldr	r3, [pc, #16]	; (5ce0 <mutex_init+0x18>)
    5cd0:	6063      	str	r3, [r4, #4]
    5cd2:	2200      	movs	r2, #0
    5cd4:	6022      	str	r2, [r4, #0]
    5cd6:	bd10      	pop	{r4, pc}
    5cd8:	4802      	ldr	r0, [pc, #8]	; (5ce4 <mutex_init+0x1c>)
    5cda:	f7ff ff79 	bl	5bd0 <CC_PalAbort>
    5cde:	e7f6      	b.n	5cce <mutex_init+0x6>
    5ce0:	3a00003a 	.word	0x3a00003a
    5ce4:	000075f8 	.word	0x000075f8

00005ce8 <nrf_cc3xx_platform_set_mutexes>:
    5ce8:	b570      	push	{r4, r5, r6, lr}
    5cea:	e9d0 2300 	ldrd	r2, r3, [r0]
    5cee:	4c15      	ldr	r4, [pc, #84]	; (5d44 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5cf0:	4d15      	ldr	r5, [pc, #84]	; (5d48 <nrf_cc3xx_platform_set_mutexes+0x60>)
    5cf2:	6063      	str	r3, [r4, #4]
    5cf4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5cf8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    5cfc:	6022      	str	r2, [r4, #0]
    5cfe:	4b13      	ldr	r3, [pc, #76]	; (5d4c <nrf_cc3xx_platform_set_mutexes+0x64>)
    5d00:	6808      	ldr	r0, [r1, #0]
    5d02:	6018      	str	r0, [r3, #0]
    5d04:	6848      	ldr	r0, [r1, #4]
    5d06:	6058      	str	r0, [r3, #4]
    5d08:	6888      	ldr	r0, [r1, #8]
    5d0a:	6098      	str	r0, [r3, #8]
    5d0c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    5d10:	60d8      	str	r0, [r3, #12]
    5d12:	6119      	str	r1, [r3, #16]
    5d14:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    5d18:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5d1c:	d010      	beq.n	5d40 <nrf_cc3xx_platform_set_mutexes+0x58>
    5d1e:	490c      	ldr	r1, [pc, #48]	; (5d50 <nrf_cc3xx_platform_set_mutexes+0x68>)
    5d20:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    5d24:	2300      	movs	r3, #0
    5d26:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    5d2a:	f505 708a 	add.w	r0, r5, #276	; 0x114
    5d2e:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    5d32:	4790      	blx	r2
    5d34:	6823      	ldr	r3, [r4, #0]
    5d36:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    5d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d3e:	4718      	bx	r3
    5d40:	bd70      	pop	{r4, r5, r6, pc}
    5d42:	bf00      	nop
    5d44:	2000011c 	.word	0x2000011c
    5d48:	20000f80 	.word	0x20000f80
    5d4c:	2000012c 	.word	0x2000012c
    5d50:	a95c5f2c 	.word	0xa95c5f2c

00005d54 <CC_LibInitNoRng>:
    5d54:	b538      	push	{r3, r4, r5, lr}
    5d56:	f000 f82f 	bl	5db8 <CC_HalInit>
    5d5a:	b120      	cbz	r0, 5d66 <CC_LibInitNoRng+0x12>
    5d5c:	2403      	movs	r4, #3
    5d5e:	f000 f863 	bl	5e28 <CC_PalTerminate>
    5d62:	4620      	mov	r0, r4
    5d64:	bd38      	pop	{r3, r4, r5, pc}
    5d66:	f000 f831 	bl	5dcc <CC_PalInit>
    5d6a:	b998      	cbnz	r0, 5d94 <CC_LibInitNoRng+0x40>
    5d6c:	f000 f8ac 	bl	5ec8 <CC_PalPowerSaveModeSelect>
    5d70:	b998      	cbnz	r0, 5d9a <CC_LibInitNoRng+0x46>
    5d72:	4d0f      	ldr	r5, [pc, #60]	; (5db0 <CC_LibInitNoRng+0x5c>)
    5d74:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5d78:	0e1b      	lsrs	r3, r3, #24
    5d7a:	2bf0      	cmp	r3, #240	; 0xf0
    5d7c:	d108      	bne.n	5d90 <CC_LibInitNoRng+0x3c>
    5d7e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5d82:	4b0c      	ldr	r3, [pc, #48]	; (5db4 <CC_LibInitNoRng+0x60>)
    5d84:	429a      	cmp	r2, r3
    5d86:	d00a      	beq.n	5d9e <CC_LibInitNoRng+0x4a>
    5d88:	2407      	movs	r4, #7
    5d8a:	f000 f817 	bl	5dbc <CC_HalTerminate>
    5d8e:	e7e6      	b.n	5d5e <CC_LibInitNoRng+0xa>
    5d90:	2406      	movs	r4, #6
    5d92:	e7fa      	b.n	5d8a <CC_LibInitNoRng+0x36>
    5d94:	2404      	movs	r4, #4
    5d96:	4620      	mov	r0, r4
    5d98:	bd38      	pop	{r3, r4, r5, pc}
    5d9a:	2400      	movs	r4, #0
    5d9c:	e7f5      	b.n	5d8a <CC_LibInitNoRng+0x36>
    5d9e:	2001      	movs	r0, #1
    5da0:	f000 f892 	bl	5ec8 <CC_PalPowerSaveModeSelect>
    5da4:	4604      	mov	r4, r0
    5da6:	2800      	cmp	r0, #0
    5da8:	d1f7      	bne.n	5d9a <CC_LibInitNoRng+0x46>
    5daa:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5dae:	e7d8      	b.n	5d62 <CC_LibInitNoRng+0xe>
    5db0:	5002b000 	.word	0x5002b000
    5db4:	20e00000 	.word	0x20e00000

00005db8 <CC_HalInit>:
    5db8:	2000      	movs	r0, #0
    5dba:	4770      	bx	lr

00005dbc <CC_HalTerminate>:
    5dbc:	2000      	movs	r0, #0
    5dbe:	4770      	bx	lr

00005dc0 <CC_HalMaskInterrupt>:
    5dc0:	4b01      	ldr	r3, [pc, #4]	; (5dc8 <CC_HalMaskInterrupt+0x8>)
    5dc2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    5dc6:	4770      	bx	lr
    5dc8:	5002b000 	.word	0x5002b000

00005dcc <CC_PalInit>:
    5dcc:	b510      	push	{r4, lr}
    5dce:	4811      	ldr	r0, [pc, #68]	; (5e14 <CC_PalInit+0x48>)
    5dd0:	f000 f848 	bl	5e64 <CC_PalMutexCreate>
    5dd4:	b100      	cbz	r0, 5dd8 <CC_PalInit+0xc>
    5dd6:	bd10      	pop	{r4, pc}
    5dd8:	480f      	ldr	r0, [pc, #60]	; (5e18 <CC_PalInit+0x4c>)
    5dda:	f000 f843 	bl	5e64 <CC_PalMutexCreate>
    5dde:	2800      	cmp	r0, #0
    5de0:	d1f9      	bne.n	5dd6 <CC_PalInit+0xa>
    5de2:	4c0e      	ldr	r4, [pc, #56]	; (5e1c <CC_PalInit+0x50>)
    5de4:	4620      	mov	r0, r4
    5de6:	f000 f83d 	bl	5e64 <CC_PalMutexCreate>
    5dea:	2800      	cmp	r0, #0
    5dec:	d1f3      	bne.n	5dd6 <CC_PalInit+0xa>
    5dee:	4b0c      	ldr	r3, [pc, #48]	; (5e20 <CC_PalInit+0x54>)
    5df0:	480c      	ldr	r0, [pc, #48]	; (5e24 <CC_PalInit+0x58>)
    5df2:	601c      	str	r4, [r3, #0]
    5df4:	f000 f836 	bl	5e64 <CC_PalMutexCreate>
    5df8:	4601      	mov	r1, r0
    5dfa:	2800      	cmp	r0, #0
    5dfc:	d1eb      	bne.n	5dd6 <CC_PalInit+0xa>
    5dfe:	f000 f82d 	bl	5e5c <CC_PalDmaInit>
    5e02:	4604      	mov	r4, r0
    5e04:	b108      	cbz	r0, 5e0a <CC_PalInit+0x3e>
    5e06:	4620      	mov	r0, r4
    5e08:	bd10      	pop	{r4, pc}
    5e0a:	f000 f83f 	bl	5e8c <CC_PalPowerSaveModeInit>
    5e0e:	4620      	mov	r0, r4
    5e10:	e7fa      	b.n	5e08 <CC_PalInit+0x3c>
    5e12:	bf00      	nop
    5e14:	20000164 	.word	0x20000164
    5e18:	20000158 	.word	0x20000158
    5e1c:	20000160 	.word	0x20000160
    5e20:	20000168 	.word	0x20000168
    5e24:	2000015c 	.word	0x2000015c

00005e28 <CC_PalTerminate>:
    5e28:	b508      	push	{r3, lr}
    5e2a:	4808      	ldr	r0, [pc, #32]	; (5e4c <CC_PalTerminate+0x24>)
    5e2c:	f000 f824 	bl	5e78 <CC_PalMutexDestroy>
    5e30:	4807      	ldr	r0, [pc, #28]	; (5e50 <CC_PalTerminate+0x28>)
    5e32:	f000 f821 	bl	5e78 <CC_PalMutexDestroy>
    5e36:	4807      	ldr	r0, [pc, #28]	; (5e54 <CC_PalTerminate+0x2c>)
    5e38:	f000 f81e 	bl	5e78 <CC_PalMutexDestroy>
    5e3c:	4806      	ldr	r0, [pc, #24]	; (5e58 <CC_PalTerminate+0x30>)
    5e3e:	f000 f81b 	bl	5e78 <CC_PalMutexDestroy>
    5e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e46:	f000 b80b 	b.w	5e60 <CC_PalDmaTerminate>
    5e4a:	bf00      	nop
    5e4c:	20000164 	.word	0x20000164
    5e50:	20000158 	.word	0x20000158
    5e54:	20000160 	.word	0x20000160
    5e58:	2000015c 	.word	0x2000015c

00005e5c <CC_PalDmaInit>:
    5e5c:	2000      	movs	r0, #0
    5e5e:	4770      	bx	lr

00005e60 <CC_PalDmaTerminate>:
    5e60:	4770      	bx	lr
    5e62:	bf00      	nop

00005e64 <CC_PalMutexCreate>:
    5e64:	b508      	push	{r3, lr}
    5e66:	4b03      	ldr	r3, [pc, #12]	; (5e74 <CC_PalMutexCreate+0x10>)
    5e68:	6802      	ldr	r2, [r0, #0]
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	6810      	ldr	r0, [r2, #0]
    5e6e:	4798      	blx	r3
    5e70:	2000      	movs	r0, #0
    5e72:	bd08      	pop	{r3, pc}
    5e74:	2000011c 	.word	0x2000011c

00005e78 <CC_PalMutexDestroy>:
    5e78:	b508      	push	{r3, lr}
    5e7a:	4b03      	ldr	r3, [pc, #12]	; (5e88 <CC_PalMutexDestroy+0x10>)
    5e7c:	6802      	ldr	r2, [r0, #0]
    5e7e:	685b      	ldr	r3, [r3, #4]
    5e80:	6810      	ldr	r0, [r2, #0]
    5e82:	4798      	blx	r3
    5e84:	2000      	movs	r0, #0
    5e86:	bd08      	pop	{r3, pc}
    5e88:	2000011c 	.word	0x2000011c

00005e8c <CC_PalPowerSaveModeInit>:
    5e8c:	b570      	push	{r4, r5, r6, lr}
    5e8e:	4c09      	ldr	r4, [pc, #36]	; (5eb4 <CC_PalPowerSaveModeInit+0x28>)
    5e90:	4d09      	ldr	r5, [pc, #36]	; (5eb8 <CC_PalPowerSaveModeInit+0x2c>)
    5e92:	6920      	ldr	r0, [r4, #16]
    5e94:	68ab      	ldr	r3, [r5, #8]
    5e96:	4798      	blx	r3
    5e98:	b118      	cbz	r0, 5ea2 <CC_PalPowerSaveModeInit+0x16>
    5e9a:	4b08      	ldr	r3, [pc, #32]	; (5ebc <CC_PalPowerSaveModeInit+0x30>)
    5e9c:	4808      	ldr	r0, [pc, #32]	; (5ec0 <CC_PalPowerSaveModeInit+0x34>)
    5e9e:	685b      	ldr	r3, [r3, #4]
    5ea0:	4798      	blx	r3
    5ea2:	4a08      	ldr	r2, [pc, #32]	; (5ec4 <CC_PalPowerSaveModeInit+0x38>)
    5ea4:	68eb      	ldr	r3, [r5, #12]
    5ea6:	6920      	ldr	r0, [r4, #16]
    5ea8:	2100      	movs	r1, #0
    5eaa:	6011      	str	r1, [r2, #0]
    5eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5eb0:	4718      	bx	r3
    5eb2:	bf00      	nop
    5eb4:	2000012c 	.word	0x2000012c
    5eb8:	2000011c 	.word	0x2000011c
    5ebc:	2000010c 	.word	0x2000010c
    5ec0:	0000761c 	.word	0x0000761c
    5ec4:	20000f7c 	.word	0x20000f7c

00005ec8 <CC_PalPowerSaveModeSelect>:
    5ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eca:	4d1a      	ldr	r5, [pc, #104]	; (5f34 <CC_PalPowerSaveModeSelect+0x6c>)
    5ecc:	4e1a      	ldr	r6, [pc, #104]	; (5f38 <CC_PalPowerSaveModeSelect+0x70>)
    5ece:	4604      	mov	r4, r0
    5ed0:	68b2      	ldr	r2, [r6, #8]
    5ed2:	6928      	ldr	r0, [r5, #16]
    5ed4:	4790      	blx	r2
    5ed6:	b9e8      	cbnz	r0, 5f14 <CC_PalPowerSaveModeSelect+0x4c>
    5ed8:	4f18      	ldr	r7, [pc, #96]	; (5f3c <CC_PalPowerSaveModeSelect+0x74>)
    5eda:	683b      	ldr	r3, [r7, #0]
    5edc:	b14c      	cbz	r4, 5ef2 <CC_PalPowerSaveModeSelect+0x2a>
    5ede:	b1a3      	cbz	r3, 5f0a <CC_PalPowerSaveModeSelect+0x42>
    5ee0:	2b01      	cmp	r3, #1
    5ee2:	d019      	beq.n	5f18 <CC_PalPowerSaveModeSelect+0x50>
    5ee4:	3b01      	subs	r3, #1
    5ee6:	603b      	str	r3, [r7, #0]
    5ee8:	6928      	ldr	r0, [r5, #16]
    5eea:	68f3      	ldr	r3, [r6, #12]
    5eec:	4798      	blx	r3
    5eee:	2000      	movs	r0, #0
    5ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ef2:	b943      	cbnz	r3, 5f06 <CC_PalPowerSaveModeSelect+0x3e>
    5ef4:	4a12      	ldr	r2, [pc, #72]	; (5f40 <CC_PalPowerSaveModeSelect+0x78>)
    5ef6:	2101      	movs	r1, #1
    5ef8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5efc:	4911      	ldr	r1, [pc, #68]	; (5f44 <CC_PalPowerSaveModeSelect+0x7c>)
    5efe:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    5f02:	2a00      	cmp	r2, #0
    5f04:	d1fb      	bne.n	5efe <CC_PalPowerSaveModeSelect+0x36>
    5f06:	3301      	adds	r3, #1
    5f08:	603b      	str	r3, [r7, #0]
    5f0a:	68f3      	ldr	r3, [r6, #12]
    5f0c:	6928      	ldr	r0, [r5, #16]
    5f0e:	4798      	blx	r3
    5f10:	2000      	movs	r0, #0
    5f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f14:	480c      	ldr	r0, [pc, #48]	; (5f48 <CC_PalPowerSaveModeSelect+0x80>)
    5f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f18:	4a0a      	ldr	r2, [pc, #40]	; (5f44 <CC_PalPowerSaveModeSelect+0x7c>)
    5f1a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d1fb      	bne.n	5f1a <CC_PalPowerSaveModeSelect+0x52>
    5f22:	4a07      	ldr	r2, [pc, #28]	; (5f40 <CC_PalPowerSaveModeSelect+0x78>)
    5f24:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5f28:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5f2c:	f7ff ff48 	bl	5dc0 <CC_HalMaskInterrupt>
    5f30:	683b      	ldr	r3, [r7, #0]
    5f32:	e7d7      	b.n	5ee4 <CC_PalPowerSaveModeSelect+0x1c>
    5f34:	2000012c 	.word	0x2000012c
    5f38:	2000011c 	.word	0x2000011c
    5f3c:	20000f7c 	.word	0x20000f7c
    5f40:	5002a000 	.word	0x5002a000
    5f44:	5002b000 	.word	0x5002b000
    5f48:	ffff8fe9 	.word	0xffff8fe9

00005f4c <cbpprintf_external>:
{
    5f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f50:	4606      	mov	r6, r0
    5f52:	460d      	mov	r5, r1
    5f54:	4617      	mov	r7, r2
	if (buf == NULL) {
    5f56:	4698      	mov	r8, r3
    5f58:	b32b      	cbz	r3, 5fa6 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    5f5a:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    5f5e:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    5f62:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    5f64:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    5f66:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    5f6a:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    5f6e:	441c      	add	r4, r3
    5f70:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    5f72:	f04f 0a00 	mov.w	sl, #0
    5f76:	45ca      	cmp	sl, r9
    5f78:	d309      	bcc.n	5f8e <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    5f7a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5f7e:	f108 0308 	add.w	r3, r8, #8
    5f82:	4639      	mov	r1, r7
    5f84:	4630      	mov	r0, r6
    5f86:	46ac      	mov	ip, r5
}
    5f88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    5f8c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    5f8e:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    5f92:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    5f96:	4620      	mov	r0, r4
    5f98:	f000 fc8c 	bl	68b4 <strlen>
    5f9c:	3001      	adds	r0, #1
    5f9e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    5fa0:	f10a 0a01 	add.w	sl, sl, #1
    5fa4:	e7e7      	b.n	5f76 <cbpprintf_external+0x2a>
}
    5fa6:	f06f 0015 	mvn.w	r0, #21
    5faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005fae <is_ptr>:
{
    5fae:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    5fb0:	2500      	movs	r5, #0
{
    5fb2:	4602      	mov	r2, r0
	bool mod = false;
    5fb4:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    5fb6:	4614      	mov	r4, r2
    5fb8:	f814 3b01 	ldrb.w	r3, [r4], #1
    5fbc:	b90b      	cbnz	r3, 5fc2 <is_ptr+0x14>
					return false;
    5fbe:	4618      	mov	r0, r3
    5fc0:	e009      	b.n	5fd6 <is_ptr+0x28>
		if (mod) {
    5fc2:	b198      	cbz	r0, 5fec <is_ptr+0x3e>
			if (cnt == n) {
    5fc4:	428d      	cmp	r5, r1
    5fc6:	d107      	bne.n	5fd8 <is_ptr+0x2a>
				if (c == 'p') {
    5fc8:	2b70      	cmp	r3, #112	; 0x70
    5fca:	d004      	beq.n	5fd6 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    5fcc:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    5fd0:	2a3a      	cmp	r2, #58	; 0x3a
    5fd2:	d80b      	bhi.n	5fec <is_ptr+0x3e>
					return false;
    5fd4:	2000      	movs	r0, #0
}
    5fd6:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    5fd8:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    5fdc:	2e3a      	cmp	r6, #58	; 0x3a
    5fde:	d805      	bhi.n	5fec <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    5fe0:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    5fe2:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    5fe4:	1c94      	adds	r4, r2, #2
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d0e9      	beq.n	5fbe <is_ptr+0x10>
    5fea:	2000      	movs	r0, #0
		if (c == '%') {
    5fec:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    5fee:	bf08      	it	eq
    5ff0:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    5ff4:	4622      	mov	r2, r4
    5ff6:	e7de      	b.n	5fb6 <is_ptr+0x8>

00005ff8 <arch_printk_char_out>:
}
    5ff8:	2000      	movs	r0, #0
    5ffa:	4770      	bx	lr

00005ffc <str_out>:
{
    5ffc:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5ffe:	688a      	ldr	r2, [r1, #8]
    6000:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    6002:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6004:	b114      	cbz	r4, 600c <str_out+0x10>
    6006:	684b      	ldr	r3, [r1, #4]
    6008:	4293      	cmp	r3, r2
    600a:	dc01      	bgt.n	6010 <str_out+0x14>
		ctx->count++;
    600c:	608d      	str	r5, [r1, #8]
}
    600e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    6010:	3b01      	subs	r3, #1
    6012:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    6014:	bf08      	it	eq
    6016:	2200      	moveq	r2, #0
    6018:	608d      	str	r5, [r1, #8]
    601a:	bf0c      	ite	eq
    601c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    601e:	54a0      	strbne	r0, [r4, r2]
    6020:	e7f5      	b.n	600e <str_out+0x12>

00006022 <printk>:
{
    6022:	b40f      	push	{r0, r1, r2, r3}
    6024:	b507      	push	{r0, r1, r2, lr}
    6026:	a904      	add	r1, sp, #16
    6028:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    602c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    602e:	f000 fb94 	bl	675a <z_log_vprintk>
}
    6032:	b003      	add	sp, #12
    6034:	f85d eb04 	ldr.w	lr, [sp], #4
    6038:	b004      	add	sp, #16
    603a:	4770      	bx	lr

0000603c <snprintk>:
{
    603c:	b40c      	push	{r2, r3}
    603e:	b507      	push	{r0, r1, r2, lr}
    6040:	ab04      	add	r3, sp, #16
    6042:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    6046:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    6048:	f7fa fdb2 	bl	bb0 <vsnprintk>
}
    604c:	b003      	add	sp, #12
    604e:	f85d eb04 	ldr.w	lr, [sp], #4
    6052:	b002      	add	sp, #8
    6054:	4770      	bx	lr

00006056 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6056:	4604      	mov	r4, r0
    6058:	b508      	push	{r3, lr}
    605a:	4608      	mov	r0, r1
    605c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    605e:	461a      	mov	r2, r3
    6060:	47a0      	blx	r4
	return z_impl_z_current_get();
    6062:	f7ff fb0b 	bl	567c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6066:	f7fc ff6b 	bl	2f40 <z_impl_k_thread_abort>

0000606a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    606a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    606c:	f013 0307 	ands.w	r3, r3, #7
    6070:	d105      	bne.n	607e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6072:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6074:	2b00      	cmp	r3, #0
    6076:	bf0c      	ite	eq
    6078:	2000      	moveq	r0, #0
    607a:	2003      	movne	r0, #3
    607c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    607e:	2b02      	cmp	r3, #2
    6080:	d105      	bne.n	608e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6082:	8b40      	ldrh	r0, [r0, #26]
    6084:	fab0 f080 	clz	r0, r0
    6088:	0940      	lsrs	r0, r0, #5
    608a:	0080      	lsls	r0, r0, #2
    608c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    608e:	2b01      	cmp	r3, #1
    6090:	d105      	bne.n	609e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6092:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6094:	2b00      	cmp	r3, #0
    6096:	bf0c      	ite	eq
    6098:	2000      	moveq	r0, #0
    609a:	2005      	movne	r0, #5
    609c:	4770      	bx	lr
	int evt = EVT_NOP;
    609e:	2000      	movs	r0, #0
}
    60a0:	4770      	bx	lr

000060a2 <validate_args>:
{
    60a2:	b510      	push	{r4, lr}
    60a4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    60a6:	b100      	cbz	r0, 60aa <validate_args+0x8>
    60a8:	b911      	cbnz	r1, 60b0 <validate_args+0xe>
		return -EINVAL;
    60aa:	f06f 0015 	mvn.w	r0, #21
}
    60ae:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    60b0:	1d08      	adds	r0, r1, #4
    60b2:	f000 f8ba 	bl	622a <sys_notify_validate>
	if ((rv == 0)
    60b6:	2800      	cmp	r0, #0
    60b8:	d1f9      	bne.n	60ae <validate_args+0xc>
	    && ((cli->notify.flags
    60ba:	68a3      	ldr	r3, [r4, #8]
    60bc:	2b03      	cmp	r3, #3
    60be:	d9f6      	bls.n	60ae <validate_args+0xc>
    60c0:	e7f3      	b.n	60aa <validate_args+0x8>

000060c2 <notify_one>:
{
    60c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60c6:	460d      	mov	r5, r1
    60c8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    60ca:	4619      	mov	r1, r3
    60cc:	1d28      	adds	r0, r5, #4
{
    60ce:	4690      	mov	r8, r2
    60d0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    60d2:	f000 f8bb 	bl	624c <sys_notify_finalize>
	if (cb) {
    60d6:	4604      	mov	r4, r0
    60d8:	b138      	cbz	r0, 60ea <notify_one+0x28>
		cb(mgr, cli, state, res);
    60da:	4633      	mov	r3, r6
    60dc:	4642      	mov	r2, r8
    60de:	4629      	mov	r1, r5
    60e0:	4638      	mov	r0, r7
    60e2:	46a4      	mov	ip, r4
}
    60e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    60e8:	4760      	bx	ip
}
    60ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000060ee <transition_complete>:
{
    60ee:	b410      	push	{r4}
	__asm__ volatile(
    60f0:	f04f 0420 	mov.w	r4, #32
    60f4:	f3ef 8211 	mrs	r2, BASEPRI
    60f8:	f384 8812 	msr	BASEPRI_MAX, r4
    60fc:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6100:	6141      	str	r1, [r0, #20]
}
    6102:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6104:	2101      	movs	r1, #1
    6106:	f7fa bd69 	b.w	bdc <process_event>

0000610a <onoff_manager_init>:
{
    610a:	b538      	push	{r3, r4, r5, lr}
    610c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    610e:	4605      	mov	r5, r0
    6110:	b158      	cbz	r0, 612a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6112:	b151      	cbz	r1, 612a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6114:	680b      	ldr	r3, [r1, #0]
    6116:	b143      	cbz	r3, 612a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6118:	684b      	ldr	r3, [r1, #4]
    611a:	b133      	cbz	r3, 612a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    611c:	221c      	movs	r2, #28
    611e:	2100      	movs	r1, #0
    6120:	f000 fbe3 	bl	68ea <memset>
    6124:	612c      	str	r4, [r5, #16]
	return 0;
    6126:	2000      	movs	r0, #0
}
    6128:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    612a:	f06f 0015 	mvn.w	r0, #21
    612e:	e7fb      	b.n	6128 <onoff_manager_init+0x1e>

00006130 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6130:	b570      	push	{r4, r5, r6, lr}
    6132:	4605      	mov	r5, r0
    6134:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6136:	f7ff ffb4 	bl	60a2 <validate_args>

	if (rv < 0) {
    613a:	1e04      	subs	r4, r0, #0
    613c:	db15      	blt.n	616a <onoff_request+0x3a>
    613e:	f04f 0320 	mov.w	r3, #32
    6142:	f3ef 8211 	mrs	r2, BASEPRI
    6146:	f383 8812 	msr	BASEPRI_MAX, r3
    614a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    614e:	8b6b      	ldrh	r3, [r5, #26]
    6150:	8b2c      	ldrh	r4, [r5, #24]
    6152:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6156:	428b      	cmp	r3, r1
    6158:	f004 0407 	and.w	r4, r4, #7
    615c:	d107      	bne.n	616e <onoff_request+0x3e>
	__asm__ volatile(
    615e:	f382 8811 	msr	BASEPRI, r2
    6162:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    6166:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    616a:	4620      	mov	r0, r4
    616c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    616e:	2c02      	cmp	r4, #2
    6170:	d10c      	bne.n	618c <onoff_request+0x5c>
		mgr->refs += 1U;
    6172:	3301      	adds	r3, #1
    6174:	836b      	strh	r3, [r5, #26]
    6176:	f382 8811 	msr	BASEPRI, r2
    617a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    617e:	2300      	movs	r3, #0
    6180:	4622      	mov	r2, r4
    6182:	4631      	mov	r1, r6
    6184:	4628      	mov	r0, r5
    6186:	f7ff ff9c 	bl	60c2 <notify_one>
    618a:	e7ee      	b.n	616a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    618c:	2c06      	cmp	r4, #6
    618e:	d814      	bhi.n	61ba <onoff_request+0x8a>
    6190:	e8df f004 	tbb	[pc, r4]
    6194:	13131304 	.word	0x13131304
    6198:	1a04      	.short	0x1a04
    619a:	04          	.byte	0x04
    619b:	00          	.byte	0x00
	parent->next = child;
    619c:	2300      	movs	r3, #0
    619e:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    61a0:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    61a2:	b93b      	cbnz	r3, 61b4 <onoff_request+0x84>
	list->head = node;
    61a4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    61a8:	b9ac      	cbnz	r4, 61d6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    61aa:	2102      	movs	r1, #2
    61ac:	4628      	mov	r0, r5
    61ae:	f7fa fd15 	bl	bdc <process_event>
    61b2:	e7da      	b.n	616a <onoff_request+0x3a>
	parent->next = child;
    61b4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    61b6:	606e      	str	r6, [r5, #4]
}
    61b8:	e7f6      	b.n	61a8 <onoff_request+0x78>
    61ba:	f382 8811 	msr	BASEPRI, r2
    61be:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    61c2:	f06f 0404 	mvn.w	r4, #4
    61c6:	e7d0      	b.n	616a <onoff_request+0x3a>
    61c8:	f382 8811 	msr	BASEPRI, r2
    61cc:	f3bf 8f6f 	isb	sy
    61d0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    61d4:	e7c9      	b.n	616a <onoff_request+0x3a>
    61d6:	f382 8811 	msr	BASEPRI, r2
    61da:	f3bf 8f6f 	isb	sy
		if (notify) {
    61de:	e7c4      	b.n	616a <onoff_request+0x3a>

000061e0 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    61e0:	b510      	push	{r4, lr}
	__asm__ volatile(
    61e2:	f04f 0320 	mov.w	r3, #32
    61e6:	f3ef 8211 	mrs	r2, BASEPRI
    61ea:	f383 8812 	msr	BASEPRI_MAX, r3
    61ee:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    61f2:	8b04      	ldrh	r4, [r0, #24]
    61f4:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    61f8:	2c02      	cmp	r4, #2
    61fa:	d00a      	beq.n	6212 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    61fc:	2c01      	cmp	r4, #1
    61fe:	bf0c      	ite	eq
    6200:	f06f 0004 	mvneq.w	r0, #4
    6204:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    6208:	f382 8811 	msr	BASEPRI, r2
    620c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    6210:	e008      	b.n	6224 <onoff_release+0x44>
	mgr->refs -= 1U;
    6212:	8b43      	ldrh	r3, [r0, #26]
    6214:	3b01      	subs	r3, #1
    6216:	b29b      	uxth	r3, r3
    6218:	8343      	strh	r3, [r0, #26]
	if (stop) {
    621a:	b923      	cbnz	r3, 6226 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    621c:	4621      	mov	r1, r4
    621e:	f7fa fcdd 	bl	bdc <process_event>
	int rv = state;
    6222:	4620      	mov	r0, r4
}
    6224:	bd10      	pop	{r4, pc}
	int rv = state;
    6226:	4620      	mov	r0, r4
    6228:	e7ee      	b.n	6208 <onoff_release+0x28>

0000622a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    622a:	4603      	mov	r3, r0
    622c:	b158      	cbz	r0, 6246 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    622e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6230:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6234:	2a01      	cmp	r2, #1
    6236:	d003      	beq.n	6240 <sys_notify_validate+0x16>
    6238:	2a03      	cmp	r2, #3
    623a:	d104      	bne.n	6246 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    623c:	6802      	ldr	r2, [r0, #0]
    623e:	b112      	cbz	r2, 6246 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6240:	2000      	movs	r0, #0
    6242:	6098      	str	r0, [r3, #8]
    6244:	4770      	bx	lr
    6246:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    624a:	4770      	bx	lr

0000624c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    624c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    624e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6250:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6254:	2a03      	cmp	r2, #3
    6256:	f04f 0200 	mov.w	r2, #0
{
    625a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    625c:	bf0c      	ite	eq
    625e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6260:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6262:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6264:	4770      	bx	lr

00006266 <encode_uint>:
{
    6266:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    626a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    626c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    626e:	2b6f      	cmp	r3, #111	; 0x6f
{
    6270:	4680      	mov	r8, r0
    6272:	460f      	mov	r7, r1
    6274:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6276:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    627a:	d029      	beq.n	62d0 <encode_uint+0x6a>
    627c:	d824      	bhi.n	62c8 <encode_uint+0x62>
		return 10;
    627e:	2b58      	cmp	r3, #88	; 0x58
    6280:	bf0c      	ite	eq
    6282:	2610      	moveq	r6, #16
    6284:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    6286:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    628a:	4632      	mov	r2, r6
    628c:	2300      	movs	r3, #0
    628e:	4640      	mov	r0, r8
    6290:	4639      	mov	r1, r7
    6292:	f7f9 ff35 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6296:	2a09      	cmp	r2, #9
    6298:	b2d4      	uxtb	r4, r2
    629a:	d81e      	bhi.n	62da <encode_uint+0x74>
    629c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    629e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    62a0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    62a2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    62a6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    62aa:	d301      	bcc.n	62b0 <encode_uint+0x4a>
    62ac:	45d1      	cmp	r9, sl
    62ae:	d811      	bhi.n	62d4 <encode_uint+0x6e>
	if (conv->flag_hash) {
    62b0:	782b      	ldrb	r3, [r5, #0]
    62b2:	069b      	lsls	r3, r3, #26
    62b4:	d505      	bpl.n	62c2 <encode_uint+0x5c>
		if (radix == 8) {
    62b6:	2e08      	cmp	r6, #8
    62b8:	d115      	bne.n	62e6 <encode_uint+0x80>
			conv->altform_0 = true;
    62ba:	78ab      	ldrb	r3, [r5, #2]
    62bc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    62c0:	70ab      	strb	r3, [r5, #2]
}
    62c2:	4648      	mov	r0, r9
    62c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    62c8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    62cc:	2b70      	cmp	r3, #112	; 0x70
    62ce:	e7d7      	b.n	6280 <encode_uint+0x1a>
	switch (specifier) {
    62d0:	2608      	movs	r6, #8
    62d2:	e7d8      	b.n	6286 <encode_uint+0x20>
		value /= radix;
    62d4:	4680      	mov	r8, r0
    62d6:	460f      	mov	r7, r1
    62d8:	e7d7      	b.n	628a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    62da:	f1bb 0f19 	cmp.w	fp, #25
    62de:	bf94      	ite	ls
    62e0:	3437      	addls	r4, #55	; 0x37
    62e2:	3457      	addhi	r4, #87	; 0x57
    62e4:	e7db      	b.n	629e <encode_uint+0x38>
		} else if (radix == 16) {
    62e6:	2e10      	cmp	r6, #16
    62e8:	d1eb      	bne.n	62c2 <encode_uint+0x5c>
			conv->altform_0c = true;
    62ea:	78ab      	ldrb	r3, [r5, #2]
    62ec:	f043 0310 	orr.w	r3, r3, #16
    62f0:	e7e6      	b.n	62c0 <encode_uint+0x5a>

000062f2 <outs>:
{
    62f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62f6:	4607      	mov	r7, r0
    62f8:	4688      	mov	r8, r1
    62fa:	4615      	mov	r5, r2
    62fc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    62fe:	4614      	mov	r4, r2
    6300:	42b4      	cmp	r4, r6
    6302:	d305      	bcc.n	6310 <outs+0x1e>
    6304:	b10e      	cbz	r6, 630a <outs+0x18>
	return (int)count;
    6306:	1b60      	subs	r0, r4, r5
    6308:	e008      	b.n	631c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    630a:	7823      	ldrb	r3, [r4, #0]
    630c:	2b00      	cmp	r3, #0
    630e:	d0fa      	beq.n	6306 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    6310:	f814 0b01 	ldrb.w	r0, [r4], #1
    6314:	4641      	mov	r1, r8
    6316:	47b8      	blx	r7
		if (rc < 0) {
    6318:	2800      	cmp	r0, #0
    631a:	daf1      	bge.n	6300 <outs+0xe>
}
    631c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006320 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    6320:	68c3      	ldr	r3, [r0, #12]
    6322:	6802      	ldr	r2, [r0, #0]
    6324:	4293      	cmp	r3, r2
    6326:	d904      	bls.n	6332 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    6328:	3b01      	subs	r3, #1
    632a:	1a9a      	subs	r2, r3, r2

		return false;
    632c:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    632e:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    6330:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6332:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
    6334:	b913      	cbnz	r3, 633c <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6336:	3801      	subs	r0, #1
    6338:	1a82      	subs	r2, r0, r2
		return false;
    633a:	e7f7      	b.n	632c <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
    633c:	1a82      	subs	r2, r0, r2
	return true;
    633e:	2001      	movs	r0, #1
    6340:	e7f5      	b.n	632e <free_space+0xe>

00006342 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    6342:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    6344:	a901      	add	r1, sp, #4
{
    6346:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    6348:	f7ff ffea 	bl	6320 <free_space>
    634c:	b120      	cbz	r0, 6358 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    634e:	9b01      	ldr	r3, [sp, #4]
    6350:	68e2      	ldr	r2, [r4, #12]
    6352:	3b01      	subs	r3, #1
    6354:	4413      	add	r3, r2
    6356:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    6358:	6a20      	ldr	r0, [r4, #32]
    635a:	9b01      	ldr	r3, [sp, #4]
    635c:	1ac0      	subs	r0, r0, r3
}
    635e:	3801      	subs	r0, #1
    6360:	b002      	add	sp, #8
    6362:	bd10      	pop	{r4, pc}

00006364 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    6364:	b510      	push	{r4, lr}
    6366:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    6368:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    636a:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    636c:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    636e:	07d2      	lsls	r2, r2, #31
    6370:	d502      	bpl.n	6378 <idx_inc+0x14>
		return i & (buffer->size - 1);
    6372:	3b01      	subs	r3, #1
    6374:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    6376:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    6378:	4298      	cmp	r0, r3
    637a:	bf28      	it	cs
    637c:	1ac0      	subcs	r0, r0, r3
    637e:	e7fa      	b.n	6376 <idx_inc+0x12>

00006380 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    6380:	b538      	push	{r3, r4, r5, lr}
    6382:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6384:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    6386:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6388:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    638a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    638e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6392:	462a      	mov	r2, r5
    6394:	6801      	ldr	r1, [r0, #0]
{
    6396:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6398:	f7ff ffe4 	bl	6364 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    639c:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    639e:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    63a0:	462a      	mov	r2, r5
    63a2:	4620      	mov	r0, r4
    63a4:	f7ff ffde 	bl	6364 <idx_inc>
    63a8:	6060      	str	r0, [r4, #4]
}
    63aa:	bd38      	pop	{r3, r4, r5, pc}

000063ac <max_utilization_update>:
{
    63ac:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    63ae:	6903      	ldr	r3, [r0, #16]
    63b0:	075b      	lsls	r3, r3, #29
{
    63b2:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    63b4:	d506      	bpl.n	63c4 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    63b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
    63b8:	f7ff ffc3 	bl	6342 <get_usage>
    63bc:	4285      	cmp	r5, r0
    63be:	bf2c      	ite	cs
    63c0:	6265      	strcs	r5, [r4, #36]	; 0x24
    63c2:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    63c4:	bd38      	pop	{r3, r4, r5, pc}

000063c6 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    63c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63ca:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    63cc:	2300      	movs	r3, #0
    63ce:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    63d0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    63d4:	f8d0 901c 	ldr.w	r9, [r0, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    63d8:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    63dc:	f003 0303 	and.w	r3, r3, #3
    63e0:	2b02      	cmp	r3, #2
{
    63e2:	4604      	mov	r4, r0
    63e4:	468b      	mov	fp, r1
    63e6:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    63e8:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    63ec:	d103      	bne.n	63f6 <drop_item_locked+0x30>
		return item->skip.len;
    63ee:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    63f2:	08ad      	lsrs	r5, r5, #2
    63f4:	d12e      	bne.n	6454 <drop_item_locked+0x8e>
    63f6:	69a3      	ldr	r3, [r4, #24]
    63f8:	4630      	mov	r0, r6
    63fa:	4798      	blx	r3
    63fc:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    63fe:	f1b8 0f00 	cmp.w	r8, #0
    6402:	d038      	beq.n	6476 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
    6404:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    6408:	079b      	lsls	r3, r3, #30
    640a:	d531      	bpl.n	6470 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    640c:	f10b 0101 	add.w	r1, fp, #1
    6410:	4620      	mov	r0, r4
    6412:	f7ff ffb5 	bl	6380 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6416:	6861      	ldr	r1, [r4, #4]
    6418:	462a      	mov	r2, r5
    641a:	4620      	mov	r0, r4
    641c:	f7ff ffa2 	bl	6364 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6420:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6422:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6424:	462a      	mov	r2, r5
    6426:	4620      	mov	r0, r4
    6428:	f7ff ff9c 	bl	6364 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    642c:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    642e:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6430:	68e1      	ldr	r1, [r4, #12]
    6432:	4620      	mov	r0, r4
    6434:	f7ff ff96 	bl	6364 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6438:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    643a:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    643e:	f002 0203 	and.w	r2, r2, #3
    6442:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6444:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6448:	d10e      	bne.n	6468 <drop_item_locked+0xa2>
		return item->skip.len;
    644a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    644e:	089b      	lsrs	r3, r3, #2
    6450:	d00a      	beq.n	6468 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
    6452:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6454:	68e1      	ldr	r1, [r4, #12]
    6456:	462a      	mov	r2, r5
    6458:	4620      	mov	r0, r4
    645a:	f7ff ff83 	bl	6364 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    645e:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
    6462:	4630      	mov	r0, r6
    6464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
    6468:	69a3      	ldr	r3, [r4, #24]
    646a:	4630      	mov	r0, r6
    646c:	4798      	blx	r3
    646e:	4405      	add	r5, r0
			*user_packet = true;
    6470:	2301      	movs	r3, #1
    6472:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
    6474:	e7ee      	b.n	6454 <drop_item_locked+0x8e>
		item = NULL;
    6476:	4646      	mov	r6, r8
	return item;
    6478:	e7f3      	b.n	6462 <drop_item_locked+0x9c>

0000647a <mpsc_pbuf_init>:
{
    647a:	b538      	push	{r3, r4, r5, lr}
    647c:	460d      	mov	r5, r1
    647e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    6480:	221c      	movs	r2, #28
    6482:	2100      	movs	r1, #0
    6484:	f000 fa31 	bl	68ea <memset>
	buffer->get_wlen = cfg->get_wlen;
    6488:	68eb      	ldr	r3, [r5, #12]
    648a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    648c:	68ab      	ldr	r3, [r5, #8]
    648e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    6490:	682b      	ldr	r3, [r5, #0]
    6492:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    6494:	686b      	ldr	r3, [r5, #4]
    6496:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    6498:	2200      	movs	r2, #0
    649a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    649c:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    649e:	b123      	cbz	r3, 64aa <mpsc_pbuf_init+0x30>
    64a0:	1e59      	subs	r1, r3, #1
    64a2:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    64a4:	bf08      	it	eq
    64a6:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    64aa:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    64ac:	2201      	movs	r2, #1
    64ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
    64b2:	2100      	movs	r1, #0
}
    64b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    64b8:	f000 bc9f 	b.w	6dfa <z_impl_k_sem_init>

000064bc <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    64bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    64c0:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    64c2:	6a03      	ldr	r3, [r0, #32]
    64c4:	3b01      	subs	r3, #1
    64c6:	428b      	cmp	r3, r1
{
    64c8:	4604      	mov	r4, r0
    64ca:	460e      	mov	r6, r1
    64cc:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
    64ce:	d351      	bcc.n	6574 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
    64d0:	2500      	movs	r5, #0
	__asm__ volatile(
    64d2:	f04f 0320 	mov.w	r3, #32
    64d6:	f3ef 8911 	mrs	r9, BASEPRI
    64da:	f383 8812 	msr	BASEPRI_MAX, r3
    64de:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
    64e2:	a901      	add	r1, sp, #4
    64e4:	4620      	mov	r0, r4
    64e6:	f7ff ff1b 	bl	6320 <free_space>

		if (free_wlen >= wlen) {
    64ea:	f8dd a004 	ldr.w	sl, [sp, #4]
    64ee:	45b2      	cmp	sl, r6
    64f0:	d317      	bcc.n	6522 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    64f2:	6822      	ldr	r2, [r4, #0]
			item =
    64f4:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    64f6:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    64fa:	f021 0103 	bic.w	r1, r1, #3
    64fe:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    6502:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    6506:	6821      	ldr	r1, [r4, #0]
    6508:	4632      	mov	r2, r6
    650a:	4620      	mov	r0, r4
    650c:	f7ff ff2a 	bl	6364 <idx_inc>
    6510:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    6512:	f389 8811 	msr	BASEPRI, r9
    6516:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    651a:	4628      	mov	r0, r5
    651c:	b002      	add	sp, #8
    651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
    6522:	b150      	cbz	r0, 653a <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
    6524:	4651      	mov	r1, sl
    6526:	4620      	mov	r0, r4
    6528:	f7ff ff2a 	bl	6380 <add_skip_item>
    652c:	f389 8811 	msr	BASEPRI, r9
    6530:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    6534:	2d00      	cmp	r5, #0
    6536:	d0cb      	beq.n	64d0 <mpsc_pbuf_alloc+0x14>
    6538:	e033      	b.n	65a2 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    653a:	ea57 0308 	orrs.w	r3, r7, r8
    653e:	d020      	beq.n	6582 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
    6540:	f000 fc3a 	bl	6db8 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6544:	b9e8      	cbnz	r0, 6582 <mpsc_pbuf_alloc+0xc6>
    6546:	f389 8811 	msr	BASEPRI, r9
    654a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    654e:	463a      	mov	r2, r7
    6550:	4643      	mov	r3, r8
    6552:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6556:	f7fe fd87 	bl	5068 <z_impl_k_sem_take>
	__asm__ volatile(
    655a:	f04f 0220 	mov.w	r2, #32
    655e:	f3ef 8311 	mrs	r3, BASEPRI
    6562:	f382 8812 	msr	BASEPRI_MAX, r2
    6566:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    656a:	b128      	cbz	r0, 6578 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
    656c:	f383 8811 	msr	BASEPRI, r3
    6570:	f3bf 8f6f 	isb	sy
		return NULL;
    6574:	2500      	movs	r5, #0
    6576:	e7d0      	b.n	651a <mpsc_pbuf_alloc+0x5e>
    6578:	f383 8811 	msr	BASEPRI, r3
    657c:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    6580:	e7d8      	b.n	6534 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    6582:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    6584:	f10d 0303 	add.w	r3, sp, #3
    6588:	f3c2 0240 	ubfx	r2, r2, #1, #1
    658c:	4651      	mov	r1, sl
    658e:	4620      	mov	r0, r4
    6590:	f7ff ff19 	bl	63c6 <drop_item_locked>
    6594:	4605      	mov	r5, r0
    6596:	f389 8811 	msr	BASEPRI, r9
    659a:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    659e:	2800      	cmp	r0, #0
    65a0:	d0e8      	beq.n	6574 <mpsc_pbuf_alloc+0xb8>
    65a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    65a6:	2b00      	cmp	r3, #0
    65a8:	d093      	beq.n	64d2 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
    65aa:	6963      	ldr	r3, [r4, #20]
    65ac:	2b00      	cmp	r3, #0
    65ae:	d08f      	beq.n	64d0 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
    65b0:	4629      	mov	r1, r5
    65b2:	4620      	mov	r0, r4
    65b4:	4798      	blx	r3
    65b6:	e78b      	b.n	64d0 <mpsc_pbuf_alloc+0x14>

000065b8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    65b8:	b570      	push	{r4, r5, r6, lr}
    65ba:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    65bc:	6983      	ldr	r3, [r0, #24]
    65be:	4608      	mov	r0, r1
{
    65c0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    65c2:	4798      	blx	r3
    65c4:	4602      	mov	r2, r0
	__asm__ volatile(
    65c6:	f04f 0320 	mov.w	r3, #32
    65ca:	f3ef 8611 	mrs	r6, BASEPRI
    65ce:	f383 8812 	msr	BASEPRI_MAX, r3
    65d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    65d6:	782b      	ldrb	r3, [r5, #0]
    65d8:	f043 0301 	orr.w	r3, r3, #1
    65dc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    65de:	6861      	ldr	r1, [r4, #4]
    65e0:	4620      	mov	r0, r4
    65e2:	f7ff febf 	bl	6364 <idx_inc>
    65e6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    65e8:	4620      	mov	r0, r4
    65ea:	f7ff fedf 	bl	63ac <max_utilization_update>
	__asm__ volatile(
    65ee:	f386 8811 	msr	BASEPRI, r6
    65f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    65f6:	bd70      	pop	{r4, r5, r6, pc}

000065f8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    65f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65fa:	4604      	mov	r4, r0
	__asm__ volatile(
    65fc:	f04f 0320 	mov.w	r3, #32
    6600:	f3ef 8611 	mrs	r6, BASEPRI
    6604:	f383 8812 	msr	BASEPRI_MAX, r3
    6608:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    660c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    6610:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    6612:	bf88      	it	hi
    6614:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    6616:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
    6618:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    661a:	b132      	cbz	r2, 662a <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
    661c:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    6620:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    6624:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    6628:	d105      	bne.n	6636 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
    662a:	f386 8811 	msr	BASEPRI, r6
    662e:	f3bf 8f6f 	isb	sy
			item = NULL;
    6632:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    6634:	e02e      	b.n	6694 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
    6636:	2802      	cmp	r0, #2
    6638:	d103      	bne.n	6642 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
    663a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    663e:	08ad      	lsrs	r5, r5, #2
    6640:	d105      	bne.n	664e <mpsc_pbuf_claim+0x56>
    6642:	07d0      	lsls	r0, r2, #31
    6644:	d414      	bmi.n	6670 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
    6646:	69a3      	ldr	r3, [r4, #24]
    6648:	4638      	mov	r0, r7
    664a:	4798      	blx	r3
    664c:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    664e:	68a1      	ldr	r1, [r4, #8]
    6650:	462a      	mov	r2, r5
    6652:	4620      	mov	r0, r4
    6654:	f7ff fe86 	bl	6364 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    6658:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    665a:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    665c:	462a      	mov	r2, r5
    665e:	4620      	mov	r0, r4
    6660:	f7ff fe80 	bl	6364 <idx_inc>
				buffer->rd_idx =
    6664:	60e0      	str	r0, [r4, #12]
    6666:	f386 8811 	msr	BASEPRI, r6
    666a:	f3bf 8f6f 	isb	sy
	} while (cont);
    666e:	e7c5      	b.n	65fc <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    6670:	f042 0202 	orr.w	r2, r2, #2
    6674:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    6678:	4638      	mov	r0, r7
    667a:	69a3      	ldr	r3, [r4, #24]
    667c:	68a5      	ldr	r5, [r4, #8]
    667e:	4798      	blx	r3
    6680:	4629      	mov	r1, r5
    6682:	4602      	mov	r2, r0
    6684:	4620      	mov	r0, r4
    6686:	f7ff fe6d 	bl	6364 <idx_inc>
				buffer->tmp_rd_idx =
    668a:	60a0      	str	r0, [r4, #8]
    668c:	f386 8811 	msr	BASEPRI, r6
    6690:	f3bf 8f6f 	isb	sy
}
    6694:	4638      	mov	r0, r7
    6696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006698 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    6698:	b570      	push	{r4, r5, r6, lr}
    669a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    669c:	6983      	ldr	r3, [r0, #24]
    669e:	4608      	mov	r0, r1
{
    66a0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    66a2:	4798      	blx	r3
    66a4:	4602      	mov	r2, r0
	__asm__ volatile(
    66a6:	f04f 0320 	mov.w	r3, #32
    66aa:	f3ef 8611 	mrs	r6, BASEPRI
    66ae:	f383 8812 	msr	BASEPRI_MAX, r3
    66b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    66b6:	782b      	ldrb	r3, [r5, #0]
    66b8:	f36f 0300 	bfc	r3, #0, #1
    66bc:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    66be:	6923      	ldr	r3, [r4, #16]
    66c0:	079b      	lsls	r3, r3, #30
    66c2:	d505      	bpl.n	66d0 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    66c4:	68e1      	ldr	r1, [r4, #12]
    66c6:	69e3      	ldr	r3, [r4, #28]
    66c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    66cc:	429d      	cmp	r5, r3
    66ce:	d112      	bne.n	66f6 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    66d0:	782b      	ldrb	r3, [r5, #0]
    66d2:	f36f 0341 	bfc	r3, #1, #1
    66d6:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    66d8:	68e1      	ldr	r1, [r4, #12]
    66da:	4620      	mov	r0, r4
    66dc:	f7ff fe42 	bl	6364 <idx_inc>
    66e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    66e2:	f386 8811 	msr	BASEPRI, r6
    66e6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    66ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    66ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    66f2:	f7fe bc99 	b.w	5028 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    66f6:	682b      	ldr	r3, [r5, #0]
    66f8:	f360 039f 	bfi	r3, r0, #2, #30
    66fc:	602b      	str	r3, [r5, #0]
    66fe:	e7f0      	b.n	66e2 <mpsc_pbuf_free+0x4a>

00006700 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6700:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    6704:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    6706:	bf88      	it	hi
    6708:	6a02      	ldrhi	r2, [r0, #32]
    670a:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    670c:	1e18      	subs	r0, r3, #0
    670e:	bf18      	it	ne
    6710:	2001      	movne	r0, #1
    6712:	4770      	bx	lr

00006714 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6714:	4770      	bx	lr

00006716 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    6716:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    6718:	075b      	lsls	r3, r3, #29
    671a:	d40b      	bmi.n	6734 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    671c:	6803      	ldr	r3, [r0, #0]
    671e:	8842      	ldrh	r2, [r0, #2]
    6720:	f3c3 2349 	ubfx	r3, r3, #9, #10
    6724:	f3c2 02cb 	ubfx	r2, r2, #3, #12
    6728:	1898      	adds	r0, r3, r2
    672a:	3017      	adds	r0, #23
    672c:	f020 0007 	bic.w	r0, r0, #7
    6730:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    6732:	4770      	bx	lr
	return 0;
    6734:	2000      	movs	r0, #0
}
    6736:	4770      	bx	lr

00006738 <dummy_timestamp>:
}
    6738:	2000      	movs	r0, #0
    673a:	4770      	bx	lr

0000673c <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    673c:	f000 b9fb 	b.w	6b36 <sys_clock_cycle_get_32>

00006740 <atomic_inc>:
{
    6740:	4603      	mov	r3, r0
}
    6742:	f3bf 8f5b 	dmb	ish
    6746:	e853 0f00 	ldrex	r0, [r3]
    674a:	1c42      	adds	r2, r0, #1
    674c:	e843 2100 	strex	r1, r2, [r3]
    6750:	2900      	cmp	r1, #0
    6752:	d1f8      	bne.n	6746 <atomic_inc+0x6>
    6754:	f3bf 8f5b 	dmb	ish
    6758:	4770      	bx	lr

0000675a <z_log_vprintk>:
{
    675a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    675c:	2300      	movs	r3, #0
    675e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6762:	e9cd 3300 	strd	r3, r3, [sp]
    6766:	461a      	mov	r2, r3
    6768:	4619      	mov	r1, r3
    676a:	4618      	mov	r0, r3
    676c:	f7fb f9f2 	bl	1b54 <z_impl_z_log_msg_runtime_vcreate>
}
    6770:	b005      	add	sp, #20
    6772:	f85d fb04 	ldr.w	pc, [sp], #4

00006776 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    6776:	2001      	movs	r0, #1
    6778:	f7fa bfd8 	b.w	172c <z_log_dropped>

0000677c <z_log_get_tag>:
}
    677c:	2000      	movs	r0, #0
    677e:	4770      	bx	lr

00006780 <z_cbprintf_cpy>:
{
    6780:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    6782:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    6786:	1b9b      	subs	r3, r3, r6
    6788:	428b      	cmp	r3, r1
{
    678a:	460c      	mov	r4, r1
    678c:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    678e:	d30a      	bcc.n	67a6 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    6790:	6813      	ldr	r3, [r2, #0]
    6792:	460a      	mov	r2, r1
    6794:	4601      	mov	r1, r0
    6796:	1998      	adds	r0, r3, r6
    6798:	f000 f89c 	bl	68d4 <memcpy>
	desc->off += len;
    679c:	68ab      	ldr	r3, [r5, #8]
    679e:	4423      	add	r3, r4
    67a0:	60ab      	str	r3, [r5, #8]
	return len;
    67a2:	4620      	mov	r0, r4
}
    67a4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    67a6:	f06f 001b 	mvn.w	r0, #27
    67aa:	e7fb      	b.n	67a4 <z_cbprintf_cpy+0x24>

000067ac <z_log_msg_finalize>:
{
    67ac:	b570      	push	{r4, r5, r6, lr}
    67ae:	460e      	mov	r6, r1
    67b0:	4615      	mov	r5, r2
    67b2:	4619      	mov	r1, r3
	if (!msg) {
    67b4:	4604      	mov	r4, r0
    67b6:	b918      	cbnz	r0, 67c0 <z_log_msg_finalize+0x14>
}
    67b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    67bc:	f7fa bfb6 	b.w	172c <z_log_dropped>
	if (data) {
    67c0:	b13b      	cbz	r3, 67d2 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    67c2:	f3c2 2349 	ubfx	r3, r2, #9, #10
    67c6:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    67c8:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    67cc:	4418      	add	r0, r3
    67ce:	f000 f881 	bl	68d4 <memcpy>
	msg->hdr.source = source;
    67d2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    67d6:	4620      	mov	r0, r4
}
    67d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    67dc:	f7fb b932 	b.w	1a44 <z_log_msg_commit>

000067e0 <buffer_write>:
{
    67e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67e2:	4606      	mov	r6, r0
    67e4:	460d      	mov	r5, r1
    67e6:	4614      	mov	r4, r2
    67e8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    67ea:	4621      	mov	r1, r4
    67ec:	4628      	mov	r0, r5
    67ee:	463a      	mov	r2, r7
    67f0:	47b0      	blx	r6
	} while (len != 0);
    67f2:	1a24      	subs	r4, r4, r0
		buf += processed;
    67f4:	4405      	add	r5, r0
	} while (len != 0);
    67f6:	d1f8      	bne.n	67ea <buffer_write+0xa>
}
    67f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000067fa <cbvprintf>:
{
    67fa:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    67fc:	2400      	movs	r4, #0
    67fe:	9400      	str	r4, [sp, #0]
    6800:	f7fa fafa 	bl	df8 <z_cbvprintf_impl>
}
    6804:	b002      	add	sp, #8
    6806:	bd10      	pop	{r4, pc}

00006808 <log_output_flush>:
{
    6808:	b510      	push	{r4, lr}
		     output->control_block->offset,
    680a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    680c:	6881      	ldr	r1, [r0, #8]
{
    680e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    6810:	e9d2 2300 	ldrd	r2, r3, [r2]
    6814:	6800      	ldr	r0, [r0, #0]
    6816:	f7ff ffe3 	bl	67e0 <buffer_write>
	output->control_block->offset = 0;
    681a:	6863      	ldr	r3, [r4, #4]
    681c:	2200      	movs	r2, #0
    681e:	601a      	str	r2, [r3, #0]
}
    6820:	bd10      	pop	{r4, pc}

00006822 <out_func>:
{
    6822:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    6824:	684b      	ldr	r3, [r1, #4]
    6826:	681a      	ldr	r2, [r3, #0]
    6828:	68cb      	ldr	r3, [r1, #12]
    682a:	429a      	cmp	r2, r3
{
    682c:	4605      	mov	r5, r0
    682e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    6830:	d102      	bne.n	6838 <out_func+0x16>
		log_output_flush(out_ctx);
    6832:	4608      	mov	r0, r1
    6834:	f7ff ffe8 	bl	6808 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6838:	6863      	ldr	r3, [r4, #4]
    683a:	f3bf 8f5b 	dmb	ish
    683e:	e853 2f00 	ldrex	r2, [r3]
    6842:	1c51      	adds	r1, r2, #1
    6844:	e843 1000 	strex	r0, r1, [r3]
    6848:	2800      	cmp	r0, #0
    684a:	d1f8      	bne.n	683e <out_func+0x1c>
    684c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    6850:	68a3      	ldr	r3, [r4, #8]
    6852:	549d      	strb	r5, [r3, r2]
}
    6854:	2000      	movs	r0, #0
    6856:	bd38      	pop	{r3, r4, r5, pc}

00006858 <cr_out_func>:
	if (c == '\n') {
    6858:	280a      	cmp	r0, #10
{
    685a:	b538      	push	{r3, r4, r5, lr}
    685c:	4604      	mov	r4, r0
    685e:	460d      	mov	r5, r1
	if (c == '\n') {
    6860:	d102      	bne.n	6868 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    6862:	200d      	movs	r0, #13
    6864:	f7ff ffdd 	bl	6822 <out_func>
	out_func(c, ctx);
    6868:	4629      	mov	r1, r5
    686a:	4620      	mov	r0, r4
    686c:	f7ff ffd9 	bl	6822 <out_func>
}
    6870:	2000      	movs	r0, #0
    6872:	bd38      	pop	{r3, r4, r5, pc}

00006874 <abort_function>:
{
    6874:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6876:	2000      	movs	r0, #0
    6878:	f7fa fe70 	bl	155c <sys_reboot>

0000687c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    687c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    687e:	6800      	ldr	r0, [r0, #0]
    6880:	f7fb be62 	b.w	2548 <z_arm_fatal_error>

00006884 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6884:	2100      	movs	r1, #0
    6886:	2001      	movs	r0, #1
    6888:	f7fb be5e 	b.w	2548 <z_arm_fatal_error>

0000688c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    688c:	b508      	push	{r3, lr}
	handler();
    688e:	f7fb ff09 	bl	26a4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6896:	f7fb bfe1 	b.w	285c <z_arm_exc_exit>

0000689a <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    689a:	2300      	movs	r3, #0
    689c:	f7fb b906 	b.w	1aac <z_impl_z_log_msg_static_create>

000068a0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    68a0:	3901      	subs	r1, #1
    68a2:	4603      	mov	r3, r0
    68a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    68a8:	b90a      	cbnz	r2, 68ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    68aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
    68ac:	4770      	bx	lr
		*d = *s;
    68ae:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    68b2:	e7f7      	b.n	68a4 <strcpy+0x4>

000068b4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    68b4:	4603      	mov	r3, r0
	size_t n = 0;
    68b6:	2000      	movs	r0, #0

	while (*s != '\0') {
    68b8:	5c1a      	ldrb	r2, [r3, r0]
    68ba:	b902      	cbnz	r2, 68be <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    68bc:	4770      	bx	lr
		n++;
    68be:	3001      	adds	r0, #1
    68c0:	e7fa      	b.n	68b8 <strlen+0x4>

000068c2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    68c2:	4603      	mov	r3, r0
	size_t n = 0;
    68c4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    68c6:	5c1a      	ldrb	r2, [r3, r0]
    68c8:	b10a      	cbz	r2, 68ce <strnlen+0xc>
    68ca:	4288      	cmp	r0, r1
    68cc:	d100      	bne.n	68d0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    68ce:	4770      	bx	lr
		n++;
    68d0:	3001      	adds	r0, #1
    68d2:	e7f8      	b.n	68c6 <strnlen+0x4>

000068d4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    68d4:	b510      	push	{r4, lr}
    68d6:	1e43      	subs	r3, r0, #1
    68d8:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    68da:	4291      	cmp	r1, r2
    68dc:	d100      	bne.n	68e0 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    68de:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    68e0:	f811 4b01 	ldrb.w	r4, [r1], #1
    68e4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    68e8:	e7f7      	b.n	68da <memcpy+0x6>

000068ea <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    68ea:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    68ec:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    68ee:	4603      	mov	r3, r0
	while (n > 0) {
    68f0:	4293      	cmp	r3, r2
    68f2:	d100      	bne.n	68f6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    68f4:	4770      	bx	lr
		*(d_byte++) = c_byte;
    68f6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    68fa:	e7f9      	b.n	68f0 <memset+0x6>

000068fc <_stdout_hook_default>:
}
    68fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6900:	4770      	bx	lr

00006902 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6902:	2806      	cmp	r0, #6
    6904:	d108      	bne.n	6918 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    690a:	2201      	movs	r2, #1
    690c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6910:	f3bf 8f4f 	dsb	sy
        __WFE();
    6914:	bf20      	wfe
    while (true)
    6916:	e7fd      	b.n	6914 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6918:	4770      	bx	lr

0000691a <pm_state_exit_post_ops>:
    691a:	2300      	movs	r3, #0
    691c:	f383 8811 	msr	BASEPRI, r3
    6920:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6924:	4770      	bx	lr

00006926 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6926:	6903      	ldr	r3, [r0, #16]
    6928:	b2c9      	uxtb	r1, r1
    692a:	220c      	movs	r2, #12
    692c:	fb01 3302 	mla	r3, r1, r2, r3
    6930:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6932:	f000 0007 	and.w	r0, r0, #7
    6936:	4770      	bx	lr

00006938 <set_on_state>:
	__asm__ volatile(
    6938:	f04f 0320 	mov.w	r3, #32
    693c:	f3ef 8211 	mrs	r2, BASEPRI
    6940:	f383 8812 	msr	BASEPRI_MAX, r3
    6944:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6948:	6803      	ldr	r3, [r0, #0]
    694a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    694e:	f043 0302 	orr.w	r3, r3, #2
    6952:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6954:	f382 8811 	msr	BASEPRI, r2
    6958:	f3bf 8f6f 	isb	sy
}
    695c:	4770      	bx	lr

0000695e <stop>:
{
    695e:	b570      	push	{r4, r5, r6, lr}
    6960:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    6962:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    6964:	f04f 0420 	mov.w	r4, #32
    6968:	f3ef 8511 	mrs	r5, BASEPRI
    696c:	f384 8812 	msr	BASEPRI_MAX, r4
    6970:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6974:	260c      	movs	r6, #12
    6976:	fb06 3401 	mla	r4, r6, r1, r3
    697a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    697c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6980:	d008      	beq.n	6994 <stop+0x36>
    6982:	42a2      	cmp	r2, r4
    6984:	d006      	beq.n	6994 <stop+0x36>
	__asm__ volatile(
    6986:	f385 8811 	msr	BASEPRI, r5
    698a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    698e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6992:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6994:	4371      	muls	r1, r6
    6996:	440b      	add	r3, r1
    6998:	2201      	movs	r2, #1
    699a:	641a      	str	r2, [r3, #64]	; 0x40
    699c:	f385 8811 	msr	BASEPRI, r5
    69a0:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    69a4:	6843      	ldr	r3, [r0, #4]
    69a6:	440b      	add	r3, r1
    69a8:	685b      	ldr	r3, [r3, #4]
    69aa:	4798      	blx	r3
	return 0;
    69ac:	2000      	movs	r0, #0
    69ae:	e7f0      	b.n	6992 <stop+0x34>

000069b0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    69b0:	2280      	movs	r2, #128	; 0x80
    69b2:	f7ff bfd4 	b.w	695e <stop>

000069b6 <async_start>:
{
    69b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69b8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    69ba:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    69bc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    69be:	f04f 0520 	mov.w	r5, #32
    69c2:	f3ef 8611 	mrs	r6, BASEPRI
    69c6:	f385 8812 	msr	BASEPRI_MAX, r5
    69ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    69ce:	250c      	movs	r5, #12
    69d0:	4369      	muls	r1, r5
    69d2:	440c      	add	r4, r1
    69d4:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    69d6:	f005 0c07 	and.w	ip, r5, #7
    69da:	f1bc 0f01 	cmp.w	ip, #1
    69de:	d10b      	bne.n	69f8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    69e0:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    69e2:	f386 8811 	msr	BASEPRI, r6
    69e6:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    69ea:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    69ee:	6843      	ldr	r3, [r0, #4]
    69f0:	585b      	ldr	r3, [r3, r1]
    69f2:	4798      	blx	r3
	return 0;
    69f4:	2000      	movs	r0, #0
}
    69f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    69f8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    69fc:	42af      	cmp	r7, r5
    69fe:	f386 8811 	msr	BASEPRI, r6
    6a02:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    6a06:	bf0c      	ite	eq
    6a08:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    6a0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6a10:	e7f1      	b.n	69f6 <async_start+0x40>

00006a12 <api_start>:
{
    6a12:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6a14:	2480      	movs	r4, #128	; 0x80
    6a16:	9400      	str	r4, [sp, #0]
    6a18:	f7ff ffcd 	bl	69b6 <async_start>
}
    6a1c:	b002      	add	sp, #8
    6a1e:	bd10      	pop	{r4, pc}

00006a20 <onoff_started_callback>:
{
    6a20:	b410      	push	{r4}
	return &data->mgr[type];
    6a22:	6900      	ldr	r0, [r0, #16]
    6a24:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6a26:	241c      	movs	r4, #28
    6a28:	fb03 0004 	mla	r0, r3, r4, r0
    6a2c:	2100      	movs	r1, #0
}
    6a2e:	bc10      	pop	{r4}
	notify(mgr, 0);
    6a30:	4710      	bx	r2

00006a32 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6a32:	2000      	movs	r0, #0
    6a34:	f000 b89b 	b.w	6b6e <nrfx_clock_start>

00006a38 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6a38:	2000      	movs	r0, #0
    6a3a:	f7fd bbfd 	b.w	4238 <nrfx_clock_stop>

00006a3e <blocking_start_callback>:
{
    6a3e:	4610      	mov	r0, r2
    6a40:	f7fe baf2 	b.w	5028 <z_impl_k_sem_give>

00006a44 <irq_connect0>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(SPIM(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(0);
    6a44:	2200      	movs	r2, #0
    6a46:	2101      	movs	r1, #1
    6a48:	2003      	movs	r0, #3
    6a4a:	f7fb be13 	b.w	2674 <z_arm_irq_priority_set>

00006a4e <irq_connect1>:
#endif

#ifdef CONFIG_SPI_1_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(1);
    6a4e:	2200      	movs	r2, #0
    6a50:	2101      	movs	r1, #1
    6a52:	2004      	movs	r0, #4
    6a54:	f7fb be0e 	b.w	2674 <z_arm_irq_priority_set>

00006a58 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    6a58:	b510      	push	{r4, lr}
	while (*count) {
    6a5a:	680b      	ldr	r3, [r1, #0]
    6a5c:	b913      	cbnz	r3, 6a64 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    6a5e:	6013      	str	r3, [r2, #0]
	return NULL;
    6a60:	4618      	mov	r0, r3
    6a62:	e005      	b.n	6a70 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    6a64:	6803      	ldr	r3, [r0, #0]
    6a66:	685c      	ldr	r4, [r3, #4]
    6a68:	b11c      	cbz	r4, 6a72 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    6a6a:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    6a6c:	6803      	ldr	r3, [r0, #0]
    6a6e:	6818      	ldr	r0, [r3, #0]
}
    6a70:	bd10      	pop	{r4, pc}
		++(*current);
    6a72:	3308      	adds	r3, #8
    6a74:	6003      	str	r3, [r0, #0]
		--(*count);
    6a76:	680b      	ldr	r3, [r1, #0]
    6a78:	3b01      	subs	r3, #1
    6a7a:	600b      	str	r3, [r1, #0]
    6a7c:	e7ed      	b.n	6a5a <spi_context_get_next_buf.constprop.0+0x2>

00006a7e <z_log_msg_static_create.constprop.0>:
    6a7e:	2300      	movs	r3, #0
    6a80:	f7fb b814 	b.w	1aac <z_impl_z_log_msg_static_create>

00006a84 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    6a84:	4603      	mov	r3, r0
    6a86:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    6a88:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6a8a:	7919      	ldrb	r1, [r3, #4]
    6a8c:	2301      	movs	r3, #1
    6a8e:	fa03 f101 	lsl.w	r1, r3, r1
    6a92:	6903      	ldr	r3, [r0, #16]
    6a94:	681b      	ldr	r3, [r3, #0]
    6a96:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    6a98:	bf18      	it	ne
    6a9a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    6a9e:	b112      	cbz	r2, 6aa6 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    6aa0:	6883      	ldr	r3, [r0, #8]
    6aa2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    6aa4:	4718      	bx	r3
    6aa6:	6883      	ldr	r3, [r0, #8]
    6aa8:	691b      	ldr	r3, [r3, #16]
    6aaa:	e7fb      	b.n	6aa4 <gpio_pin_set_dt.isra.0+0x20>

00006aac <_spi_context_cs_control>:
{
    6aac:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6aae:	6803      	ldr	r3, [r0, #0]
{
    6ab0:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6ab2:	b1e3      	cbz	r3, 6aee <_spi_context_cs_control+0x42>
    6ab4:	6898      	ldr	r0, [r3, #8]
    6ab6:	b1d0      	cbz	r0, 6aee <_spi_context_cs_control+0x42>
    6ab8:	6805      	ldr	r5, [r0, #0]
    6aba:	b1c5      	cbz	r5, 6aee <_spi_context_cs_control+0x42>
		if (on) {
    6abc:	b149      	cbz	r1, 6ad2 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    6abe:	2101      	movs	r1, #1
    6ac0:	f7ff ffe0 	bl	6a84 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    6ac4:	6823      	ldr	r3, [r4, #0]
    6ac6:	689b      	ldr	r3, [r3, #8]
    6ac8:	6898      	ldr	r0, [r3, #8]
}
    6aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6ace:	f000 baad 	b.w	702c <z_impl_k_busy_wait>
			if (!force_off &&
    6ad2:	b912      	cbnz	r2, 6ada <_spi_context_cs_control+0x2e>
    6ad4:	889b      	ldrh	r3, [r3, #4]
    6ad6:	04db      	lsls	r3, r3, #19
    6ad8:	d409      	bmi.n	6aee <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    6ada:	6880      	ldr	r0, [r0, #8]
    6adc:	f000 faa6 	bl	702c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    6ae0:	6823      	ldr	r3, [r4, #0]
    6ae2:	2100      	movs	r1, #0
    6ae4:	6898      	ldr	r0, [r3, #8]
}
    6ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    6aea:	f7ff bfcb 	b.w	6a84 <gpio_pin_set_dt.isra.0>
}
    6aee:	bd38      	pop	{r3, r4, r5, pc}

00006af0 <spi_context_unlock_unconditionally>:
{
    6af0:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    6af2:	2201      	movs	r2, #1
    6af4:	2100      	movs	r1, #0
{
    6af6:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    6af8:	f7ff ffd8 	bl	6aac <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    6afc:	69a3      	ldr	r3, [r4, #24]
    6afe:	b933      	cbnz	r3, 6b0e <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    6b00:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    6b02:	f104 0010 	add.w	r0, r4, #16
}
    6b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b0a:	f7fe ba8d 	b.w	5028 <z_impl_k_sem_give>
    6b0e:	bd10      	pop	{r4, pc}

00006b10 <spi_nrfx_release>:
{
    6b10:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    6b12:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    6b14:	6803      	ldr	r3, [r0, #0]
    6b16:	428b      	cmp	r3, r1
    6b18:	d106      	bne.n	6b28 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    6b1a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    6b1e:	b934      	cbnz	r4, 6b2e <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    6b20:	f7ff ffe6 	bl	6af0 <spi_context_unlock_unconditionally>
	return 0;
    6b24:	4620      	mov	r0, r4
}
    6b26:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6b28:	f06f 0015 	mvn.w	r0, #21
    6b2c:	e7fb      	b.n	6b26 <spi_nrfx_release+0x16>
		return -EBUSY;
    6b2e:	f06f 000f 	mvn.w	r0, #15
    6b32:	e7f8      	b.n	6b26 <spi_nrfx_release+0x16>

00006b34 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6b34:	4770      	bx	lr

00006b36 <sys_clock_cycle_get_32>:
{
    6b36:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    6b38:	f7fd f8a6 	bl	3c88 <z_nrf_rtc_timer_read>
}
    6b3c:	bd08      	pop	{r3, pc}

00006b3e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6b3e:	f7ff b819 	b.w	5b74 <nrf_cc3xx_platform_init_no_rng>

00006b42 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6b42:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6b44:	f7fb fbf6 	bl	2334 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6b48:	f7fb fcca 	bl	24e0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6b4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6b50:	f7ff b810 	b.w	5b74 <nrf_cc3xx_platform_init_no_rng>

00006b54 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6b54:	4700      	bx	r0

00006b56 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6b56:	f000 ba69 	b.w	702c <z_impl_k_busy_wait>

00006b5a <nrfx_clock_enable>:
{
    6b5a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6b5c:	2000      	movs	r0, #0
    6b5e:	f7fb fd7b 	bl	2658 <arch_irq_is_enabled>
    6b62:	b918      	cbnz	r0, 6b6c <nrfx_clock_enable+0x12>
}
    6b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6b68:	f7fb bd54 	b.w	2614 <arch_irq_enable>
    6b6c:	bd08      	pop	{r3, pc}

00006b6e <nrfx_clock_start>:
    switch (domain)
    6b6e:	b110      	cbz	r0, 6b76 <nrfx_clock_start+0x8>
    6b70:	2801      	cmp	r0, #1
    6b72:	d01d      	beq.n	6bb0 <nrfx_clock_start+0x42>
    6b74:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b7a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b7e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6b82:	03c9      	lsls	r1, r1, #15
    6b84:	d512      	bpl.n	6bac <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6b86:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    6b8a:	2a01      	cmp	r2, #1
    6b8c:	d10e      	bne.n	6bac <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b8e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b96:	2200      	movs	r2, #0
    6b98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6b9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6ba0:	2202      	movs	r2, #2
    6ba2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ba6:	2201      	movs	r2, #1
    6ba8:	609a      	str	r2, [r3, #8]
}
    6baa:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    6bac:	2200      	movs	r2, #0
    6bae:	e7ee      	b.n	6b8e <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6bb4:	2200      	movs	r2, #0
    6bb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6bba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6bbe:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6bc2:	6018      	str	r0, [r3, #0]
}
    6bc4:	4770      	bx	lr

00006bc6 <nrf_gpio_cfg_default>:
{
    6bc6:	b507      	push	{r0, r1, r2, lr}
    6bc8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6bca:	a801      	add	r0, sp, #4
    6bcc:	f7fd fba4 	bl	4318 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6bd6:	2202      	movs	r2, #2
    6bd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    6bdc:	b003      	add	sp, #12
    6bde:	f85d fb04 	ldr.w	pc, [sp], #4

00006be2 <nrf_gpio_pin_set>:
{
    6be2:	b507      	push	{r0, r1, r2, lr}
    6be4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6be6:	a801      	add	r0, sp, #4
    6be8:	f7fd fb96 	bl	4318 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6bec:	9a01      	ldr	r2, [sp, #4]
    6bee:	2301      	movs	r3, #1
    6bf0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    6bf2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    6bf6:	b003      	add	sp, #12
    6bf8:	f85d fb04 	ldr.w	pc, [sp], #4

00006bfc <nrf_gpio_pin_clear>:
{
    6bfc:	b507      	push	{r0, r1, r2, lr}
    6bfe:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c00:	a801      	add	r0, sp, #4
    6c02:	f7fd fb89 	bl	4318 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6c06:	9a01      	ldr	r2, [sp, #4]
    6c08:	2301      	movs	r3, #1
    6c0a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    6c0c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    6c10:	b003      	add	sp, #12
    6c12:	f85d fb04 	ldr.w	pc, [sp], #4

00006c16 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
    6c16:	7f83      	ldrb	r3, [r0, #30]
    6c18:	075a      	lsls	r2, r3, #29
    6c1a:	d40b      	bmi.n	6c34 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    6c1c:	7fc0      	ldrb	r0, [r0, #31]
    6c1e:	28ff      	cmp	r0, #255	; 0xff
    6c20:	d008      	beq.n	6c34 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
    6c22:	079b      	lsls	r3, r3, #30
    6c24:	bf58      	it	pl
    6c26:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
    6c2a:	b909      	cbnz	r1, 6c30 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
    6c2c:	f7ff bfe6 	b.w	6bfc <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    6c30:	f7ff bfd7 	b.w	6be2 <nrf_gpio_pin_set>
}
    6c34:	4770      	bx	lr

00006c36 <finish_transfer>:
{
    6c36:	b510      	push	{r4, lr}
    set_ss_pin_state(p_cb, false);
    6c38:	2100      	movs	r1, #0
{
    6c3a:	4604      	mov	r4, r0
    set_ss_pin_state(p_cb, false);
    6c3c:	f7ff ffeb 	bl	6c16 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
    6c40:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    6c42:	4620      	mov	r0, r4
    p_cb->transfer_in_progress = false;
    6c44:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    6c46:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    6c48:	6861      	ldr	r1, [r4, #4]
    6c4a:	f850 3b08 	ldr.w	r3, [r0], #8
}
    6c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    6c52:	4718      	bx	r3

00006c54 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    6c54:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    6c56:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    6c58:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    6c5a:	bf9c      	itt	ls
    6c5c:	6881      	ldrls	r1, [r0, #8]
    6c5e:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    6c60:	3b01      	subs	r3, #1
    6c62:	1a98      	subs	r0, r3, r2
}
    6c64:	4770      	bx	lr

00006c66 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    6c6a:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6c6e:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    6c70:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6c74:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    6c76:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6c78:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6c7a:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    6c7c:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    6c7e:	d904      	bls.n	6c8a <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    6c80:	f7ff fe28 	bl	68d4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    6c84:	60ec      	str	r4, [r5, #12]
}
    6c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    6c8a:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    6c8c:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    6c90:	f7ff fe20 	bl	68d4 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    6c94:	6868      	ldr	r0, [r5, #4]
    6c96:	4622      	mov	r2, r4
    6c98:	19b9      	adds	r1, r7, r6
    6c9a:	e7f1      	b.n	6c80 <_WriteNoCheck+0x1a>

00006c9c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    6c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    6ca0:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    6ca2:	4606      	mov	r6, r0
    6ca4:	4689      	mov	r9, r1
    6ca6:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    6ca8:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    6cac:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6cae:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6cb0:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    6cb2:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6cb4:	bf28      	it	cs
    6cb6:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    6cb8:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    6cba:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6cbc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    6cc0:	bf28      	it	cs
    6cc2:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6cc4:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    6cc6:	429c      	cmp	r4, r3
    6cc8:	bf28      	it	cs
    6cca:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    6ccc:	4649      	mov	r1, r9
    6cce:	4428      	add	r0, r5
    6cd0:	4622      	mov	r2, r4
    6cd2:	f7ff fdff 	bl	68d4 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    6cd6:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    6cd8:	4425      	add	r5, r4
      WrOff = 0u;
    6cda:	42ab      	cmp	r3, r5
    6cdc:	bf08      	it	eq
    6cde:	2500      	moveq	r5, #0
  } while (NumBytes);
    6ce0:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    6ce2:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    6ce4:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    6ce6:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    6ce8:	d1e0      	bne.n	6cac <_WriteBlocking+0x10>
}
    6cea:	4640      	mov	r0, r8
    6cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006cf0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6cf0:	f7fd bd02 	b.w	46f8 <_DoInit>

00006cf4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6cf4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6cf6:	f7ff fffb 	bl	6cf0 <SEGGER_RTT_Init>

	return 0;
}
    6cfa:	2000      	movs	r0, #0
    6cfc:	bd08      	pop	{r3, pc}

00006cfe <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    6cfe:	4770      	bx	lr

00006d00 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6d00:	b140      	cbz	r0, 6d14 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6d02:	68c3      	ldr	r3, [r0, #12]
    6d04:	7858      	ldrb	r0, [r3, #1]
    6d06:	f010 0001 	ands.w	r0, r0, #1
    6d0a:	bf1e      	ittt	ne
    6d0c:	7818      	ldrbne	r0, [r3, #0]
    6d0e:	fab0 f080 	clzne	r0, r0
    6d12:	0940      	lsrne	r0, r0, #5
}
    6d14:	4770      	bx	lr

00006d16 <z_early_memset>:
	(void) memset(dst, c, n);
    6d16:	f7ff bde8 	b.w	68ea <memset>

00006d1a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6d1a:	f7ff bddb 	b.w	68d4 <memcpy>

00006d1e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6d1e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    6d22:	4313      	orrs	r3, r2
    6d24:	f013 0303 	ands.w	r3, r3, #3
    6d28:	d10c      	bne.n	6d44 <create_free_list+0x26>
	slab->free_list = NULL;
    6d2a:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6d2c:	6881      	ldr	r1, [r0, #8]
    6d2e:	4299      	cmp	r1, r3
    6d30:	d801      	bhi.n	6d36 <create_free_list+0x18>
	return 0;
    6d32:	2000      	movs	r0, #0
    6d34:	4770      	bx	lr
		*(char **)p = slab->free_list;
    6d36:	6941      	ldr	r1, [r0, #20]
    6d38:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    6d3a:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    6d3c:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6d3e:	3301      	adds	r3, #1
		p += slab->block_size;
    6d40:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    6d42:	e7f3      	b.n	6d2c <create_free_list+0xe>
		return -EINVAL;
    6d44:	f06f 0015 	mvn.w	r0, #21
}
    6d48:	4770      	bx	lr

00006d4a <k_mem_slab_init>:
{
    6d4a:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    6d4c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    6d50:	2300      	movs	r3, #0
	slab->buffer = buffer;
    6d52:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    6d54:	6183      	str	r3, [r0, #24]
{
    6d56:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    6d58:	f7ff ffe1 	bl	6d1e <create_free_list>
	if (rc < 0) {
    6d5c:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    6d5e:	bfa8      	it	ge
    6d60:	e9c4 4400 	strdge	r4, r4, [r4]
}
    6d64:	bd10      	pop	{r4, pc}

00006d66 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d68:	4604      	mov	r4, r0
    6d6a:	460d      	mov	r5, r1
	__asm__ volatile(
    6d6c:	f04f 0320 	mov.w	r3, #32
    6d70:	f3ef 8611 	mrs	r6, BASEPRI
    6d74:	f383 8812 	msr	BASEPRI_MAX, r3
    6d78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6d7c:	6947      	ldr	r7, [r0, #20]
    6d7e:	b977      	cbnz	r7, 6d9e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6d80:	f000 f8da 	bl	6f38 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6d84:	b158      	cbz	r0, 6d9e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6d86:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6d88:	6142      	str	r2, [r0, #20]
    6d8a:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6d8c:	f000 f89d 	bl	6eca <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6d90:	4631      	mov	r1, r6
    6d92:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    6d9a:	f7fe bb35 	b.w	5408 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6d9e:	682b      	ldr	r3, [r5, #0]
    6da0:	6962      	ldr	r2, [r4, #20]
    6da2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6da4:	682b      	ldr	r3, [r5, #0]
    6da6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6da8:	69a3      	ldr	r3, [r4, #24]
    6daa:	3b01      	subs	r3, #1
    6dac:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6dae:	f386 8811 	msr	BASEPRI, r6
    6db2:	f3bf 8f6f 	isb	sy
}
    6db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006db8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6db8:	f3ef 8005 	mrs	r0, IPSR
}
    6dbc:	3800      	subs	r0, #0
    6dbe:	bf18      	it	ne
    6dc0:	2001      	movne	r0, #1
    6dc2:	4770      	bx	lr

00006dc4 <z_impl_k_thread_name_set>:
}
    6dc4:	f06f 0057 	mvn.w	r0, #87	; 0x57
    6dc8:	4770      	bx	lr

00006dca <k_thread_name_get>:
}
    6dca:	2000      	movs	r0, #0
    6dcc:	4770      	bx	lr

00006dce <z_pm_save_idle_exit>:
{
    6dce:	b508      	push	{r3, lr}
	pm_system_resume();
    6dd0:	f7fb f9a6 	bl	2120 <pm_system_resume>
}
    6dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6dd8:	f7ff beac 	b.w	6b34 <sys_clock_idle_exit>

00006ddc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6ddc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6de0:	428b      	cmp	r3, r1
    6de2:	d001      	beq.n	6de8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6de4:	f7fe baca 	b.w	537c <z_set_prio>
}
    6de8:	2000      	movs	r0, #0
    6dea:	4770      	bx	lr

00006dec <z_impl_k_mutex_init>:
{
    6dec:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6dee:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6df0:	e9c3 0002 	strd	r0, r0, [r3, #8]
    6df4:	e9c3 3300 	strd	r3, r3, [r3]
}
    6df8:	4770      	bx	lr

00006dfa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    6dfa:	b13a      	cbz	r2, 6e0c <z_impl_k_sem_init+0x12>
    6dfc:	428a      	cmp	r2, r1
    6dfe:	d305      	bcc.n	6e0c <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    6e00:	e9c0 1202 	strd	r1, r2, [r0, #8]
    6e04:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    6e08:	2000      	movs	r0, #0
    6e0a:	4770      	bx	lr
		return -EINVAL;
    6e0c:	f06f 0015 	mvn.w	r0, #21
}
    6e10:	4770      	bx	lr

00006e12 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6e12:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6e16:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6e18:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6e1a:	2300      	movs	r3, #0
	node->prev = NULL;
    6e1c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6e20:	4770      	bx	lr

00006e22 <unpend_thread_no_timeout>:
{
    6e22:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6e24:	f7ff fff5 	bl	6e12 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6e28:	7b43      	ldrb	r3, [r0, #13]
    6e2a:	f023 0302 	bic.w	r3, r3, #2
    6e2e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6e30:	2300      	movs	r3, #0
    6e32:	6083      	str	r3, [r0, #8]
}
    6e34:	bd08      	pop	{r3, pc}

00006e36 <z_thread_timeout>:
{
    6e36:	b510      	push	{r4, lr}
    6e38:	4601      	mov	r1, r0
	__asm__ volatile(
    6e3a:	f04f 0320 	mov.w	r3, #32
    6e3e:	f3ef 8411 	mrs	r4, BASEPRI
    6e42:	f383 8812 	msr	BASEPRI_MAX, r3
    6e46:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6e4a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6e4e:	f013 0f28 	tst.w	r3, #40	; 0x28
    6e52:	d10d      	bne.n	6e70 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6e54:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6e58:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    6e5a:	b10b      	cbz	r3, 6e60 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    6e5c:	f7ff ffe1 	bl	6e22 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6e60:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6e64:	f023 0314 	bic.w	r3, r3, #20
    6e68:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    6e6c:	f7fe f990 	bl	5190 <ready_thread>
	__asm__ volatile(
    6e70:	f384 8811 	msr	BASEPRI, r4
    6e74:	f3bf 8f6f 	isb	sy
}
    6e78:	bd10      	pop	{r4, pc}

00006e7a <add_to_waitq_locked>:
{
    6e7a:	b538      	push	{r3, r4, r5, lr}
    6e7c:	4604      	mov	r4, r0
    6e7e:	460d      	mov	r5, r1
	unready_thread(thread);
    6e80:	f7fe f9ba 	bl	51f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6e84:	7b63      	ldrb	r3, [r4, #13]
    6e86:	f043 0302 	orr.w	r3, r3, #2
    6e8a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6e8c:	b1e5      	cbz	r5, 6ec8 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    6e8e:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    6e90:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e92:	429d      	cmp	r5, r3
    6e94:	d109      	bne.n	6eaa <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    6e96:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6e98:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6e9c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6e9e:	606c      	str	r4, [r5, #4]
}
    6ea0:	e012      	b.n	6ec8 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    6ea2:	686a      	ldr	r2, [r5, #4]
    6ea4:	4293      	cmp	r3, r2
    6ea6:	d0f6      	beq.n	6e96 <add_to_waitq_locked+0x1c>
    6ea8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6eaa:	2b00      	cmp	r3, #0
    6eac:	d0f3      	beq.n	6e96 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    6eae:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6eb2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    6eb6:	428a      	cmp	r2, r1
    6eb8:	d0f3      	beq.n	6ea2 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6eba:	4291      	cmp	r1, r2
    6ebc:	ddf1      	ble.n	6ea2 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    6ebe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6ec0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6ec4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6ec6:	605c      	str	r4, [r3, #4]
}
    6ec8:	bd38      	pop	{r3, r4, r5, pc}

00006eca <z_ready_thread>:
{
    6eca:	b510      	push	{r4, lr}
	__asm__ volatile(
    6ecc:	f04f 0320 	mov.w	r3, #32
    6ed0:	f3ef 8411 	mrs	r4, BASEPRI
    6ed4:	f383 8812 	msr	BASEPRI_MAX, r3
    6ed8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    6edc:	f7fe f958 	bl	5190 <ready_thread>
	__asm__ volatile(
    6ee0:	f384 8811 	msr	BASEPRI, r4
    6ee4:	f3bf 8f6f 	isb	sy
}
    6ee8:	bd10      	pop	{r4, pc}

00006eea <z_unpend_thread_no_timeout>:
{
    6eea:	b508      	push	{r3, lr}
	__asm__ volatile(
    6eec:	f04f 0320 	mov.w	r3, #32
    6ef0:	f3ef 8111 	mrs	r1, BASEPRI
    6ef4:	f383 8812 	msr	BASEPRI_MAX, r3
    6ef8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    6efc:	f7ff ff91 	bl	6e22 <unpend_thread_no_timeout>
	__asm__ volatile(
    6f00:	f381 8811 	msr	BASEPRI, r1
    6f04:	f3bf 8f6f 	isb	sy
}
    6f08:	bd08      	pop	{r3, pc}

00006f0a <z_unpend1_no_timeout>:
{
    6f0a:	b508      	push	{r3, lr}
    6f0c:	4603      	mov	r3, r0
	__asm__ volatile(
    6f0e:	f04f 0220 	mov.w	r2, #32
    6f12:	f3ef 8111 	mrs	r1, BASEPRI
    6f16:	f382 8812 	msr	BASEPRI_MAX, r2
    6f1a:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6f1e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f20:	4283      	cmp	r3, r0
    6f22:	d007      	beq.n	6f34 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    6f24:	b108      	cbz	r0, 6f2a <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    6f26:	f7ff ff7c 	bl	6e22 <unpend_thread_no_timeout>
	__asm__ volatile(
    6f2a:	f381 8811 	msr	BASEPRI, r1
    6f2e:	f3bf 8f6f 	isb	sy
}
    6f32:	bd08      	pop	{r3, pc}
    6f34:	2000      	movs	r0, #0
    6f36:	e7f8      	b.n	6f2a <z_unpend1_no_timeout+0x20>

00006f38 <z_unpend_first_thread>:
{
    6f38:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6f3a:	f04f 0320 	mov.w	r3, #32
    6f3e:	f3ef 8511 	mrs	r5, BASEPRI
    6f42:	f383 8812 	msr	BASEPRI_MAX, r3
    6f46:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6f4a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f4c:	42a0      	cmp	r0, r4
    6f4e:	d00d      	beq.n	6f6c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    6f50:	b134      	cbz	r4, 6f60 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    6f52:	4620      	mov	r0, r4
    6f54:	f7ff ff65 	bl	6e22 <unpend_thread_no_timeout>
    6f58:	f104 0018 	add.w	r0, r4, #24
    6f5c:	f000 f81e 	bl	6f9c <z_abort_timeout>
	__asm__ volatile(
    6f60:	f385 8811 	msr	BASEPRI, r5
    6f64:	f3bf 8f6f 	isb	sy
}
    6f68:	4620      	mov	r0, r4
    6f6a:	bd38      	pop	{r3, r4, r5, pc}
    6f6c:	2400      	movs	r4, #0
    6f6e:	e7f7      	b.n	6f60 <z_unpend_first_thread+0x28>

00006f70 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6f70:	4603      	mov	r3, r0
    6f72:	b920      	cbnz	r0, 6f7e <z_reschedule_irqlock+0xe>
    6f74:	f3ef 8205 	mrs	r2, IPSR
    6f78:	b90a      	cbnz	r2, 6f7e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    6f7a:	f7fb bbb3 	b.w	26e4 <arch_swap>
    6f7e:	f383 8811 	msr	BASEPRI, r3
    6f82:	f3bf 8f6f 	isb	sy
}
    6f86:	4770      	bx	lr

00006f88 <z_reschedule_unlocked>:
	__asm__ volatile(
    6f88:	f04f 0320 	mov.w	r3, #32
    6f8c:	f3ef 8011 	mrs	r0, BASEPRI
    6f90:	f383 8812 	msr	BASEPRI_MAX, r3
    6f94:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6f98:	f7ff bfea 	b.w	6f70 <z_reschedule_irqlock>

00006f9c <z_abort_timeout>:
{
    6f9c:	b510      	push	{r4, lr}
    6f9e:	f04f 0220 	mov.w	r2, #32
    6fa2:	f3ef 8411 	mrs	r4, BASEPRI
    6fa6:	f382 8812 	msr	BASEPRI_MAX, r2
    6faa:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6fae:	6803      	ldr	r3, [r0, #0]
    6fb0:	b13b      	cbz	r3, 6fc2 <z_abort_timeout+0x26>
			remove_timeout(to);
    6fb2:	f7fe fc15 	bl	57e0 <remove_timeout>
			ret = 0;
    6fb6:	2000      	movs	r0, #0
	__asm__ volatile(
    6fb8:	f384 8811 	msr	BASEPRI, r4
    6fbc:	f3bf 8f6f 	isb	sy
}
    6fc0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6fc2:	f06f 0015 	mvn.w	r0, #21
    6fc6:	e7f7      	b.n	6fb8 <z_abort_timeout+0x1c>

00006fc8 <z_get_next_timeout_expiry>:
{
    6fc8:	b510      	push	{r4, lr}
	__asm__ volatile(
    6fca:	f04f 0320 	mov.w	r3, #32
    6fce:	f3ef 8411 	mrs	r4, BASEPRI
    6fd2:	f383 8812 	msr	BASEPRI_MAX, r3
    6fd6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6fda:	f7fe fbd9 	bl	5790 <next_timeout>
	__asm__ volatile(
    6fde:	f384 8811 	msr	BASEPRI, r4
    6fe2:	f3bf 8f6f 	isb	sy
}
    6fe6:	bd10      	pop	{r4, pc}

00006fe8 <z_set_timeout_expiry>:
{
    6fe8:	b570      	push	{r4, r5, r6, lr}
    6fea:	4604      	mov	r4, r0
    6fec:	460d      	mov	r5, r1
	__asm__ volatile(
    6fee:	f04f 0320 	mov.w	r3, #32
    6ff2:	f3ef 8611 	mrs	r6, BASEPRI
    6ff6:	f383 8812 	msr	BASEPRI_MAX, r3
    6ffa:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    6ffe:	f7fe fbc7 	bl	5790 <next_timeout>
			      || (ticks <= next_to);
    7002:	2801      	cmp	r0, #1
    7004:	dd07      	ble.n	7016 <z_set_timeout_expiry+0x2e>
    7006:	42a0      	cmp	r0, r4
    7008:	db05      	blt.n	7016 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    700a:	42a0      	cmp	r0, r4
    700c:	4629      	mov	r1, r5
    700e:	bfa8      	it	ge
    7010:	4620      	movge	r0, r4
    7012:	f7fc ffb1 	bl	3f78 <sys_clock_set_timeout>
	__asm__ volatile(
    7016:	f386 8811 	msr	BASEPRI, r6
    701a:	f3bf 8f6f 	isb	sy
}
    701e:	bd70      	pop	{r4, r5, r6, pc}

00007020 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7020:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7022:	f7fe fcd1 	bl	59c8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7026:	bd08      	pop	{r3, pc}

00007028 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    7028:	f7fe bcce 	b.w	59c8 <sys_clock_tick_get>

0000702c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    702c:	b108      	cbz	r0, 7032 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    702e:	f7fc b8b7 	b.w	31a0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7032:	4770      	bx	lr

00007034 <k_timer_init>:
	timer->status = 0U;
    7034:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    7036:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    703a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    703e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    7042:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    7046:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    7048:	6343      	str	r3, [r0, #52]	; 0x34
}
    704a:	4770      	bx	lr

0000704c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    704c:	b510      	push	{r4, lr}
    704e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    7050:	f7ff ffa4 	bl	6f9c <z_abort_timeout>

	if (inactive) {
    7054:	b9b0      	cbnz	r0, 7084 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    7056:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7058:	b10b      	cbz	r3, 705e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    705a:	4620      	mov	r0, r4
    705c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    705e:	f104 0018 	add.w	r0, r4, #24
    7062:	f7ff ff52 	bl	6f0a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    7066:	b168      	cbz	r0, 7084 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7068:	f7ff ff2f 	bl	6eca <z_ready_thread>
	__asm__ volatile(
    706c:	f04f 0320 	mov.w	r3, #32
    7070:	f3ef 8011 	mrs	r0, BASEPRI
    7074:	f383 8812 	msr	BASEPRI_MAX, r3
    7078:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    707c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7080:	f7ff bf76 	b.w	6f70 <z_reschedule_irqlock>
    7084:	bd10      	pop	{r4, pc}

00007086 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7086:	4770      	bx	lr
