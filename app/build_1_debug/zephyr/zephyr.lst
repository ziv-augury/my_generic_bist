
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	60 0e 00 20 f5 17 00 00 11 40 00 00 ad 17 00 00     `.. .....@......
  10:	ad 17 00 00 ad 17 00 00 ad 17 00 00 00 00 00 00     ................
	...
  2c:	4d 14 00 00 ad 17 00 00 00 00 00 00 f5 13 00 00     M...............
  3c:	ad 17 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  50:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  60:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  70:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  80:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  90:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  a0:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  b0:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  c0:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  d0:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  e0:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...
  f0:	2d 15 00 00 2d 15 00 00 2d 15 00 00 2d 15 00 00     -...-...-...-...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b974 	b.w	400 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	4688      	mov	r8, r1
     13c:	2b00      	cmp	r3, #0
     13e:	d14d      	bne.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     140:	428a      	cmp	r2, r1
     142:	4694      	mov	ip, r2
     144:	d968      	bls.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     146:	fab2 f282 	clz	r2, r2
     14a:	b152      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14c:	fa01 f302 	lsl.w	r3, r1, r2
     150:	f1c2 0120 	rsb	r1, r2, #32
     154:	fa20 f101 	lsr.w	r1, r0, r1
     158:	fa0c fc02 	lsl.w	ip, ip, r2
     15c:	ea41 0803 	orr.w	r8, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 451c 	mov.w	r5, ip, lsr #16
     166:	0c21      	lsrs	r1, r4, #16
     168:	fbb8 fef5 	udiv	lr, r8, r5
     16c:	fa1f f78c 	uxth.w	r7, ip
     170:	fb05 831e 	mls	r3, r5, lr, r8
     174:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     178:	fb0e f107 	mul.w	r1, lr, r7
     17c:	4299      	cmp	r1, r3
     17e:	d90b      	bls.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     180:	eb1c 0303 	adds.w	r3, ip, r3
     184:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     188:	f080 811e 	bcs.w	3c8 <CONFIG_IDLE_STACK_SIZE+0x288>
     18c:	4299      	cmp	r1, r3
     18e:	f240 811b 	bls.w	3c8 <CONFIG_IDLE_STACK_SIZE+0x288>
     192:	f1ae 0e02 	sub.w	lr, lr, #2
     196:	4463      	add	r3, ip
     198:	1a5b      	subs	r3, r3, r1
     19a:	b2a4      	uxth	r4, r4
     19c:	fbb3 f0f5 	udiv	r0, r3, r5
     1a0:	fb05 3310 	mls	r3, r5, r0, r3
     1a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a8:	fb00 f707 	mul.w	r7, r0, r7
     1ac:	42a7      	cmp	r7, r4
     1ae:	d90a      	bls.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     1b0:	eb1c 0404 	adds.w	r4, ip, r4
     1b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b8:	f080 8108 	bcs.w	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     1bc:	42a7      	cmp	r7, r4
     1be:	f240 8105 	bls.w	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     1c2:	4464      	add	r4, ip
     1c4:	3802      	subs	r0, #2
     1c6:	1be4      	subs	r4, r4, r7
     1c8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1cc:	2100      	movs	r1, #0
     1ce:	b11e      	cbz	r6, 1d8 <CONFIG_IDLE_STACK_SIZE+0x98>
     1d0:	40d4      	lsrs	r4, r2
     1d2:	2300      	movs	r3, #0
     1d4:	e9c6 4300 	strd	r4, r3, [r6]
     1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1dc:	428b      	cmp	r3, r1
     1de:	d908      	bls.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e0:	2e00      	cmp	r6, #0
     1e2:	f000 80ee 	beq.w	3c2 <CONFIG_IDLE_STACK_SIZE+0x282>
     1e6:	2100      	movs	r1, #0
     1e8:	e9c6 0500 	strd	r0, r5, [r6]
     1ec:	4608      	mov	r0, r1
     1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1f2:	fab3 f183 	clz	r1, r3
     1f6:	2900      	cmp	r1, #0
     1f8:	d14a      	bne.n	290 <CONFIG_IDLE_STACK_SIZE+0x150>
     1fa:	42ab      	cmp	r3, r5
     1fc:	d302      	bcc.n	204 <CONFIG_IDLE_STACK_SIZE+0xc4>
     1fe:	4282      	cmp	r2, r0
     200:	f200 80f9 	bhi.w	3f6 <CONFIG_IDLE_STACK_SIZE+0x2b6>
     204:	1a84      	subs	r4, r0, r2
     206:	eb65 0303 	sbc.w	r3, r5, r3
     20a:	2001      	movs	r0, #1
     20c:	4698      	mov	r8, r3
     20e:	2e00      	cmp	r6, #0
     210:	d0e2      	beq.n	1d8 <CONFIG_IDLE_STACK_SIZE+0x98>
     212:	e9c6 4800 	strd	r4, r8, [r6]
     216:	e7df      	b.n	1d8 <CONFIG_IDLE_STACK_SIZE+0x98>
     218:	b902      	cbnz	r2, 21c <CONFIG_IDLE_STACK_SIZE+0xdc>
     21a:	deff      	udf	#255	; 0xff
     21c:	fab2 f282 	clz	r2, r2
     220:	2a00      	cmp	r2, #0
     222:	f040 8091 	bne.w	348 <CONFIG_IDLE_STACK_SIZE+0x208>
     226:	eba1 050c 	sub.w	r5, r1, ip
     22a:	ea4f 471c 	mov.w	r7, ip, lsr #16
     22e:	fa1f fe8c 	uxth.w	lr, ip
     232:	2101      	movs	r1, #1
     234:	fbb5 f3f7 	udiv	r3, r5, r7
     238:	fb07 5013 	mls	r0, r7, r3, r5
     23c:	0c25      	lsrs	r5, r4, #16
     23e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     242:	fb0e f003 	mul.w	r0, lr, r3
     246:	42a8      	cmp	r0, r5
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	eb1c 0505 	adds.w	r5, ip, r5
     24e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     252:	d202      	bcs.n	25a <CONFIG_IDLE_STACK_SIZE+0x11a>
     254:	42a8      	cmp	r0, r5
     256:	f200 80cb 	bhi.w	3f0 <CONFIG_IDLE_STACK_SIZE+0x2b0>
     25a:	4643      	mov	r3, r8
     25c:	1a2d      	subs	r5, r5, r0
     25e:	b2a4      	uxth	r4, r4
     260:	fbb5 f0f7 	udiv	r0, r5, r7
     264:	fb07 5510 	mls	r5, r7, r0, r5
     268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     26c:	fb0e fe00 	mul.w	lr, lr, r0
     270:	45a6      	cmp	lr, r4
     272:	d908      	bls.n	286 <CONFIG_IDLE_STACK_SIZE+0x146>
     274:	eb1c 0404 	adds.w	r4, ip, r4
     278:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     27c:	d202      	bcs.n	284 <CONFIG_IDLE_STACK_SIZE+0x144>
     27e:	45a6      	cmp	lr, r4
     280:	f200 80bb 	bhi.w	3fa <CONFIG_IDLE_STACK_SIZE+0x2ba>
     284:	4628      	mov	r0, r5
     286:	eba4 040e 	sub.w	r4, r4, lr
     28a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     28e:	e79e      	b.n	1ce <CONFIG_IDLE_STACK_SIZE+0x8e>
     290:	f1c1 0720 	rsb	r7, r1, #32
     294:	408b      	lsls	r3, r1
     296:	fa22 fc07 	lsr.w	ip, r2, r7
     29a:	ea4c 0c03 	orr.w	ip, ip, r3
     29e:	fa20 f407 	lsr.w	r4, r0, r7
     2a2:	fa05 f301 	lsl.w	r3, r5, r1
     2a6:	431c      	orrs	r4, r3
     2a8:	40fd      	lsrs	r5, r7
     2aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
     2ae:	fa00 f301 	lsl.w	r3, r0, r1
     2b2:	fbb5 f8f9 	udiv	r8, r5, r9
     2b6:	0c20      	lsrs	r0, r4, #16
     2b8:	fa1f fe8c 	uxth.w	lr, ip
     2bc:	fb09 5518 	mls	r5, r9, r8, r5
     2c0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     2c4:	fb08 f00e 	mul.w	r0, r8, lr
     2c8:	42a8      	cmp	r0, r5
     2ca:	fa02 f201 	lsl.w	r2, r2, r1
     2ce:	d90b      	bls.n	2e8 <CONFIG_IDLE_STACK_SIZE+0x1a8>
     2d0:	eb1c 0505 	adds.w	r5, ip, r5
     2d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     2d8:	f080 8088 	bcs.w	3ec <CONFIG_IDLE_STACK_SIZE+0x2ac>
     2dc:	42a8      	cmp	r0, r5
     2de:	f240 8085 	bls.w	3ec <CONFIG_IDLE_STACK_SIZE+0x2ac>
     2e2:	f1a8 0802 	sub.w	r8, r8, #2
     2e6:	4465      	add	r5, ip
     2e8:	1a2d      	subs	r5, r5, r0
     2ea:	b2a4      	uxth	r4, r4
     2ec:	fbb5 f0f9 	udiv	r0, r5, r9
     2f0:	fb09 5510 	mls	r5, r9, r0, r5
     2f4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     2f8:	fb00 fe0e 	mul.w	lr, r0, lr
     2fc:	45ae      	cmp	lr, r5
     2fe:	d908      	bls.n	312 <CONFIG_IDLE_STACK_SIZE+0x1d2>
     300:	eb1c 0505 	adds.w	r5, ip, r5
     304:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     308:	d26c      	bcs.n	3e4 <CONFIG_IDLE_STACK_SIZE+0x2a4>
     30a:	45ae      	cmp	lr, r5
     30c:	d96a      	bls.n	3e4 <CONFIG_IDLE_STACK_SIZE+0x2a4>
     30e:	3802      	subs	r0, #2
     310:	4465      	add	r5, ip
     312:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     316:	fba0 9402 	umull	r9, r4, r0, r2
     31a:	eba5 050e 	sub.w	r5, r5, lr
     31e:	42a5      	cmp	r5, r4
     320:	46c8      	mov	r8, r9
     322:	46a6      	mov	lr, r4
     324:	d356      	bcc.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     326:	d053      	beq.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     328:	b15e      	cbz	r6, 342 <CONFIG_IDLE_STACK_SIZE+0x202>
     32a:	ebb3 0208 	subs.w	r2, r3, r8
     32e:	eb65 050e 	sbc.w	r5, r5, lr
     332:	fa05 f707 	lsl.w	r7, r5, r7
     336:	fa22 f301 	lsr.w	r3, r2, r1
     33a:	40cd      	lsrs	r5, r1
     33c:	431f      	orrs	r7, r3
     33e:	e9c6 7500 	strd	r7, r5, [r6]
     342:	2100      	movs	r1, #0
     344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     348:	f1c2 0320 	rsb	r3, r2, #32
     34c:	fa20 f103 	lsr.w	r1, r0, r3
     350:	fa0c fc02 	lsl.w	ip, ip, r2
     354:	fa25 f303 	lsr.w	r3, r5, r3
     358:	4095      	lsls	r5, r2
     35a:	430d      	orrs	r5, r1
     35c:	ea4f 471c 	mov.w	r7, ip, lsr #16
     360:	fa1f fe8c 	uxth.w	lr, ip
     364:	fbb3 f1f7 	udiv	r1, r3, r7
     368:	fb07 3011 	mls	r0, r7, r1, r3
     36c:	0c2b      	lsrs	r3, r5, #16
     36e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     372:	fb01 f00e 	mul.w	r0, r1, lr
     376:	4298      	cmp	r0, r3
     378:	fa04 f402 	lsl.w	r4, r4, r2
     37c:	d908      	bls.n	390 <CONFIG_IDLE_STACK_SIZE+0x250>
     37e:	eb1c 0303 	adds.w	r3, ip, r3
     382:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     386:	d22f      	bcs.n	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     388:	4298      	cmp	r0, r3
     38a:	d92d      	bls.n	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     38c:	3902      	subs	r1, #2
     38e:	4463      	add	r3, ip
     390:	1a1b      	subs	r3, r3, r0
     392:	b2ad      	uxth	r5, r5
     394:	fbb3 f0f7 	udiv	r0, r3, r7
     398:	fb07 3310 	mls	r3, r7, r0, r3
     39c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3a0:	fb00 f30e 	mul.w	r3, r0, lr
     3a4:	42ab      	cmp	r3, r5
     3a6:	d908      	bls.n	3ba <CONFIG_IDLE_STACK_SIZE+0x27a>
     3a8:	eb1c 0505 	adds.w	r5, ip, r5
     3ac:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     3b0:	d216      	bcs.n	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     3b2:	42ab      	cmp	r3, r5
     3b4:	d914      	bls.n	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     3b6:	3802      	subs	r0, #2
     3b8:	4465      	add	r5, ip
     3ba:	1aed      	subs	r5, r5, r3
     3bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3c0:	e738      	b.n	234 <CONFIG_IDLE_STACK_SIZE+0xf4>
     3c2:	4631      	mov	r1, r6
     3c4:	4630      	mov	r0, r6
     3c6:	e707      	b.n	1d8 <CONFIG_IDLE_STACK_SIZE+0x98>
     3c8:	4686      	mov	lr, r0
     3ca:	e6e5      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     3cc:	4618      	mov	r0, r3
     3ce:	e6fa      	b.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     3d0:	454b      	cmp	r3, r9
     3d2:	d2a9      	bcs.n	328 <CONFIG_IDLE_STACK_SIZE+0x1e8>
     3d4:	ebb9 0802 	subs.w	r8, r9, r2
     3d8:	eb64 0e0c 	sbc.w	lr, r4, ip
     3dc:	3801      	subs	r0, #1
     3de:	e7a3      	b.n	328 <CONFIG_IDLE_STACK_SIZE+0x1e8>
     3e0:	4640      	mov	r0, r8
     3e2:	e7ea      	b.n	3ba <CONFIG_IDLE_STACK_SIZE+0x27a>
     3e4:	4620      	mov	r0, r4
     3e6:	e794      	b.n	312 <CONFIG_IDLE_STACK_SIZE+0x1d2>
     3e8:	4641      	mov	r1, r8
     3ea:	e7d1      	b.n	390 <CONFIG_IDLE_STACK_SIZE+0x250>
     3ec:	46d0      	mov	r8, sl
     3ee:	e77b      	b.n	2e8 <CONFIG_IDLE_STACK_SIZE+0x1a8>
     3f0:	3b02      	subs	r3, #2
     3f2:	4465      	add	r5, ip
     3f4:	e732      	b.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     3f6:	4608      	mov	r0, r1
     3f8:	e709      	b.n	20e <CONFIG_IDLE_STACK_SIZE+0xce>
     3fa:	4464      	add	r4, ip
     3fc:	3802      	subs	r0, #2
     3fe:	e742      	b.n	286 <CONFIG_IDLE_STACK_SIZE+0x146>

00000400 <__aeabi_idiv0>:
     400:	4770      	bx	lr
     402:	bf00      	nop

00000404 <main>:

#include "bist_manager.h"


void main(void)
{
     404:	b508      	push	{r3, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
     406:	4906      	ldr	r1, [pc, #24]	; (420 <main+0x1c>)
     408:	4806      	ldr	r0, [pc, #24]	; (424 <main+0x20>)
     40a:	f003 fbd6 	bl	3bba <printk>
	run_all_bists();
     40e:	f000 f80b 	bl	428 <run_all_bists>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     412:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     416:	2100      	movs	r1, #0
     418:	f002 ffb0 	bl	337c <z_impl_k_sleep>
	k_sleep(K_MSEC(5000));
}
     41c:	bd08      	pop	{r3, pc}
     41e:	bf00      	nop
     420:	00004d38 	.word	0x00004d38
     424:	00004d44 	.word	0x00004d44

00000428 <run_all_bists>:
#include <sys/printk.h>

#include "bist_manager.h"

void run_all_bists(void)
{
     428:	b508      	push	{r3, lr}
    printk("Enter the Bist!\n");
     42a:	4802      	ldr	r0, [pc, #8]	; (434 <run_all_bists+0xc>)
     42c:	f003 fbc5 	bl	3bba <printk>
     430:	bd08      	pop	{r3, pc}
     432:	bf00      	nop
     434:	00004d58 	.word	0x00004d58

00000438 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     438:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     43a:	680b      	ldr	r3, [r1, #0]
     43c:	3301      	adds	r3, #1
     43e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     440:	4b01      	ldr	r3, [pc, #4]	; (448 <char_out+0x10>)
     442:	681b      	ldr	r3, [r3, #0]
     444:	4798      	blx	r3
}
     446:	bd08      	pop	{r3, pc}
     448:	20000000 	.word	0x20000000

0000044c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     44c:	b500      	push	{lr}
     44e:	b083      	sub	sp, #12
     450:	4602      	mov	r2, r0
     452:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     454:	2100      	movs	r1, #0
     456:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     458:	a901      	add	r1, sp, #4
     45a:	4803      	ldr	r0, [pc, #12]	; (468 <vprintk+0x1c>)
     45c:	f000 fa52 	bl	904 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     460:	b003      	add	sp, #12
     462:	f85d fb04 	ldr.w	pc, [sp], #4
     466:	bf00      	nop
     468:	00000439 	.word	0x00000439

0000046c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     46c:	b510      	push	{r4, lr}
     46e:	b084      	sub	sp, #16
     470:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     472:	9001      	str	r0, [sp, #4]
     474:	9102      	str	r1, [sp, #8]
     476:	2100      	movs	r1, #0
     478:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     47a:	a901      	add	r1, sp, #4
     47c:	4805      	ldr	r0, [pc, #20]	; (494 <vsnprintk+0x28>)
     47e:	f000 fa41 	bl	904 <cbvprintf>

	if (ctx.count < ctx.max) {
     482:	9b03      	ldr	r3, [sp, #12]
     484:	9a02      	ldr	r2, [sp, #8]
     486:	4293      	cmp	r3, r2
     488:	da01      	bge.n	48e <vsnprintk+0x22>
		str[ctx.count] = '\0';
     48a:	2200      	movs	r2, #0
     48c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     48e:	9803      	ldr	r0, [sp, #12]
     490:	b004      	add	sp, #16
     492:	bd10      	pop	{r4, pc}
     494:	00003b8b 	.word	0x00003b8b

00000498 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     49c:	b083      	sub	sp, #12
     49e:	4604      	mov	r4, r0
     4a0:	4608      	mov	r0, r1
     4a2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4a4:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4a6:	f013 0f08 	tst.w	r3, #8
     4aa:	d105      	bne.n	4b8 <process_event+0x20>
     4ac:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     4b0:	2300      	movs	r3, #0
     4b2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     4b4:	9301      	str	r3, [sp, #4]
}
     4b6:	e069      	b.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
		if (evt == EVT_COMPLETE) {
     4b8:	2901      	cmp	r1, #1
     4ba:	d009      	beq.n	4d0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4bc:	f043 0320 	orr.w	r3, r3, #32
     4c0:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4c2:	f385 8811 	msr	BASEPRI, r5
     4c6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4ca:	b003      	add	sp, #12
     4cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4d0:	f043 0310 	orr.w	r3, r3, #16
     4d4:	8323      	strh	r3, [r4, #24]
     4d6:	e7f4      	b.n	4c2 <process_event+0x2a>
			evt = process_recheck(mgr);
     4d8:	4620      	mov	r0, r4
     4da:	f003 fbb1 	bl	3c40 <process_recheck>
     4de:	e057      	b.n	590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
			res = mgr->last_res;
     4e0:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     4e4:	464a      	mov	r2, r9
     4e6:	4669      	mov	r1, sp
     4e8:	4620      	mov	r0, r4
     4ea:	f003 fbc2 	bl	3c72 <process_complete>
		onoff_transition_fn transit = NULL;
     4ee:	2700      	movs	r7, #0
     4f0:	e05a      	b.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
			transit = mgr->transitions->start;
     4f2:	6923      	ldr	r3, [r4, #16]
     4f4:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     4f6:	2106      	movs	r1, #6
     4f8:	4620      	mov	r0, r4
     4fa:	f003 fb7a 	bl	3bf2 <set_state>
		res = 0;
     4fe:	f04f 0900 	mov.w	r9, #0
     502:	e051      	b.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
			transit = mgr->transitions->stop;
     504:	6923      	ldr	r3, [r4, #16]
     506:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     508:	2104      	movs	r1, #4
     50a:	4620      	mov	r0, r4
     50c:	f003 fb71 	bl	3bf2 <set_state>
		res = 0;
     510:	f04f 0900 	mov.w	r9, #0
     514:	e048      	b.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
			transit = mgr->transitions->reset;
     516:	6923      	ldr	r3, [r4, #16]
     518:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     51a:	2105      	movs	r1, #5
     51c:	4620      	mov	r0, r4
     51e:	f003 fb68 	bl	3bf2 <set_state>
		res = 0;
     522:	f04f 0900 	mov.w	r9, #0
     526:	e03f      	b.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
				   && !sys_slist_is_empty(&mgr->monitors);
     528:	2200      	movs	r2, #0
     52a:	e046      	b.n	5ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd2>
     52c:	2200      	movs	r2, #0
     52e:	e044      	b.n	5ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     530:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     534:	8323      	strh	r3, [r4, #24]
     536:	f385 8811 	msr	BASEPRI, r5
     53a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     53e:	2900      	cmp	r1, #0
     540:	d144      	bne.n	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     542:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     544:	b12b      	cbz	r3, 552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
				notify_all(mgr, &clients, state, res);
     546:	464b      	mov	r3, r9
     548:	4642      	mov	r2, r8
     54a:	4669      	mov	r1, sp
     54c:	4620      	mov	r0, r4
     54e:	f003 fc07 	bl	3d60 <notify_all>
			if (transit != NULL) {
     552:	b117      	cbz	r7, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
				transit(mgr, transition_complete);
     554:	4925      	ldr	r1, [pc, #148]	; (5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>)
     556:	4620      	mov	r0, r4
     558:	47b8      	blx	r7
	__asm__ volatile(
     55a:	f04f 0320 	mov.w	r3, #32
     55e:	f3ef 8511 	mrs	r5, BASEPRI
     562:	f383 8812 	msr	BASEPRI_MAX, r3
     566:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     56a:	8b23      	ldrh	r3, [r4, #24]
     56c:	f023 0308 	bic.w	r3, r3, #8
     570:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     572:	8b23      	ldrh	r3, [r4, #24]
     574:	f013 0f10 	tst.w	r3, #16
     578:	d02e      	beq.n	5d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf0>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     57a:	f023 0310 	bic.w	r3, r3, #16
     57e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     580:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     582:	8b26      	ldrh	r6, [r4, #24]
     584:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     588:	2800      	cmp	r0, #0
     58a:	d09a      	beq.n	4c2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     58c:	2802      	cmp	r0, #2
     58e:	d0a3      	beq.n	4d8 <process_event+0x40>
		if (evt == EVT_NOP) {
     590:	2800      	cmp	r0, #0
     592:	d096      	beq.n	4c2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     594:	2801      	cmp	r0, #1
     596:	d0a3      	beq.n	4e0 <process_event+0x48>
		} else if (evt == EVT_START) {
     598:	2803      	cmp	r0, #3
     59a:	d0aa      	beq.n	4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
		} else if (evt == EVT_STOP) {
     59c:	2804      	cmp	r0, #4
     59e:	d0b1      	beq.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
		} else if (evt == EVT_RESET) {
     5a0:	2805      	cmp	r0, #5
     5a2:	d0b8      	beq.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
		onoff_transition_fn transit = NULL;
     5a4:	2700      	movs	r7, #0
		res = 0;
     5a6:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5a8:	8b23      	ldrh	r3, [r4, #24]
     5aa:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5ae:	45b0      	cmp	r8, r6
     5b0:	d0ba      	beq.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     5b2:	68a2      	ldr	r2, [r4, #8]
     5b4:	2a00      	cmp	r2, #0
     5b6:	d0b9      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     5b8:	2201      	movs	r2, #1
		if (do_monitors
     5ba:	4611      	mov	r1, r2
     5bc:	2a00      	cmp	r2, #0
     5be:	d1b7      	bne.n	530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
     5c0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     5c2:	2a00      	cmp	r2, #0
     5c4:	d1b4      	bne.n	530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
		    || (transit != NULL)) {
     5c6:	2f00      	cmp	r7, #0
     5c8:	d1b2      	bne.n	530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
     5ca:	e7d2      	b.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
				notify_monitors(mgr, state, res);
     5cc:	464a      	mov	r2, r9
     5ce:	4641      	mov	r1, r8
     5d0:	4620      	mov	r0, r4
     5d2:	f003 fb16 	bl	3c02 <notify_monitors>
     5d6:	e7b4      	b.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5d8:	f013 0f20 	tst.w	r3, #32
     5dc:	d004      	beq.n	5e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x100>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5de:	f023 0320 	bic.w	r3, r3, #32
     5e2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     5e4:	2002      	movs	r0, #2
     5e6:	e7cc      	b.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
		evt = EVT_NOP;
     5e8:	2000      	movs	r0, #0
     5ea:	e7ca      	b.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
     5ec:	00003d8f 	.word	0x00003d8f

000005f0 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     5f6:	2300      	movs	r3, #0
     5f8:	6003      	str	r3, [r0, #0]
     5fa:	6043      	str	r3, [r0, #4]
     5fc:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     5fe:	784b      	ldrb	r3, [r1, #1]
     600:	2b25      	cmp	r3, #37	; 0x25
     602:	d002      	beq.n	60a <extract_conversion+0x1a>
     604:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     606:	2501      	movs	r5, #1
     608:	e01f      	b.n	64a <extract_conversion+0x5a>
		conv->specifier = *sp++;
     60a:	1c88      	adds	r0, r1, #2
     60c:	70e3      	strb	r3, [r4, #3]
		return sp;
     60e:	e145      	b.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
			conv->flag_dash = true;
     610:	7823      	ldrb	r3, [r4, #0]
     612:	f043 0304 	orr.w	r3, r3, #4
     616:	7023      	strb	r3, [r4, #0]
		if (loop) {
     618:	b1b5      	cbz	r5, 648 <extract_conversion+0x58>
			++sp;
     61a:	3601      	adds	r6, #1
     61c:	e014      	b.n	648 <extract_conversion+0x58>
			conv->flag_plus = true;
     61e:	7823      	ldrb	r3, [r4, #0]
     620:	f043 0308 	orr.w	r3, r3, #8
     624:	7023      	strb	r3, [r4, #0]
			break;
     626:	e7f7      	b.n	618 <extract_conversion+0x28>
			conv->flag_space = true;
     628:	7823      	ldrb	r3, [r4, #0]
     62a:	f043 0310 	orr.w	r3, r3, #16
     62e:	7023      	strb	r3, [r4, #0]
			break;
     630:	e7f2      	b.n	618 <extract_conversion+0x28>
			conv->flag_hash = true;
     632:	7823      	ldrb	r3, [r4, #0]
     634:	f043 0320 	orr.w	r3, r3, #32
     638:	7023      	strb	r3, [r4, #0]
			break;
     63a:	e7ed      	b.n	618 <extract_conversion+0x28>
			conv->flag_zero = true;
     63c:	7823      	ldrb	r3, [r4, #0]
     63e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     642:	7023      	strb	r3, [r4, #0]
			break;
     644:	e7e8      	b.n	618 <extract_conversion+0x28>
		switch (*sp) {
     646:	2500      	movs	r5, #0
	} while (loop);
     648:	b345      	cbz	r5, 69c <extract_conversion+0xac>
		switch (*sp) {
     64a:	7833      	ldrb	r3, [r6, #0]
     64c:	3b20      	subs	r3, #32
     64e:	2b10      	cmp	r3, #16
     650:	d8f9      	bhi.n	646 <extract_conversion+0x56>
     652:	a201      	add	r2, pc, #4	; (adr r2, 658 <extract_conversion+0x68>)
     654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     658:	00000629 	.word	0x00000629
     65c:	00000647 	.word	0x00000647
     660:	00000647 	.word	0x00000647
     664:	00000633 	.word	0x00000633
     668:	00000647 	.word	0x00000647
     66c:	00000647 	.word	0x00000647
     670:	00000647 	.word	0x00000647
     674:	00000647 	.word	0x00000647
     678:	00000647 	.word	0x00000647
     67c:	00000647 	.word	0x00000647
     680:	00000647 	.word	0x00000647
     684:	0000061f 	.word	0x0000061f
     688:	00000647 	.word	0x00000647
     68c:	00000611 	.word	0x00000611
     690:	00000647 	.word	0x00000647
     694:	00000647 	.word	0x00000647
     698:	0000063d 	.word	0x0000063d
	if (conv->flag_zero && conv->flag_dash) {
     69c:	7823      	ldrb	r3, [r4, #0]
     69e:	f003 0344 	and.w	r3, r3, #68	; 0x44
     6a2:	2b44      	cmp	r3, #68	; 0x44
     6a4:	d05f      	beq.n	766 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
     6a6:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
     6a8:	7823      	ldrb	r3, [r4, #0]
     6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     6ae:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
     6b0:	7833      	ldrb	r3, [r6, #0]
     6b2:	2b2a      	cmp	r3, #42	; 0x2a
     6b4:	d05c      	beq.n	770 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
     6b6:	a801      	add	r0, sp, #4
     6b8:	f003 fbfa 	bl	3eb0 <extract_decimal>
	if (sp != wp) {
     6bc:	9b01      	ldr	r3, [sp, #4]
     6be:	429e      	cmp	r6, r3
     6c0:	d00f      	beq.n	6e2 <extract_conversion+0xf2>
		conv->width_present = true;
     6c2:	7823      	ldrb	r3, [r4, #0]
     6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     6c8:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
     6ca:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
     6cc:	b2db      	uxtb	r3, r3
     6ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     6d2:	2800      	cmp	r0, #0
     6d4:	db54      	blt.n	780 <extract_conversion+0x190>
     6d6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     6d8:	4313      	orrs	r3, r2
     6da:	7822      	ldrb	r2, [r4, #0]
     6dc:	f363 0241 	bfi	r2, r3, #1, #1
     6e0:	7022      	strb	r2, [r4, #0]
	return sp;
     6e2:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
     6e4:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
     6e6:	781b      	ldrb	r3, [r3, #0]
     6e8:	2b2e      	cmp	r3, #46	; 0x2e
     6ea:	bf14      	ite	ne
     6ec:	2300      	movne	r3, #0
     6ee:	2301      	moveq	r3, #1
     6f0:	7862      	ldrb	r2, [r4, #1]
     6f2:	f363 0241 	bfi	r2, r3, #1, #1
     6f6:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
     6f8:	2b00      	cmp	r3, #0
     6fa:	d043      	beq.n	784 <extract_conversion+0x194>
	++sp;
     6fc:	9b01      	ldr	r3, [sp, #4]
     6fe:	1c5a      	adds	r2, r3, #1
     700:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
     702:	785b      	ldrb	r3, [r3, #1]
     704:	2b2a      	cmp	r3, #42	; 0x2a
     706:	d03f      	beq.n	788 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
     708:	a801      	add	r0, sp, #4
     70a:	f003 fbd1 	bl	3eb0 <extract_decimal>
	conv->prec_value = prec;
     70e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
     710:	7823      	ldrb	r3, [r4, #0]
     712:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     716:	2800      	cmp	r0, #0
     718:	db3e      	blt.n	798 <extract_conversion+0x1a8>
     71a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     71c:	4313      	orrs	r3, r2
     71e:	7822      	ldrb	r2, [r4, #0]
     720:	f363 0241 	bfi	r2, r3, #1, #1
     724:	7022      	strb	r2, [r4, #0]
	return sp;
     726:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
     728:	7803      	ldrb	r3, [r0, #0]
     72a:	3b4c      	subs	r3, #76	; 0x4c
     72c:	2b2e      	cmp	r3, #46	; 0x2e
     72e:	f200 809d 	bhi.w	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     732:	e8df f003 	tbb	[pc, r3]
     736:	9b90      	.short	0x9b90
     738:	9b9b9b9b 	.word	0x9b9b9b9b
     73c:	9b9b9b9b 	.word	0x9b9b9b9b
     740:	9b9b9b9b 	.word	0x9b9b9b9b
     744:	9b9b9b9b 	.word	0x9b9b9b9b
     748:	9b9b9b9b 	.word	0x9b9b9b9b
     74c:	9b9b9b9b 	.word	0x9b9b9b9b
     750:	9b339b9b 	.word	0x9b339b9b
     754:	9b459b57 	.word	0x9b459b57
     758:	9b9b9b9b 	.word	0x9b9b9b9b
     75c:	9b899b9b 	.word	0x9b899b9b
     760:	9b9b9b9b 	.word	0x9b9b9b9b
     764:	82          	.byte	0x82
     765:	00          	.byte	0x00
		conv->flag_zero = false;
     766:	7823      	ldrb	r3, [r4, #0]
     768:	f36f 1386 	bfc	r3, #6, #1
     76c:	7023      	strb	r3, [r4, #0]
     76e:	e79a      	b.n	6a6 <extract_conversion+0xb6>
		conv->width_star = true;
     770:	7863      	ldrb	r3, [r4, #1]
     772:	f043 0301 	orr.w	r3, r3, #1
     776:	7063      	strb	r3, [r4, #1]
		return ++sp;
     778:	4633      	mov	r3, r6
     77a:	3301      	adds	r3, #1
     77c:	9301      	str	r3, [sp, #4]
     77e:	e7b1      	b.n	6e4 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
     780:	2201      	movs	r2, #1
     782:	e7a9      	b.n	6d8 <extract_conversion+0xe8>
		return sp;
     784:	9801      	ldr	r0, [sp, #4]
     786:	e7cf      	b.n	728 <extract_conversion+0x138>
		conv->prec_star = true;
     788:	7863      	ldrb	r3, [r4, #1]
     78a:	f043 0304 	orr.w	r3, r3, #4
     78e:	7063      	strb	r3, [r4, #1]
		return ++sp;
     790:	4610      	mov	r0, r2
     792:	3001      	adds	r0, #1
     794:	9001      	str	r0, [sp, #4]
     796:	e7c7      	b.n	728 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
     798:	2201      	movs	r2, #1
     79a:	e7bf      	b.n	71c <extract_conversion+0x12c>
		if (*++sp == 'h') {
     79c:	1c42      	adds	r2, r0, #1
     79e:	7843      	ldrb	r3, [r0, #1]
     7a0:	2b68      	cmp	r3, #104	; 0x68
     7a2:	d006      	beq.n	7b2 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
     7a4:	7863      	ldrb	r3, [r4, #1]
     7a6:	2102      	movs	r1, #2
     7a8:	f361 03c6 	bfi	r3, r1, #3, #4
     7ac:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
     7ae:	4610      	mov	r0, r2
     7b0:	e01e      	b.n	7f0 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
     7b2:	7863      	ldrb	r3, [r4, #1]
     7b4:	2201      	movs	r2, #1
     7b6:	f362 03c6 	bfi	r3, r2, #3, #4
     7ba:	7063      	strb	r3, [r4, #1]
			++sp;
     7bc:	3002      	adds	r0, #2
     7be:	e017      	b.n	7f0 <extract_conversion+0x200>
		if (*++sp == 'l') {
     7c0:	1c42      	adds	r2, r0, #1
     7c2:	7843      	ldrb	r3, [r0, #1]
     7c4:	2b6c      	cmp	r3, #108	; 0x6c
     7c6:	d006      	beq.n	7d6 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
     7c8:	7863      	ldrb	r3, [r4, #1]
     7ca:	2103      	movs	r1, #3
     7cc:	f361 03c6 	bfi	r3, r1, #3, #4
     7d0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
     7d2:	4610      	mov	r0, r2
     7d4:	e00c      	b.n	7f0 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
     7d6:	7863      	ldrb	r3, [r4, #1]
     7d8:	2204      	movs	r2, #4
     7da:	f362 03c6 	bfi	r3, r2, #3, #4
     7de:	7063      	strb	r3, [r4, #1]
			++sp;
     7e0:	3002      	adds	r0, #2
     7e2:	e005      	b.n	7f0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
     7e4:	7863      	ldrb	r3, [r4, #1]
     7e6:	2205      	movs	r2, #5
     7e8:	f362 03c6 	bfi	r3, r2, #3, #4
     7ec:	7063      	strb	r3, [r4, #1]
		++sp;
     7ee:	3001      	adds	r0, #1
	conv->specifier = *sp++;
     7f0:	f810 3b01 	ldrb.w	r3, [r0], #1
     7f4:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
     7f6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     7fa:	2a37      	cmp	r2, #55	; 0x37
     7fc:	d87d      	bhi.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
     7fe:	e8df f002 	tbb	[pc, r2]
     802:	7c5e      	.short	0x7c5e
     804:	5e5e7c7c 	.word	0x5e5e7c7c
     808:	7c7c7c5e 	.word	0x7c7c7c5e
     80c:	7c7c7c7c 	.word	0x7c7c7c7c
     810:	7c7c7c7c 	.word	0x7c7c7c7c
     814:	7c7c7c7c 	.word	0x7c7c7c7c
     818:	7c7c4f7c 	.word	0x7c7c4f7c
     81c:	7c7c7c7c 	.word	0x7c7c7c7c
     820:	7c5e7c7c 	.word	0x7c5e7c7c
     824:	5e5e3a4f 	.word	0x5e5e3a4f
     828:	7c3a7c5e 	.word	0x7c3a7c5e
     82c:	657c7c7c 	.word	0x657c7c7c
     830:	7c7c714f 	.word	0x7c7c714f
     834:	7c4f7c71 	.word	0x7c4f7c71
     838:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
     83a:	7863      	ldrb	r3, [r4, #1]
     83c:	2206      	movs	r2, #6
     83e:	f362 03c6 	bfi	r3, r2, #3, #4
     842:	7063      	strb	r3, [r4, #1]
		++sp;
     844:	3001      	adds	r0, #1
		break;
     846:	e7d3      	b.n	7f0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
     848:	7863      	ldrb	r3, [r4, #1]
     84a:	2207      	movs	r2, #7
     84c:	f362 03c6 	bfi	r3, r2, #3, #4
     850:	7063      	strb	r3, [r4, #1]
		++sp;
     852:	3001      	adds	r0, #1
		break;
     854:	e7cc      	b.n	7f0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
     856:	7863      	ldrb	r3, [r4, #1]
     858:	2208      	movs	r2, #8
     85a:	f362 03c6 	bfi	r3, r2, #3, #4
     85e:	7063      	strb	r3, [r4, #1]
		++sp;
     860:	3001      	adds	r0, #1
		conv->unsupported = true;
     862:	7823      	ldrb	r3, [r4, #0]
     864:	f043 0302 	orr.w	r3, r3, #2
     868:	7023      	strb	r3, [r4, #0]
		break;
     86a:	e7c1      	b.n	7f0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
     86c:	7863      	ldrb	r3, [r4, #1]
     86e:	f36f 03c6 	bfc	r3, #3, #4
     872:	7063      	strb	r3, [r4, #1]
		break;
     874:	e7bc      	b.n	7f0 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
     876:	78a2      	ldrb	r2, [r4, #2]
     878:	2101      	movs	r1, #1
     87a:	f361 0202 	bfi	r2, r1, #0, #3
     87e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     880:	7862      	ldrb	r2, [r4, #1]
     882:	f002 0278 	and.w	r2, r2, #120	; 0x78
     886:	2a40      	cmp	r2, #64	; 0x40
     888:	d010      	beq.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
		if (conv->specifier == 'c') {
     88a:	2b63      	cmp	r3, #99	; 0x63
     88c:	d013      	beq.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
	conv->unsupported |= unsupported;
     88e:	7823      	ldrb	r3, [r4, #0]
     890:	f3c3 0240 	ubfx	r2, r3, #1, #1
     894:	4315      	orrs	r5, r2
     896:	f365 0341 	bfi	r3, r5, #1, #1
     89a:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
     89c:	b002      	add	sp, #8
     89e:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
     8a0:	78a2      	ldrb	r2, [r4, #2]
     8a2:	2102      	movs	r1, #2
     8a4:	f361 0202 	bfi	r2, r1, #0, #3
     8a8:	70a2      	strb	r2, [r4, #2]
     8aa:	e7e9      	b.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
			conv->invalid = true;
     8ac:	7821      	ldrb	r1, [r4, #0]
     8ae:	f041 0101 	orr.w	r1, r1, #1
     8b2:	7021      	strb	r1, [r4, #0]
     8b4:	e7e9      	b.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     8b6:	1e15      	subs	r5, r2, #0
     8b8:	bf18      	it	ne
     8ba:	2501      	movne	r5, #1
     8bc:	e7e7      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
		conv->specifier_cat = SPECIFIER_FP;
     8be:	78a3      	ldrb	r3, [r4, #2]
     8c0:	2204      	movs	r2, #4
     8c2:	f362 0302 	bfi	r3, r2, #0, #3
     8c6:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
     8c8:	2501      	movs	r5, #1
			break;
     8ca:	e7e0      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
		conv->specifier_cat = SPECIFIER_PTR;
     8cc:	78a3      	ldrb	r3, [r4, #2]
     8ce:	2203      	movs	r2, #3
     8d0:	f362 0302 	bfi	r3, r2, #0, #3
     8d4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     8d6:	7863      	ldrb	r3, [r4, #1]
     8d8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     8dc:	2b40      	cmp	r3, #64	; 0x40
     8de:	d1d6      	bne.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
			unsupported = true;
     8e0:	2501      	movs	r5, #1
     8e2:	e7d4      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
		conv->specifier_cat = SPECIFIER_PTR;
     8e4:	78a3      	ldrb	r3, [r4, #2]
     8e6:	2203      	movs	r2, #3
     8e8:	f362 0302 	bfi	r3, r2, #0, #3
     8ec:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
     8ee:	7863      	ldrb	r3, [r4, #1]
     8f0:	f013 0f78 	tst.w	r3, #120	; 0x78
     8f4:	d0cb      	beq.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
			unsupported = true;
     8f6:	2501      	movs	r5, #1
     8f8:	e7c9      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
		conv->invalid = true;
     8fa:	7823      	ldrb	r3, [r4, #0]
     8fc:	f043 0301 	orr.w	r3, r3, #1
     900:	7023      	strb	r3, [r4, #0]
		break;
     902:	e7c4      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>

00000904 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     908:	b091      	sub	sp, #68	; 0x44
     90a:	4606      	mov	r6, r0
     90c:	460d      	mov	r5, r1
     90e:	4691      	mov	r9, r2
     910:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     912:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     914:	f899 0000 	ldrb.w	r0, [r9]
     918:	2800      	cmp	r0, #0
     91a:	f000 82d5 	beq.w	ec8 <cbvprintf+0x5c4>
		if (*fp != '%') {
     91e:	2825      	cmp	r0, #37	; 0x25
     920:	d008      	beq.n	934 <cbvprintf+0x30>
			OUTC(*fp++);
     922:	f109 0901 	add.w	r9, r9, #1
     926:	4629      	mov	r1, r5
     928:	47b0      	blx	r6
     92a:	2800      	cmp	r0, #0
     92c:	f2c0 82cd 	blt.w	eca <cbvprintf+0x5c6>
     930:	3401      	adds	r4, #1
			continue;
     932:	e7ef      	b.n	914 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     934:	2300      	movs	r3, #0
     936:	9304      	str	r3, [sp, #16]
     938:	9305      	str	r3, [sp, #20]
     93a:	9306      	str	r3, [sp, #24]
     93c:	9307      	str	r3, [sp, #28]
     93e:	9308      	str	r3, [sp, #32]
     940:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     942:	4649      	mov	r1, r9
     944:	a806      	add	r0, sp, #24
     946:	f7ff fe53 	bl	5f0 <extract_conversion>
     94a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     94c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     950:	f013 0f01 	tst.w	r3, #1
     954:	f000 8097 	beq.w	a86 <cbvprintf+0x182>
			width = va_arg(ap, int);
     958:	9b03      	ldr	r3, [sp, #12]
     95a:	1d1a      	adds	r2, r3, #4
     95c:	9203      	str	r2, [sp, #12]
     95e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     960:	2f00      	cmp	r7, #0
     962:	f2c0 8088 	blt.w	a76 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     966:	f89d 3019 	ldrb.w	r3, [sp, #25]
     96a:	f013 0f04 	tst.w	r3, #4
     96e:	f000 809c 	beq.w	aaa <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
     972:	9b03      	ldr	r3, [sp, #12]
     974:	1d1a      	adds	r2, r3, #4
     976:	9203      	str	r2, [sp, #12]
     978:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     97c:	f1ba 0f00 	cmp.w	sl, #0
     980:	f2c0 808a 	blt.w	a98 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     984:	2300      	movs	r3, #0
     986:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     988:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     98a:	f89d 301a 	ldrb.w	r3, [sp, #26]
     98e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     992:	f89d 1019 	ldrb.w	r1, [sp, #25]
     996:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     99a:	2b01      	cmp	r3, #1
     99c:	f000 808e 	beq.w	abc <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     9a0:	2b02      	cmp	r3, #2
     9a2:	f000 80d3 	beq.w	b4c <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     9a6:	2b04      	cmp	r3, #4
     9a8:	f000 8124 	beq.w	bf4 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     9ac:	2b03      	cmp	r3, #3
     9ae:	f000 813b 	beq.w	c28 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     9b2:	f89d 8018 	ldrb.w	r8, [sp, #24]
     9b6:	f018 0b03 	ands.w	fp, r8, #3
     9ba:	f040 813b 	bne.w	c34 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     9be:	f89d 301b 	ldrb.w	r3, [sp, #27]
     9c2:	3b25      	subs	r3, #37	; 0x25
     9c4:	2b53      	cmp	r3, #83	; 0x53
     9c6:	f200 81e6 	bhi.w	d96 <cbvprintf+0x492>
     9ca:	e8df f013 	tbh	[pc, r3, lsl #1]
     9ce:	0140      	.short	0x0140
     9d0:	01e401e4 	.word	0x01e401e4
     9d4:	01e401e4 	.word	0x01e401e4
     9d8:	01e401e4 	.word	0x01e401e4
     9dc:	01e401e4 	.word	0x01e401e4
     9e0:	01e401e4 	.word	0x01e401e4
     9e4:	01e401e4 	.word	0x01e401e4
     9e8:	01e401e4 	.word	0x01e401e4
     9ec:	01e401e4 	.word	0x01e401e4
     9f0:	01e401e4 	.word	0x01e401e4
     9f4:	01e401e4 	.word	0x01e401e4
     9f8:	01e401e4 	.word	0x01e401e4
     9fc:	01e401e4 	.word	0x01e401e4
     a00:	01e401e4 	.word	0x01e401e4
     a04:	01e401e4 	.word	0x01e401e4
     a08:	01e401e4 	.word	0x01e401e4
     a0c:	01e401e4 	.word	0x01e401e4
     a10:	01e401e4 	.word	0x01e401e4
     a14:	01e401e4 	.word	0x01e401e4
     a18:	01e401e4 	.word	0x01e401e4
     a1c:	01e401e4 	.word	0x01e401e4
     a20:	01e401e4 	.word	0x01e401e4
     a24:	01e401e4 	.word	0x01e401e4
     a28:	01e401e4 	.word	0x01e401e4
     a2c:	01e401e4 	.word	0x01e401e4
     a30:	01e401e4 	.word	0x01e401e4
     a34:	01e40181 	.word	0x01e40181
     a38:	01e401e4 	.word	0x01e401e4
     a3c:	01e401e4 	.word	0x01e401e4
     a40:	01e401e4 	.word	0x01e401e4
     a44:	01e401e4 	.word	0x01e401e4
     a48:	015e01e4 	.word	0x015e01e4
     a4c:	01e40167 	.word	0x01e40167
     a50:	01e401e4 	.word	0x01e401e4
     a54:	016701e4 	.word	0x016701e4
     a58:	01e401e4 	.word	0x01e401e4
     a5c:	01e401e4 	.word	0x01e401e4
     a60:	018101be 	.word	0x018101be
     a64:	01e401a2 	.word	0x01e401a2
     a68:	014d01e4 	.word	0x014d01e4
     a6c:	018101e4 	.word	0x018101e4
     a70:	01e401e4 	.word	0x01e401e4
     a74:	0181      	.short	0x0181
				conv->flag_dash = true;
     a76:	f89d 3018 	ldrb.w	r3, [sp, #24]
     a7a:	f043 0304 	orr.w	r3, r3, #4
     a7e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     a82:	427f      	negs	r7, r7
     a84:	e76f      	b.n	966 <cbvprintf+0x62>
		} else if (conv->width_present) {
     a86:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     a8a:	2b00      	cmp	r3, #0
     a8c:	db02      	blt.n	a94 <cbvprintf+0x190>
		int width = -1;
     a8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     a92:	e768      	b.n	966 <cbvprintf+0x62>
			width = conv->width_value;
     a94:	9f07      	ldr	r7, [sp, #28]
     a96:	e766      	b.n	966 <cbvprintf+0x62>
				conv->prec_present = false;
     a98:	f89d 3019 	ldrb.w	r3, [sp, #25]
     a9c:	f36f 0341 	bfc	r3, #1, #1
     aa0:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     aa4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     aa8:	e76c      	b.n	984 <cbvprintf+0x80>
		} else if (conv->prec_present) {
     aaa:	f013 0f02 	tst.w	r3, #2
     aae:	d002      	beq.n	ab6 <cbvprintf+0x1b2>
			precision = conv->prec_value;
     ab0:	f8dd a020 	ldr.w	sl, [sp, #32]
     ab4:	e766      	b.n	984 <cbvprintf+0x80>
		int precision = -1;
     ab6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     aba:	e763      	b.n	984 <cbvprintf+0x80>
			switch (length_mod) {
     abc:	1ecb      	subs	r3, r1, #3
     abe:	2b04      	cmp	r3, #4
     ac0:	d804      	bhi.n	acc <cbvprintf+0x1c8>
     ac2:	e8df f003 	tbb	[pc, r3]
     ac6:	1d0b      	.short	0x1d0b
     ac8:	3529      	.short	0x3529
     aca:	35          	.byte	0x35
     acb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     acc:	9b03      	ldr	r3, [sp, #12]
     ace:	1d1a      	adds	r2, r3, #4
     ad0:	9203      	str	r2, [sp, #12]
     ad2:	681b      	ldr	r3, [r3, #0]
     ad4:	17da      	asrs	r2, r3, #31
     ad6:	9304      	str	r3, [sp, #16]
     ad8:	9205      	str	r2, [sp, #20]
				break;
     ada:	e006      	b.n	aea <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
     adc:	9b03      	ldr	r3, [sp, #12]
     ade:	1d1a      	adds	r2, r3, #4
     ae0:	9203      	str	r2, [sp, #12]
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	17da      	asrs	r2, r3, #31
     ae6:	9304      	str	r3, [sp, #16]
     ae8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     aea:	2901      	cmp	r1, #1
     aec:	d028      	beq.n	b40 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
     aee:	2902      	cmp	r1, #2
     af0:	f47f af5f 	bne.w	9b2 <cbvprintf+0xae>
				value->sint = (short)value->sint;
     af4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     af8:	17da      	asrs	r2, r3, #31
     afa:	9304      	str	r3, [sp, #16]
     afc:	9205      	str	r2, [sp, #20]
     afe:	e758      	b.n	9b2 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
     b00:	9b03      	ldr	r3, [sp, #12]
     b02:	3307      	adds	r3, #7
     b04:	f023 0307 	bic.w	r3, r3, #7
     b08:	f103 0208 	add.w	r2, r3, #8
     b0c:	9203      	str	r2, [sp, #12]
     b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b16:	e7e8      	b.n	aea <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     b18:	9b03      	ldr	r3, [sp, #12]
     b1a:	3307      	adds	r3, #7
     b1c:	f023 0307 	bic.w	r3, r3, #7
     b20:	f103 0208 	add.w	r2, r3, #8
     b24:	9203      	str	r2, [sp, #12]
     b26:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b2e:	e7dc      	b.n	aea <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b30:	9b03      	ldr	r3, [sp, #12]
     b32:	1d1a      	adds	r2, r3, #4
     b34:	9203      	str	r2, [sp, #12]
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	17da      	asrs	r2, r3, #31
				value->sint =
     b3a:	9304      	str	r3, [sp, #16]
     b3c:	9205      	str	r2, [sp, #20]
				break;
     b3e:	e7d4      	b.n	aea <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
     b40:	f89d 3010 	ldrb.w	r3, [sp, #16]
     b44:	9304      	str	r3, [sp, #16]
     b46:	2300      	movs	r3, #0
     b48:	9305      	str	r3, [sp, #20]
     b4a:	e732      	b.n	9b2 <cbvprintf+0xae>
			switch (length_mod) {
     b4c:	1ecb      	subs	r3, r1, #3
     b4e:	2b04      	cmp	r3, #4
     b50:	d804      	bhi.n	b5c <cbvprintf+0x258>
     b52:	e8df f003 	tbb	[pc, r3]
     b56:	1f0b      	.short	0x1f0b
     b58:	4135      	.short	0x4135
     b5a:	41          	.byte	0x41
     b5b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     b5c:	9b03      	ldr	r3, [sp, #12]
     b5e:	1d1a      	adds	r2, r3, #4
     b60:	9203      	str	r2, [sp, #12]
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	9304      	str	r3, [sp, #16]
     b66:	2300      	movs	r3, #0
     b68:	9305      	str	r3, [sp, #20]
				break;
     b6a:	e01e      	b.n	baa <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
     b6c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     b70:	2b63      	cmp	r3, #99	; 0x63
     b72:	d007      	beq.n	b84 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
     b74:	9b03      	ldr	r3, [sp, #12]
     b76:	1d1a      	adds	r2, r3, #4
     b78:	9203      	str	r2, [sp, #12]
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	9304      	str	r3, [sp, #16]
     b7e:	2300      	movs	r3, #0
     b80:	9305      	str	r3, [sp, #20]
     b82:	e012      	b.n	baa <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     b84:	9b03      	ldr	r3, [sp, #12]
     b86:	1d1a      	adds	r2, r3, #4
     b88:	9203      	str	r2, [sp, #12]
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	9304      	str	r3, [sp, #16]
     b8e:	2300      	movs	r3, #0
     b90:	9305      	str	r3, [sp, #20]
     b92:	e00a      	b.n	baa <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
     b94:	9b03      	ldr	r3, [sp, #12]
     b96:	3307      	adds	r3, #7
     b98:	f023 0307 	bic.w	r3, r3, #7
     b9c:	f103 0208 	add.w	r2, r3, #8
     ba0:	9203      	str	r2, [sp, #12]
     ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     ba6:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     baa:	2901      	cmp	r1, #1
     bac:	d01c      	beq.n	be8 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
     bae:	2902      	cmp	r1, #2
     bb0:	f47f aeff 	bne.w	9b2 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
     bb4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     bb8:	9304      	str	r3, [sp, #16]
     bba:	2300      	movs	r3, #0
     bbc:	9305      	str	r3, [sp, #20]
     bbe:	e6f8      	b.n	9b2 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
     bc0:	9b03      	ldr	r3, [sp, #12]
     bc2:	3307      	adds	r3, #7
     bc4:	f023 0307 	bic.w	r3, r3, #7
     bc8:	f103 0208 	add.w	r2, r3, #8
     bcc:	9203      	str	r2, [sp, #12]
     bce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     bd6:	e7e8      	b.n	baa <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
     bd8:	9b03      	ldr	r3, [sp, #12]
     bda:	1d1a      	adds	r2, r3, #4
     bdc:	9203      	str	r2, [sp, #12]
     bde:	681b      	ldr	r3, [r3, #0]
				value->uint =
     be0:	9304      	str	r3, [sp, #16]
     be2:	2300      	movs	r3, #0
     be4:	9305      	str	r3, [sp, #20]
				break;
     be6:	e7e0      	b.n	baa <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
     be8:	f89d 3010 	ldrb.w	r3, [sp, #16]
     bec:	9304      	str	r3, [sp, #16]
     bee:	2300      	movs	r3, #0
     bf0:	9305      	str	r3, [sp, #20]
     bf2:	e6de      	b.n	9b2 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     bf4:	2908      	cmp	r1, #8
     bf6:	d00b      	beq.n	c10 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
     bf8:	9b03      	ldr	r3, [sp, #12]
     bfa:	3307      	adds	r3, #7
     bfc:	f023 0307 	bic.w	r3, r3, #7
     c00:	f103 0208 	add.w	r2, r3, #8
     c04:	9203      	str	r2, [sp, #12]
     c06:	e9d3 2300 	ldrd	r2, r3, [r3]
     c0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
     c0e:	e6d0      	b.n	9b2 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
     c10:	9b03      	ldr	r3, [sp, #12]
     c12:	3307      	adds	r3, #7
     c14:	f023 0307 	bic.w	r3, r3, #7
     c18:	f103 0208 	add.w	r2, r3, #8
     c1c:	9203      	str	r2, [sp, #12]
     c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
     c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
     c26:	e6c4      	b.n	9b2 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
     c28:	9b03      	ldr	r3, [sp, #12]
     c2a:	1d1a      	adds	r2, r3, #4
     c2c:	9203      	str	r2, [sp, #12]
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	9304      	str	r3, [sp, #16]
     c32:	e6be      	b.n	9b2 <cbvprintf+0xae>
			OUTS(sp, fp);
     c34:	9f02      	ldr	r7, [sp, #8]
     c36:	463b      	mov	r3, r7
     c38:	464a      	mov	r2, r9
     c3a:	4629      	mov	r1, r5
     c3c:	4630      	mov	r0, r6
     c3e:	f003 f9b3 	bl	3fa8 <outs>
     c42:	2800      	cmp	r0, #0
     c44:	f2c0 8141 	blt.w	eca <cbvprintf+0x5c6>
     c48:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     c4a:	46b9      	mov	r9, r7
			continue;
     c4c:	e662      	b.n	914 <cbvprintf+0x10>
		case '%':
			OUTC('%');
     c4e:	4629      	mov	r1, r5
     c50:	2025      	movs	r0, #37	; 0x25
     c52:	47b0      	blx	r6
     c54:	2800      	cmp	r0, #0
     c56:	f2c0 8138 	blt.w	eca <cbvprintf+0x5c6>
     c5a:	3401      	adds	r4, #1
		char sign = 0;
     c5c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     c5e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     c62:	f04f 0900 	mov.w	r9, #0
			break;
     c66:	e09b      	b.n	da0 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
     c68:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     c6c:	f1ba 0f00 	cmp.w	sl, #0
     c70:	db07      	blt.n	c82 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
     c72:	4651      	mov	r1, sl
     c74:	4648      	mov	r0, r9
     c76:	f003 fa87 	bl	4188 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     c7a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     c7e:	46d8      	mov	r8, fp
			precision = -1;

			break;
     c80:	e08e      	b.n	da0 <cbvprintf+0x49c>
				len = strlen(bps);
     c82:	4648      	mov	r0, r9
     c84:	f003 fa77 	bl	4176 <strlen>
     c88:	e7f7      	b.n	c7a <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c8a:	9b04      	ldr	r3, [sp, #16]
     c8c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     c90:	46d8      	mov	r8, fp
			bpe = buf + 1;
     c92:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     c96:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     c9a:	e081      	b.n	da0 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     c9c:	f018 0f08 	tst.w	r8, #8
     ca0:	d105      	bne.n	cae <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
     ca2:	f018 0810 	ands.w	r8, r8, #16
     ca6:	d004      	beq.n	cb2 <cbvprintf+0x3ae>
				sign = ' ';
     ca8:	f04f 0820 	mov.w	r8, #32
     cac:	e001      	b.n	cb2 <cbvprintf+0x3ae>
				sign = '+';
     cae:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     cb2:	9a04      	ldr	r2, [sp, #16]
     cb4:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     cb6:	2b00      	cmp	r3, #0
     cb8:	db02      	blt.n	cc0 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     cba:	9204      	str	r2, [sp, #16]
     cbc:	9305      	str	r3, [sp, #20]
     cbe:	e008      	b.n	cd2 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
     cc0:	4252      	negs	r2, r2
     cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     cc6:	9204      	str	r2, [sp, #16]
     cc8:	9305      	str	r3, [sp, #20]
				sign = '-';
     cca:	f04f 082d 	mov.w	r8, #45	; 0x2d
     cce:	e000      	b.n	cd2 <cbvprintf+0x3ce>
		switch (conv->specifier) {
     cd0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     cd2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     cd6:	9300      	str	r3, [sp, #0]
     cd8:	ab0a      	add	r3, sp, #40	; 0x28
     cda:	aa06      	add	r2, sp, #24
     cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     ce0:	f003 f8f8 	bl	3ed4 <encode_uint>
     ce4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     ce6:	f1ba 0f00 	cmp.w	sl, #0
     cea:	f2c0 8088 	blt.w	dfe <cbvprintf+0x4fa>
				size_t len = bpe - bps;
     cee:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     cf2:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     cf6:	f89d 2018 	ldrb.w	r2, [sp, #24]
     cfa:	f36f 1286 	bfc	r2, #6, #1
     cfe:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     d02:	459a      	cmp	sl, r3
     d04:	d97e      	bls.n	e04 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
     d06:	ebaa 0303 	sub.w	r3, sl, r3
     d0a:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     d0c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d10:	e046      	b.n	da0 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     d12:	9804      	ldr	r0, [sp, #16]
     d14:	b928      	cbnz	r0, d22 <cbvprintf+0x41e>
		char sign = 0;
     d16:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     d18:	f8df a1b4 	ldr.w	sl, [pc, #436]	; ed0 <cbvprintf+0x5cc>
			bps = "(nil)";
     d1c:	f1aa 0905 	sub.w	r9, sl, #5
     d20:	e03e      	b.n	da0 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d22:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     d26:	9300      	str	r3, [sp, #0]
     d28:	ab0a      	add	r3, sp, #40	; 0x28
     d2a:	aa06      	add	r2, sp, #24
     d2c:	2100      	movs	r1, #0
     d2e:	f003 f8d1 	bl	3ed4 <encode_uint>
     d32:	4681      	mov	r9, r0
				conv->altform_0c = true;
     d34:	f89d 301a 	ldrb.w	r3, [sp, #26]
     d38:	f043 0310 	orr.w	r3, r3, #16
     d3c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     d40:	2378      	movs	r3, #120	; 0x78
     d42:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     d46:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     d48:	e7cd      	b.n	ce6 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     d4a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
     d4c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     d50:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     d54:	2b07      	cmp	r3, #7
     d56:	d806      	bhi.n	d66 <cbvprintf+0x462>
     d58:	e8df f003 	tbb	[pc, r3]
     d5c:	0f0d0b04 	.word	0x0f0d0b04
     d60:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
     d64:	6014      	str	r4, [r2, #0]
		char sign = 0;
     d66:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     d68:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     d6c:	f04f 0900 	mov.w	r9, #0
}
     d70:	e016      	b.n	da0 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
     d72:	7014      	strb	r4, [r2, #0]
		break;
     d74:	e7f7      	b.n	d66 <cbvprintf+0x462>
		*(short *)dp = (short)count;
     d76:	8014      	strh	r4, [r2, #0]
		break;
     d78:	e7f5      	b.n	d66 <cbvprintf+0x462>
		*(long *)dp = (long)count;
     d7a:	6014      	str	r4, [r2, #0]
		break;
     d7c:	e7f3      	b.n	d66 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
     d7e:	17e3      	asrs	r3, r4, #31
     d80:	6014      	str	r4, [r2, #0]
     d82:	6053      	str	r3, [r2, #4]
		break;
     d84:	e7ef      	b.n	d66 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
     d86:	17e3      	asrs	r3, r4, #31
     d88:	6014      	str	r4, [r2, #0]
     d8a:	6053      	str	r3, [r2, #4]
		break;
     d8c:	e7eb      	b.n	d66 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
     d8e:	6014      	str	r4, [r2, #0]
		break;
     d90:	e7e9      	b.n	d66 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d92:	6014      	str	r4, [r2, #0]
		break;
     d94:	e7e7      	b.n	d66 <cbvprintf+0x462>
		switch (conv->specifier) {
     d96:	46d8      	mov	r8, fp
     d98:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d9c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     da0:	f1b9 0f00 	cmp.w	r9, #0
     da4:	f000 808d 	beq.w	ec2 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     da8:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     dac:	f1b8 0f00 	cmp.w	r8, #0
     db0:	d000      	beq.n	db4 <cbvprintf+0x4b0>
			nj_len += 1U;
     db2:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     db4:	f89d 201a 	ldrb.w	r2, [sp, #26]
     db8:	f012 0f10 	tst.w	r2, #16
     dbc:	d025      	beq.n	e0a <cbvprintf+0x506>
			nj_len += 2U;
     dbe:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     dc0:	9907      	ldr	r1, [sp, #28]
     dc2:	440b      	add	r3, r1
		if (conv->pad_fp) {
     dc4:	f012 0f40 	tst.w	r2, #64	; 0x40
     dc8:	d001      	beq.n	dce <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
     dca:	9a08      	ldr	r2, [sp, #32]
     dcc:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     dce:	2f00      	cmp	r7, #0
     dd0:	dd31      	ble.n	e36 <cbvprintf+0x532>
			width -= (int)nj_len;
     dd2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     dd4:	f89d 3018 	ldrb.w	r3, [sp, #24]
     dd8:	f013 0f04 	tst.w	r3, #4
     ddc:	d12b      	bne.n	e36 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     dde:	f013 0f40 	tst.w	r3, #64	; 0x40
     de2:	d017      	beq.n	e14 <cbvprintf+0x510>
					if (sign != 0) {
     de4:	f1b8 0f00 	cmp.w	r8, #0
     de8:	d017      	beq.n	e1a <cbvprintf+0x516>
						OUTC(sign);
     dea:	4629      	mov	r1, r5
     dec:	4640      	mov	r0, r8
     dee:	47b0      	blx	r6
     df0:	2800      	cmp	r0, #0
     df2:	db6a      	blt.n	eca <cbvprintf+0x5c6>
     df4:	3401      	adds	r4, #1
						sign = 0;
     df6:	46d8      	mov	r8, fp
					}
					pad = '0';
     df8:	f04f 0b30 	mov.w	fp, #48	; 0x30
     dfc:	e00f      	b.n	e1e <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
     dfe:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     e02:	e7cd      	b.n	da0 <cbvprintf+0x49c>
     e04:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     e08:	e7ca      	b.n	da0 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
     e0a:	f012 0f08 	tst.w	r2, #8
     e0e:	d0d7      	beq.n	dc0 <cbvprintf+0x4bc>
			nj_len += 1U;
     e10:	3301      	adds	r3, #1
     e12:	e7d5      	b.n	dc0 <cbvprintf+0x4bc>
				char pad = ' ';
     e14:	f04f 0b20 	mov.w	fp, #32
     e18:	e001      	b.n	e1e <cbvprintf+0x51a>
					pad = '0';
     e1a:	f04f 0b30 	mov.w	fp, #48	; 0x30
     e1e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     e20:	1e5f      	subs	r7, r3, #1
     e22:	2b00      	cmp	r3, #0
     e24:	dd07      	ble.n	e36 <cbvprintf+0x532>
					OUTC(pad);
     e26:	4629      	mov	r1, r5
     e28:	4658      	mov	r0, fp
     e2a:	47b0      	blx	r6
     e2c:	2800      	cmp	r0, #0
     e2e:	db4c      	blt.n	eca <cbvprintf+0x5c6>
     e30:	3401      	adds	r4, #1
				while (width-- > 0) {
     e32:	463b      	mov	r3, r7
     e34:	e7f4      	b.n	e20 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     e36:	f1b8 0f00 	cmp.w	r8, #0
     e3a:	d005      	beq.n	e48 <cbvprintf+0x544>
			OUTC(sign);
     e3c:	4629      	mov	r1, r5
     e3e:	4640      	mov	r0, r8
     e40:	47b0      	blx	r6
     e42:	2800      	cmp	r0, #0
     e44:	db41      	blt.n	eca <cbvprintf+0x5c6>
     e46:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     e48:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e4c:	f3c3 1200 	ubfx	r2, r3, #4, #1
     e50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     e54:	4313      	orrs	r3, r2
     e56:	d005      	beq.n	e64 <cbvprintf+0x560>
				OUTC('0');
     e58:	4629      	mov	r1, r5
     e5a:	2030      	movs	r0, #48	; 0x30
     e5c:	47b0      	blx	r6
     e5e:	2800      	cmp	r0, #0
     e60:	db33      	blt.n	eca <cbvprintf+0x5c6>
     e62:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     e64:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e68:	f013 0f10 	tst.w	r3, #16
     e6c:	d006      	beq.n	e7c <cbvprintf+0x578>
				OUTC(conv->specifier);
     e6e:	4629      	mov	r1, r5
     e70:	f89d 001b 	ldrb.w	r0, [sp, #27]
     e74:	47b0      	blx	r6
     e76:	2800      	cmp	r0, #0
     e78:	db27      	blt.n	eca <cbvprintf+0x5c6>
     e7a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     e7c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     e7e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     e82:	2b00      	cmp	r3, #0
     e84:	dd07      	ble.n	e96 <cbvprintf+0x592>
				OUTC('0');
     e86:	4629      	mov	r1, r5
     e88:	2030      	movs	r0, #48	; 0x30
     e8a:	47b0      	blx	r6
     e8c:	2800      	cmp	r0, #0
     e8e:	db1c      	blt.n	eca <cbvprintf+0x5c6>
     e90:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     e92:	4643      	mov	r3, r8
     e94:	e7f3      	b.n	e7e <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
     e96:	4653      	mov	r3, sl
     e98:	464a      	mov	r2, r9
     e9a:	4629      	mov	r1, r5
     e9c:	4630      	mov	r0, r6
     e9e:	f003 f883 	bl	3fa8 <outs>
     ea2:	2800      	cmp	r0, #0
     ea4:	db11      	blt.n	eca <cbvprintf+0x5c6>
     ea6:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     ea8:	2f00      	cmp	r7, #0
     eaa:	dd07      	ble.n	ebc <cbvprintf+0x5b8>
			OUTC(' ');
     eac:	4629      	mov	r1, r5
     eae:	2020      	movs	r0, #32
     eb0:	47b0      	blx	r6
     eb2:	2800      	cmp	r0, #0
     eb4:	db09      	blt.n	eca <cbvprintf+0x5c6>
     eb6:	3401      	adds	r4, #1
			--width;
     eb8:	3f01      	subs	r7, #1
     eba:	e7f5      	b.n	ea8 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
     ebc:	f8dd 9008 	ldr.w	r9, [sp, #8]
     ec0:	e528      	b.n	914 <cbvprintf+0x10>
     ec2:	f8dd 9008 	ldr.w	r9, [sp, #8]
     ec6:	e525      	b.n	914 <cbvprintf+0x10>
		}
	}

	return count;
     ec8:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     eca:	b011      	add	sp, #68	; 0x44
     ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ed0:	00004d71 	.word	0x00004d71

00000ed4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     ed4:	b508      	push	{r3, lr}
     ed6:	f04f 0220 	mov.w	r2, #32
     eda:	f3ef 8311 	mrs	r3, BASEPRI
     ede:	f382 8812 	msr	BASEPRI_MAX, r2
     ee2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     ee6:	f000 fda7 	bl	1a38 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     eea:	4803      	ldr	r0, [pc, #12]	; (ef8 <sys_reboot+0x24>)
     eec:	f002 fe65 	bl	3bba <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     ef0:	f000 f9fa 	bl	12e8 <arch_cpu_idle>
     ef4:	e7fc      	b.n	ef0 <sys_reboot+0x1c>
     ef6:	bf00      	nop
     ef8:	00004d74 	.word	0x00004d74

00000efc <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
     efc:	b570      	push	{r4, r5, r6, lr}
     efe:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
     f00:	4b2b      	ldr	r3, [pc, #172]	; (fb0 <pm_system_resume+0xb4>)
     f02:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f04:	f005 031f 	and.w	r3, r5, #31
     f08:	2201      	movs	r2, #1
     f0a:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f0c:	0969      	lsrs	r1, r5, #5
     f0e:	4b29      	ldr	r3, [pc, #164]	; (fb4 <pm_system_resume+0xb8>)
     f10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     f14:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     f16:	f3bf 8f5b 	dmb	ish
     f1a:	e853 1f00 	ldrex	r1, [r3]
     f1e:	ea01 0400 	and.w	r4, r1, r0
     f22:	e843 4600 	strex	r6, r4, [r3]
     f26:	2e00      	cmp	r6, #0
     f28:	d1f7      	bne.n	f1a <pm_system_resume+0x1e>
     f2a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     f2e:	420a      	tst	r2, r1
     f30:	d03b      	beq.n	faa <pm_system_resume+0xae>
		exit_pos_ops(z_power_states[id]);
     f32:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     f36:	009a      	lsls	r2, r3, #2
     f38:	4b1f      	ldr	r3, [pc, #124]	; (fb8 <pm_system_resume+0xbc>)
     f3a:	4413      	add	r3, r2
     f3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     f40:	ab04      	add	r3, sp, #16
     f42:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     f46:	4b1d      	ldr	r3, [pc, #116]	; (fbc <pm_system_resume+0xc0>)
     f48:	b163      	cbz	r3, f64 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
     f4a:	f003 f987 	bl	425c <pm_power_state_exit_post_ops>
     f4e:	f04f 0320 	mov.w	r3, #32
     f52:	f3ef 8611 	mrs	r6, BASEPRI
     f56:	f383 8812 	msr	BASEPRI_MAX, r3
     f5a:	f3bf 8f6f 	isb	sy
     f5e:	4b18      	ldr	r3, [pc, #96]	; (fc0 <pm_system_resume+0xc4>)
     f60:	681c      	ldr	r4, [r3, #0]
     f62:	e008      	b.n	f76 <pm_system_resume+0x7a>
	__asm__ volatile(
     f64:	2300      	movs	r3, #0
     f66:	f383 8811 	msr	BASEPRI, r3
     f6a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     f6e:	e7ee      	b.n	f4e <pm_system_resume+0x52>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     f70:	b10c      	cbz	r4, f76 <pm_system_resume+0x7a>
	return node->next;
     f72:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f74:	b164      	cbz	r4, f90 <pm_system_resume+0x94>
     f76:	b15c      	cbz	r4, f90 <pm_system_resume+0x94>
			callback = notifier->state_exit;
     f78:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
     f7a:	2a00      	cmp	r2, #0
     f7c:	d0f8      	beq.n	f70 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
     f7e:	4b0c      	ldr	r3, [pc, #48]	; (fb0 <pm_system_resume+0xb4>)
     f80:	7d1b      	ldrb	r3, [r3, #20]
     f82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f86:	0099      	lsls	r1, r3, #2
     f88:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <pm_system_resume+0xbc>)
     f8a:	5c58      	ldrb	r0, [r3, r1]
     f8c:	4790      	blx	r2
     f8e:	e7ef      	b.n	f70 <pm_system_resume+0x74>
	__asm__ volatile(
     f90:	f386 8811 	msr	BASEPRI, r6
     f94:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f98:	4807      	ldr	r0, [pc, #28]	; (fb8 <pm_system_resume+0xbc>)
     f9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
     f9e:	00aa      	lsls	r2, r5, #2
     fa0:	1881      	adds	r1, r0, r2
     fa2:	2300      	movs	r3, #0
     fa4:	5083      	str	r3, [r0, r2]
     fa6:	604b      	str	r3, [r1, #4]
     fa8:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
     faa:	b004      	add	sp, #16
     fac:	bd70      	pop	{r4, r5, r6, pc}
     fae:	bf00      	nop
     fb0:	20000830 	.word	0x20000830
     fb4:	20000278 	.word	0x20000278
     fb8:	2000027c 	.word	0x2000027c
     fbc:	0000425d 	.word	0x0000425d
     fc0:	20000270 	.word	0x20000270

00000fc4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fc6:	b089      	sub	sp, #36	; 0x24
     fc8:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
     fca:	4b53      	ldr	r3, [pc, #332]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
     fcc:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fce:	f005 031f 	and.w	r3, r5, #31
     fd2:	2101      	movs	r1, #1
     fd4:	4099      	lsls	r1, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
     fd6:	096a      	lsrs	r2, r5, #5
     fd8:	4b50      	ldr	r3, [pc, #320]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
     fda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     fde:	f3bf 8f5b 	dmb	ish
     fe2:	e853 2f00 	ldrex	r2, [r3]
     fe6:	ea42 0001 	orr.w	r0, r2, r1
     fea:	e843 0600 	strex	r6, r0, [r3]
     fee:	2e00      	cmp	r6, #0
     ff0:	d1f7      	bne.n	fe2 <pm_system_suspend+0x1e>
     ff2:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
     ff6:	4211      	tst	r1, r2
     ff8:	d017      	beq.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
     ffa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     ffe:	4a48      	ldr	r2, [pc, #288]	; (1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    1000:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1004:	2b00      	cmp	r3, #0
    1006:	f000 8085 	beq.w	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    100a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    100e:	d11c      	bne.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1010:	f001 fe98 	bl	2d44 <k_sched_lock>
	__asm__ volatile(
    1014:	f04f 0320 	mov.w	r3, #32
    1018:	f3ef 8611 	mrs	r6, BASEPRI
    101c:	f383 8812 	msr	BASEPRI_MAX, r3
    1020:	f3bf 8f6f 	isb	sy
	return list->head;
    1024:	4b3f      	ldr	r3, [pc, #252]	; (1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>)
    1026:	681c      	ldr	r4, [r3, #0]
    1028:	e02f      	b.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    102a:	eb05 0645 	add.w	r6, r5, r5, lsl #1
    102e:	4b3c      	ldr	r3, [pc, #240]	; (1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    1030:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    1034:	466f      	mov	r7, sp
    1036:	4622      	mov	r2, r4
    1038:	4629      	mov	r1, r5
    103a:	4638      	mov	r0, r7
    103c:	f002 ffcf 	bl	3fde <pm_policy_next_state>
    1040:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    1044:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    1048:	e7d7      	b.n	ffa <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    104a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    104e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1052:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1054:	0c41      	lsrs	r1, r0, #17
    1056:	03c0      	lsls	r0, r0, #15
    1058:	4b33      	ldr	r3, [pc, #204]	; (1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
    105a:	18c0      	adds	r0, r0, r3
    105c:	4a33      	ldr	r2, [pc, #204]	; (112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>)
    105e:	f04f 0300 	mov.w	r3, #0
    1062:	f141 0100 	adc.w	r1, r1, #0
    1066:	f7ff f84b 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    106a:	2101      	movs	r1, #1
    106c:	1a20      	subs	r0, r4, r0
    106e:	f003 fd1d 	bl	4aac <z_set_timeout_expiry>
    1072:	e7cd      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
			callback(z_power_states[_current_cpu->id].state);
    1074:	4b28      	ldr	r3, [pc, #160]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    1076:	7d1b      	ldrb	r3, [r3, #20]
    1078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    107c:	4928      	ldr	r1, [pc, #160]	; (1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    107e:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1082:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    1084:	b10c      	cbz	r4, 108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
	return node->next;
    1086:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1088:	b124      	cbz	r4, 1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    108a:	b11c      	cbz	r4, 1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
			callback = notifier->state_entry;
    108c:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    108e:	2a00      	cmp	r2, #0
    1090:	d1f0      	bne.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
    1092:	e7f7      	b.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
	__asm__ volatile(
    1094:	f386 8811 	msr	BASEPRI, r6
    1098:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    109c:	f005 031f 	and.w	r3, r5, #31
    10a0:	2101      	movs	r1, #1
    10a2:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    10a4:	096b      	lsrs	r3, r5, #5
    10a6:	4a22      	ldr	r2, [pc, #136]	; (1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>)
    10a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    10ac:	f3bf 8f5b 	dmb	ish
    10b0:	e853 2f00 	ldrex	r2, [r3]
    10b4:	430a      	orrs	r2, r1
    10b6:	e843 2000 	strex	r0, r2, [r3]
    10ba:	2800      	cmp	r0, #0
    10bc:	d1f8      	bne.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    10be:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    10c2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    10c6:	4a16      	ldr	r2, [pc, #88]	; (1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    10c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    10cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    10d0:	ab08      	add	r3, sp, #32
    10d2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    10d6:	4b17      	ldr	r3, [pc, #92]	; (1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    10d8:	b10b      	cbz	r3, 10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
		pm_power_state_set(info);
    10da:	f003 f8ac 	bl	4236 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    10de:	f7ff ff0d 	bl	efc <pm_system_resume>
	k_sched_unlock();
    10e2:	f002 f839 	bl	3158 <k_sched_unlock>
	bool ret = true;
    10e6:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    10e8:	f005 021f 	and.w	r2, r5, #31
    10ec:	2301      	movs	r3, #1
    10ee:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    10f0:	096d      	lsrs	r5, r5, #5
    10f2:	4a0a      	ldr	r2, [pc, #40]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    10f4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    10f8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    10fa:	f3bf 8f5b 	dmb	ish
    10fe:	e855 2f00 	ldrex	r2, [r5]
    1102:	401a      	ands	r2, r3
    1104:	e845 2100 	strex	r1, r2, [r5]
    1108:	2900      	cmp	r1, #0
    110a:	d1f8      	bne.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
    110c:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1110:	b009      	add	sp, #36	; 0x24
    1112:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    1114:	2000      	movs	r0, #0
    1116:	e7e7      	b.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    1118:	20000830 	.word	0x20000830
    111c:	20000288 	.word	0x20000288
    1120:	2000027c 	.word	0x2000027c
    1124:	20000270 	.word	0x20000270
    1128:	000f423f 	.word	0x000f423f
    112c:	000f4240 	.word	0x000f4240
    1130:	20000278 	.word	0x20000278
    1134:	00004237 	.word	0x00004237

00001138 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1138:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    113a:	4802      	ldr	r0, [pc, #8]	; (1144 <nrf_cc3xx_platform_abort_init+0xc>)
    113c:	f002 fb6c 	bl	3818 <nrf_cc3xx_platform_set_abort>
}
    1140:	bd08      	pop	{r3, pc}
    1142:	bf00      	nop
    1144:	00004da0 	.word	0x00004da0

00001148 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1148:	b1d0      	cbz	r0, 1180 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    114a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    114c:	6842      	ldr	r2, [r0, #4]
    114e:	2a04      	cmp	r2, #4
    1150:	d005      	beq.n	115e <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1152:	b1d2      	cbz	r2, 118a <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1154:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1156:	f001 fceb 	bl	2b30 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    115a:	2000      	movs	r0, #0
    }
}
    115c:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    115e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1160:	2200      	movs	r2, #0
    1162:	f3bf 8f5b 	dmb	ish
    1166:	e853 1f00 	ldrex	r1, [r3]
    116a:	2901      	cmp	r1, #1
    116c:	d103      	bne.n	1176 <mutex_unlock_platform+0x2e>
    116e:	e843 2000 	strex	r0, r2, [r3]
    1172:	2800      	cmp	r0, #0
    1174:	d1f7      	bne.n	1166 <mutex_unlock_platform+0x1e>
    1176:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    117a:	d104      	bne.n	1186 <mutex_unlock_platform+0x3e>
    117c:	4610      	mov	r0, r2
    117e:	e7ed      	b.n	115c <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1180:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1184:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1186:	4802      	ldr	r0, [pc, #8]	; (1190 <mutex_unlock_platform+0x48>)
    1188:	e7e8      	b.n	115c <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    118a:	4802      	ldr	r0, [pc, #8]	; (1194 <mutex_unlock_platform+0x4c>)
    118c:	e7e6      	b.n	115c <mutex_unlock_platform+0x14>
    118e:	bf00      	nop
    1190:	ffff8fe9 	.word	0xffff8fe9
    1194:	ffff8fea 	.word	0xffff8fea

00001198 <mutex_lock_platform>:
    if(mutex == NULL) {
    1198:	b320      	cbz	r0, 11e4 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    119a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    119c:	6842      	ldr	r2, [r0, #4]
    119e:	2a04      	cmp	r2, #4
    11a0:	d002      	beq.n	11a8 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11a2:	b992      	cbnz	r2, 11ca <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    11a4:	4811      	ldr	r0, [pc, #68]	; (11ec <mutex_lock_platform+0x54>)
    11a6:	e00f      	b.n	11c8 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    11a8:	6803      	ldr	r3, [r0, #0]
    11aa:	2201      	movs	r2, #1
    11ac:	f3bf 8f5b 	dmb	ish
    11b0:	e853 1f00 	ldrex	r1, [r3]
    11b4:	2900      	cmp	r1, #0
    11b6:	d103      	bne.n	11c0 <mutex_lock_platform+0x28>
    11b8:	e843 2000 	strex	r0, r2, [r3]
    11bc:	2800      	cmp	r0, #0
    11be:	d1f7      	bne.n	11b0 <mutex_lock_platform+0x18>
    11c0:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11c4:	d10c      	bne.n	11e0 <mutex_lock_platform+0x48>
    11c6:	2000      	movs	r0, #0
}
    11c8:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    11ca:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    11cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    11d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    11d4:	f001 fc22 	bl	2a1c <z_impl_k_mutex_lock>
        if (ret == 0) {
    11d8:	2800      	cmp	r0, #0
    11da:	d0f5      	beq.n	11c8 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    11dc:	4804      	ldr	r0, [pc, #16]	; (11f0 <mutex_lock_platform+0x58>)
    11de:	e7f3      	b.n	11c8 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11e0:	4803      	ldr	r0, [pc, #12]	; (11f0 <mutex_lock_platform+0x58>)
    11e2:	e7f1      	b.n	11c8 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    11e4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    11e8:	4770      	bx	lr
    11ea:	bf00      	nop
    11ec:	ffff8fea 	.word	0xffff8fea
    11f0:	ffff8fe9 	.word	0xffff8fe9

000011f4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11f4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    11f6:	4604      	mov	r4, r0
    11f8:	b188      	cbz	r0, 121e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    11fa:	6863      	ldr	r3, [r4, #4]
    11fc:	2b04      	cmp	r3, #4
    11fe:	d00d      	beq.n	121c <mutex_free_platform+0x28>
    1200:	2b08      	cmp	r3, #8
    1202:	d00b      	beq.n	121c <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1204:	b153      	cbz	r3, 121c <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1206:	f013 0f02 	tst.w	r3, #2
    120a:	d00d      	beq.n	1228 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    120c:	4621      	mov	r1, r4
    120e:	4809      	ldr	r0, [pc, #36]	; (1234 <mutex_free_platform+0x40>)
    1210:	f003 fa89 	bl	4726 <k_mem_slab_free>
        mutex->mutex = NULL;
    1214:	2300      	movs	r3, #0
    1216:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1218:	2300      	movs	r3, #0
    121a:	6063      	str	r3, [r4, #4]
}
    121c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    121e:	4b06      	ldr	r3, [pc, #24]	; (1238 <mutex_free_platform+0x44>)
    1220:	685b      	ldr	r3, [r3, #4]
    1222:	4806      	ldr	r0, [pc, #24]	; (123c <mutex_free_platform+0x48>)
    1224:	4798      	blx	r3
    1226:	e7e8      	b.n	11fa <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1228:	2214      	movs	r2, #20
    122a:	2100      	movs	r1, #0
    122c:	6820      	ldr	r0, [r4, #0]
    122e:	f002 ffe4 	bl	41fa <memset>
    1232:	e7f1      	b.n	1218 <mutex_free_platform+0x24>
    1234:	2000028c 	.word	0x2000028c
    1238:	20000030 	.word	0x20000030
    123c:	00004da8 	.word	0x00004da8

00001240 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1240:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1242:	4604      	mov	r4, r0
    1244:	b178      	cbz	r0, 1266 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1246:	6863      	ldr	r3, [r4, #4]
    1248:	2b04      	cmp	r3, #4
    124a:	d00b      	beq.n	1264 <mutex_init_platform+0x24>
    124c:	2b08      	cmp	r3, #8
    124e:	d009      	beq.n	1264 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1250:	b90b      	cbnz	r3, 1256 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    1252:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1254:	b163      	cbz	r3, 1270 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1256:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1258:	f003 fad4 	bl	4804 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    125c:	6863      	ldr	r3, [r4, #4]
    125e:	f043 0301 	orr.w	r3, r3, #1
    1262:	6063      	str	r3, [r4, #4]
}
    1264:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1266:	4b0f      	ldr	r3, [pc, #60]	; (12a4 <mutex_init_platform+0x64>)
    1268:	685b      	ldr	r3, [r3, #4]
    126a:	480f      	ldr	r0, [pc, #60]	; (12a8 <mutex_init_platform+0x68>)
    126c:	4798      	blx	r3
    126e:	e7ea      	b.n	1246 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1278:	4621      	mov	r1, r4
    127a:	480c      	ldr	r0, [pc, #48]	; (12ac <mutex_init_platform+0x6c>)
    127c:	f001 faa8 	bl	27d0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1280:	b908      	cbnz	r0, 1286 <mutex_init_platform+0x46>
    1282:	6823      	ldr	r3, [r4, #0]
    1284:	b91b      	cbnz	r3, 128e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    1286:	4b07      	ldr	r3, [pc, #28]	; (12a4 <mutex_init_platform+0x64>)
    1288:	685b      	ldr	r3, [r3, #4]
    128a:	4809      	ldr	r0, [pc, #36]	; (12b0 <mutex_init_platform+0x70>)
    128c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    128e:	2214      	movs	r2, #20
    1290:	2100      	movs	r1, #0
    1292:	6820      	ldr	r0, [r4, #0]
    1294:	f002 ffb1 	bl	41fa <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1298:	6863      	ldr	r3, [r4, #4]
    129a:	f043 0302 	orr.w	r3, r3, #2
    129e:	6063      	str	r3, [r4, #4]
    12a0:	e7d9      	b.n	1256 <mutex_init_platform+0x16>
    12a2:	bf00      	nop
    12a4:	20000030 	.word	0x20000030
    12a8:	00004da8 	.word	0x00004da8
    12ac:	2000028c 	.word	0x2000028c
    12b0:	00004dd0 	.word	0x00004dd0

000012b4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    12b4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    12b6:	2340      	movs	r3, #64	; 0x40
    12b8:	2214      	movs	r2, #20
    12ba:	4904      	ldr	r1, [pc, #16]	; (12cc <nrf_cc3xx_platform_mutex_init+0x18>)
    12bc:	4804      	ldr	r0, [pc, #16]	; (12d0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    12be:	f003 fa24 	bl	470a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    12c2:	4904      	ldr	r1, [pc, #16]	; (12d4 <nrf_cc3xx_platform_mutex_init+0x20>)
    12c4:	4804      	ldr	r0, [pc, #16]	; (12d8 <nrf_cc3xx_platform_mutex_init+0x24>)
    12c6:	f002 fb09 	bl	38dc <nrf_cc3xx_platform_set_mutexes>
}
    12ca:	bd08      	pop	{r3, pc}
    12cc:	200002a8 	.word	0x200002a8
    12d0:	2000028c 	.word	0x2000028c
    12d4:	00004e10 	.word	0x00004e10
    12d8:	00004e00 	.word	0x00004e00

000012dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    12dc:	4901      	ldr	r1, [pc, #4]	; (12e4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    12de:	2210      	movs	r2, #16
	str	r2, [r1]
    12e0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    12e2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    12e4:	e000ed10 	.word	0xe000ed10

000012e8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    12e8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    12ea:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    12ec:	f380 8811 	msr	BASEPRI, r0
	isb
    12f0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    12f4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    12f8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    12fa:	b662      	cpsie	i
	isb
    12fc:	f3bf 8f6f 	isb	sy

	bx	lr
    1300:	4770      	bx	lr
    1302:	bf00      	nop

00001304 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1304:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1306:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1308:	f381 8811 	msr	BASEPRI, r1

	wfe
    130c:	bf20      	wfe

	msr	BASEPRI, r0
    130e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1312:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1314:	4770      	bx	lr
    1316:	bf00      	nop

00001318 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1318:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    131a:	2800      	cmp	r0, #0
    131c:	db07      	blt.n	132e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    131e:	f000 021f 	and.w	r2, r0, #31
    1322:	0940      	lsrs	r0, r0, #5
    1324:	2301      	movs	r3, #1
    1326:	4093      	lsls	r3, r2
    1328:	4a01      	ldr	r2, [pc, #4]	; (1330 <arch_irq_enable+0x18>)
    132a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    132e:	4770      	bx	lr
    1330:	e000e100 	.word	0xe000e100

00001334 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1334:	0942      	lsrs	r2, r0, #5
    1336:	4b05      	ldr	r3, [pc, #20]	; (134c <arch_irq_is_enabled+0x18>)
    1338:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    133c:	f000 001f 	and.w	r0, r0, #31
    1340:	2301      	movs	r3, #1
    1342:	fa03 f000 	lsl.w	r0, r3, r0
}
    1346:	4010      	ands	r0, r2
    1348:	4770      	bx	lr
    134a:	bf00      	nop
    134c:	e000e100 	.word	0xe000e100

00001350 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1350:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1352:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1354:	2800      	cmp	r0, #0
    1356:	db08      	blt.n	136a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1358:	0149      	lsls	r1, r1, #5
    135a:	b2c9      	uxtb	r1, r1
    135c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1360:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1364:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1368:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    136a:	f000 000f 	and.w	r0, r0, #15
    136e:	0149      	lsls	r1, r1, #5
    1370:	b2c9      	uxtb	r1, r1
    1372:	4b01      	ldr	r3, [pc, #4]	; (1378 <z_arm_irq_priority_set+0x28>)
    1374:	5419      	strb	r1, [r3, r0]
}
    1376:	4770      	bx	lr
    1378:	e000ed14 	.word	0xe000ed14

0000137c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    137c:	bf30      	wfi
    b z_SysNmiOnReset
    137e:	f7ff bffd 	b.w	137c <z_SysNmiOnReset>
    1382:	bf00      	nop

00001384 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1384:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1386:	4b0b      	ldr	r3, [pc, #44]	; (13b4 <z_arm_prep_c+0x30>)
    1388:	4a0b      	ldr	r2, [pc, #44]	; (13b8 <z_arm_prep_c+0x34>)
    138a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    138e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1390:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1394:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1398:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    139c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    13a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    13a4:	f001 f9b4 	bl	2710 <z_bss_zero>
	z_data_copy();
    13a8:	f002 f842 	bl	3430 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    13ac:	f000 fa08 	bl	17c0 <z_arm_interrupt_init>
	z_cstart();
    13b0:	f001 f9ba 	bl	2728 <z_cstart>
    13b4:	e000ed00 	.word	0xe000ed00
    13b8:	00000000 	.word	0x00000000

000013bc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    13bc:	4a0a      	ldr	r2, [pc, #40]	; (13e8 <arch_swap+0x2c>)
    13be:	6893      	ldr	r3, [r2, #8]
    13c0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    13c4:	4909      	ldr	r1, [pc, #36]	; (13ec <arch_swap+0x30>)
    13c6:	6809      	ldr	r1, [r1, #0]
    13c8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13cc:	4908      	ldr	r1, [pc, #32]	; (13f0 <arch_swap+0x34>)
    13ce:	684b      	ldr	r3, [r1, #4]
    13d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    13d4:	604b      	str	r3, [r1, #4]
    13d6:	2300      	movs	r3, #0
    13d8:	f383 8811 	msr	BASEPRI, r3
    13dc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    13e0:	6893      	ldr	r3, [r2, #8]
}
    13e2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    13e6:	4770      	bx	lr
    13e8:	20000830 	.word	0x20000830
    13ec:	00004e9c 	.word	0x00004e9c
    13f0:	e000ed00 	.word	0xe000ed00

000013f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    13f4:	4913      	ldr	r1, [pc, #76]	; (1444 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    13f6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    13f8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    13fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    13fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1402:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1406:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1408:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    140c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1410:	4f0d      	ldr	r7, [pc, #52]	; (1448 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1412:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1416:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1418:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    141a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    141c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1420:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1422:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1426:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    142a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    142c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    142e:	f000 fa6d 	bl	190c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1432:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1436:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    143a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    143e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1442:	4770      	bx	lr
    ldr r1, =_kernel
    1444:	20000830 	.word	0x20000830
    ldr v4, =_SCS_ICSR
    1448:	e000ed04 	.word	0xe000ed04

0000144c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    144c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1450:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1452:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1456:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    145a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    145c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1460:	2902      	cmp	r1, #2
    beq _oops
    1462:	d0ff      	beq.n	1464 <_oops>

00001464 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1464:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1466:	f002 fdc7 	bl	3ff8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    146a:	bd01      	pop	{r0, pc}

0000146c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    146c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    146e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1472:	490e      	ldr	r1, [pc, #56]	; (14ac <arch_new_thread+0x40>)
    1474:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1478:	f021 0101 	bic.w	r1, r1, #1
    147c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1480:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1484:	9b01      	ldr	r3, [sp, #4]
    1486:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    148a:	9b02      	ldr	r3, [sp, #8]
    148c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1490:	9b03      	ldr	r3, [sp, #12]
    1492:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    149a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    149e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    14a0:	2300      	movs	r3, #0
    14a2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    14a6:	bc10      	pop	{r4}
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop
    14ac:	00003e9d 	.word	0x00003e9d

000014b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    14b0:	4b12      	ldr	r3, [pc, #72]	; (14fc <z_check_thread_stack_fail+0x4c>)
    14b2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    14b4:	b302      	cbz	r2, 14f8 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    14b6:	f110 0f16 	cmn.w	r0, #22
    14ba:	d011      	beq.n	14e0 <z_check_thread_stack_fail+0x30>
    14bc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    14c0:	f1a3 0c20 	sub.w	ip, r3, #32
    14c4:	4584      	cmp	ip, r0
    14c6:	d805      	bhi.n	14d4 <z_check_thread_stack_fail+0x24>
    14c8:	4283      	cmp	r3, r0
    14ca:	d905      	bls.n	14d8 <z_check_thread_stack_fail+0x28>
    14cc:	428b      	cmp	r3, r1
    14ce:	d805      	bhi.n	14dc <z_check_thread_stack_fail+0x2c>
    14d0:	2100      	movs	r1, #0
    14d2:	e00b      	b.n	14ec <z_check_thread_stack_fail+0x3c>
    14d4:	2100      	movs	r1, #0
    14d6:	e009      	b.n	14ec <z_check_thread_stack_fail+0x3c>
    14d8:	2100      	movs	r1, #0
    14da:	e007      	b.n	14ec <z_check_thread_stack_fail+0x3c>
    14dc:	2101      	movs	r1, #1
    14de:	e005      	b.n	14ec <z_check_thread_stack_fail+0x3c>
    14e0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    14e4:	428b      	cmp	r3, r1
    14e6:	bf94      	ite	ls
    14e8:	2100      	movls	r1, #0
    14ea:	2101      	movhi	r1, #1
    14ec:	b909      	cbnz	r1, 14f2 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    14ee:	2000      	movs	r0, #0
}
    14f0:	4770      	bx	lr
		return thread->stack_info.start;
    14f2:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    14f6:	4770      	bx	lr
		return 0;
    14f8:	2000      	movs	r0, #0
    14fa:	4770      	bx	lr
    14fc:	20000830 	.word	0x20000830

00001500 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1500:	b508      	push	{r3, lr}
    1502:	460d      	mov	r5, r1
    1504:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1506:	4b08      	ldr	r3, [pc, #32]	; (1528 <arch_switch_to_main_thread+0x28>)
    1508:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    150a:	f000 f9ff 	bl	190c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    150e:	4620      	mov	r0, r4
    1510:	f385 8809 	msr	PSP, r5
    1514:	2100      	movs	r1, #0
    1516:	b663      	cpsie	if
    1518:	f381 8811 	msr	BASEPRI, r1
    151c:	f3bf 8f6f 	isb	sy
    1520:	2200      	movs	r2, #0
    1522:	2300      	movs	r3, #0
    1524:	f002 fcba 	bl	3e9c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1528:	20000830 	.word	0x20000830

0000152c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    152c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    152e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1530:	4a0b      	ldr	r2, [pc, #44]	; (1560 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1532:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1534:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1536:	bf1e      	ittt	ne
	movne	r1, #0
    1538:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    153a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    153c:	f003 f946 	blne	47cc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1540:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1542:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1546:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    154a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    154e:	4905      	ldr	r1, [pc, #20]	; (1564 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1550:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1552:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1554:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1556:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    155a:	4903      	ldr	r1, [pc, #12]	; (1568 <_isr_wrapper+0x3c>)
	bx r1
    155c:	4708      	bx	r1
    155e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1560:	20000830 	.word	0x20000830
	ldr r1, =_sw_isr_table
    1564:	00004b6c 	.word	0x00004b6c
	ldr r1, =z_arm_int_exit
    1568:	0000156d 	.word	0x0000156d

0000156c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    156e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1570:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1572:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1574:	d003      	beq.n	157e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1576:	4903      	ldr	r1, [pc, #12]	; (1584 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    157c:	600a      	str	r2, [r1, #0]

0000157e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    157e:	4770      	bx	lr
	ldr r3, =_kernel
    1580:	20000830 	.word	0x20000830
	ldr r1, =_SCS_ICSR
    1584:	e000ed04 	.word	0xe000ed04

00001588 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1588:	b510      	push	{r4, lr}
    158a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    158c:	4b12      	ldr	r3, [pc, #72]	; (15d8 <bus_fault+0x50>)
    158e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1594:	f413 7f00 	tst.w	r3, #512	; 0x200
    1598:	d00b      	beq.n	15b2 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    159a:	4b0f      	ldr	r3, [pc, #60]	; (15d8 <bus_fault+0x50>)
    159c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15a0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    15a4:	d005      	beq.n	15b2 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    15a6:	b121      	cbz	r1, 15b2 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    15a8:	4a0b      	ldr	r2, [pc, #44]	; (15d8 <bus_fault+0x50>)
    15aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    15ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    15b0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    15b2:	4b09      	ldr	r3, [pc, #36]	; (15d8 <bus_fault+0x50>)
    15b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    15b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15b8:	f413 7f80 	tst.w	r3, #256	; 0x100
    15bc:	d101      	bne.n	15c2 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    15be:	4b06      	ldr	r3, [pc, #24]	; (15d8 <bus_fault+0x50>)
    15c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15c2:	4a05      	ldr	r2, [pc, #20]	; (15d8 <bus_fault+0x50>)
    15c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    15c6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    15ca:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    15cc:	2101      	movs	r1, #1
    15ce:	f002 fd25 	bl	401c <memory_fault_recoverable>
    15d2:	7020      	strb	r0, [r4, #0]

	return reason;
}
    15d4:	2000      	movs	r0, #0
    15d6:	bd10      	pop	{r4, pc}
    15d8:	e000ed00 	.word	0xe000ed00

000015dc <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15dc:	4b07      	ldr	r3, [pc, #28]	; (15fc <usage_fault+0x20>)
    15de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    15e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    15e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    15e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    15e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    15ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15ec:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    15f0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    15f4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    15f6:	2000      	movs	r0, #0
    15f8:	4770      	bx	lr
    15fa:	bf00      	nop
    15fc:	e000ed00 	.word	0xe000ed00

00001600 <mem_manage_fault>:
{
    1600:	b570      	push	{r4, r5, r6, lr}
    1602:	4605      	mov	r5, r0
    1604:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1606:	4b20      	ldr	r3, [pc, #128]	; (1688 <mem_manage_fault+0x88>)
    1608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    160a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    160e:	f013 0f02 	tst.w	r3, #2
    1612:	d00c      	beq.n	162e <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    1614:	4b1c      	ldr	r3, [pc, #112]	; (1688 <mem_manage_fault+0x88>)
    1616:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    161a:	f013 0f80 	tst.w	r3, #128	; 0x80
    161e:	d025      	beq.n	166c <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    1620:	b139      	cbz	r1, 1632 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1622:	4a19      	ldr	r2, [pc, #100]	; (1688 <mem_manage_fault+0x88>)
    1624:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    162a:	6293      	str	r3, [r2, #40]	; 0x28
    162c:	e001      	b.n	1632 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    162e:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1632:	4b15      	ldr	r3, [pc, #84]	; (1688 <mem_manage_fault+0x88>)
    1634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    163a:	f013 0f10 	tst.w	r3, #16
    163e:	d104      	bne.n	164a <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1640:	4b11      	ldr	r3, [pc, #68]	; (1688 <mem_manage_fault+0x88>)
    1642:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1644:	f014 0402 	ands.w	r4, r4, #2
    1648:	d004      	beq.n	1654 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    164a:	4b0f      	ldr	r3, [pc, #60]	; (1688 <mem_manage_fault+0x88>)
    164c:	685c      	ldr	r4, [r3, #4]
    164e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    1652:	d10e      	bne.n	1672 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1654:	4a0c      	ldr	r2, [pc, #48]	; (1688 <mem_manage_fault+0x88>)
    1656:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1658:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    165c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    165e:	2101      	movs	r1, #1
    1660:	4628      	mov	r0, r5
    1662:	f002 fcdb 	bl	401c <memory_fault_recoverable>
    1666:	7030      	strb	r0, [r6, #0]
}
    1668:	4620      	mov	r0, r4
    166a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    166c:	f06f 0015 	mvn.w	r0, #21
    1670:	e7df      	b.n	1632 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1672:	4629      	mov	r1, r5
    1674:	f7ff ff1c 	bl	14b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1678:	4604      	mov	r4, r0
    167a:	2800      	cmp	r0, #0
    167c:	d0ea      	beq.n	1654 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    167e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1682:	2402      	movs	r4, #2
    1684:	e7e6      	b.n	1654 <mem_manage_fault+0x54>
    1686:	bf00      	nop
    1688:	e000ed00 	.word	0xe000ed00

0000168c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    168c:	b508      	push	{r3, lr}
    168e:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1690:	2300      	movs	r3, #0
    1692:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1694:	4b1b      	ldr	r3, [pc, #108]	; (1704 <hard_fault+0x78>)
    1696:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1698:	f010 0002 	ands.w	r0, r0, #2
    169c:	d12e      	bne.n	16fc <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    16a0:	2b00      	cmp	r3, #0
    16a2:	db2c      	blt.n	16fe <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    16a4:	4b17      	ldr	r3, [pc, #92]	; (1704 <hard_fault+0x78>)
    16a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    16a8:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    16ac:	d028      	beq.n	1700 <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    16ae:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    16b2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    16b6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    16ba:	429a      	cmp	r2, r3
    16bc:	d00f      	beq.n	16de <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    16be:	4b11      	ldr	r3, [pc, #68]	; (1704 <hard_fault+0x78>)
    16c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    16c4:	b973      	cbnz	r3, 16e4 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    16c6:	4b0f      	ldr	r3, [pc, #60]	; (1704 <hard_fault+0x78>)
    16c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    16cc:	b983      	cbnz	r3, 16f0 <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    16ce:	4b0d      	ldr	r3, [pc, #52]	; (1704 <hard_fault+0x78>)
    16d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    16d2:	b29b      	uxth	r3, r3
    16d4:	b19b      	cbz	r3, 16fe <hard_fault+0x72>
			reason = usage_fault(esf);
    16d6:	4660      	mov	r0, ip
    16d8:	f7ff ff80 	bl	15dc <usage_fault>
    16dc:	e00f      	b.n	16fe <hard_fault+0x72>
			reason = esf->basic.r0;
    16de:	f8dc 0000 	ldr.w	r0, [ip]
    16e2:	e00c      	b.n	16fe <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
    16e4:	460a      	mov	r2, r1
    16e6:	2101      	movs	r1, #1
    16e8:	4660      	mov	r0, ip
    16ea:	f7ff ff89 	bl	1600 <mem_manage_fault>
    16ee:	e006      	b.n	16fe <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
    16f0:	460a      	mov	r2, r1
    16f2:	2101      	movs	r1, #1
    16f4:	4660      	mov	r0, ip
    16f6:	f7ff ff47 	bl	1588 <bus_fault>
    16fa:	e000      	b.n	16fe <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    16fc:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    16fe:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1700:	4618      	mov	r0, r3
	return reason;
    1702:	e7fc      	b.n	16fe <hard_fault+0x72>
    1704:	e000ed00 	.word	0xe000ed00

00001708 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1708:	b570      	push	{r4, r5, r6, lr}
    170a:	b08a      	sub	sp, #40	; 0x28
    170c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    170e:	4b22      	ldr	r3, [pc, #136]	; (1798 <z_arm_fault+0x90>)
    1710:	6859      	ldr	r1, [r3, #4]
    1712:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1716:	2300      	movs	r3, #0
    1718:	f383 8811 	msr	BASEPRI, r3
    171c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1720:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1724:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1728:	d115      	bne.n	1756 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    172a:	f002 030c 	and.w	r3, r2, #12
    172e:	2b08      	cmp	r3, #8
    1730:	d014      	beq.n	175c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1732:	f012 0f08 	tst.w	r2, #8
    1736:	d00b      	beq.n	1750 <z_arm_fault+0x48>
	*nested_exc = false;
    1738:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    173a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    173e:	4620      	mov	r0, r4
    1740:	f002 fc71 	bl	4026 <fault_handle>
    1744:	4605      	mov	r5, r0
	if (recoverable) {
    1746:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    174a:	b153      	cbz	r3, 1762 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    174c:	b00a      	add	sp, #40	; 0x28
    174e:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1750:	4604      	mov	r4, r0
			*nested_exc = true;
    1752:	2601      	movs	r6, #1
    1754:	e7f1      	b.n	173a <z_arm_fault+0x32>
	*nested_exc = false;
    1756:	2600      	movs	r6, #0
		return NULL;
    1758:	4634      	mov	r4, r6
    175a:	e7ee      	b.n	173a <z_arm_fault+0x32>
	*nested_exc = false;
    175c:	2600      	movs	r6, #0
		return NULL;
    175e:	4634      	mov	r4, r6
    1760:	e7eb      	b.n	173a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1762:	2220      	movs	r2, #32
    1764:	4621      	mov	r1, r4
    1766:	a801      	add	r0, sp, #4
    1768:	f002 fd18 	bl	419c <memcpy>
	if (nested_exc) {
    176c:	b14e      	cbz	r6, 1782 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    176e:	9b08      	ldr	r3, [sp, #32]
    1770:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1774:	b95a      	cbnz	r2, 178e <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1776:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    177a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    177e:	9308      	str	r3, [sp, #32]
    1780:	e005      	b.n	178e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1782:	9b08      	ldr	r3, [sp, #32]
    1784:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1788:	f023 0301 	bic.w	r3, r3, #1
    178c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    178e:	a901      	add	r1, sp, #4
    1790:	4628      	mov	r0, r5
    1792:	f002 fc2d 	bl	3ff0 <z_arm_fatal_error>
    1796:	e7d9      	b.n	174c <z_arm_fault+0x44>
    1798:	e000ed00 	.word	0xe000ed00

0000179c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    179c:	4a02      	ldr	r2, [pc, #8]	; (17a8 <z_arm_fault_init+0xc>)
    179e:	6953      	ldr	r3, [r2, #20]
    17a0:	f043 0310 	orr.w	r3, r3, #16
    17a4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    17a6:	4770      	bx	lr
    17a8:	e000ed00 	.word	0xe000ed00

000017ac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    17ac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    17b0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    17b4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    17b6:	4672      	mov	r2, lr
	bl z_arm_fault
    17b8:	f7ff ffa6 	bl	1708 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    17bc:	bd01      	pop	{r0, pc}
    17be:	bf00      	nop

000017c0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    17c0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    17c2:	e006      	b.n	17d2 <z_arm_interrupt_init+0x12>
    17c4:	f002 010f 	and.w	r1, r2, #15
    17c8:	4b09      	ldr	r3, [pc, #36]	; (17f0 <z_arm_interrupt_init+0x30>)
    17ca:	440b      	add	r3, r1
    17cc:	2120      	movs	r1, #32
    17ce:	7619      	strb	r1, [r3, #24]
    17d0:	3201      	adds	r2, #1
    17d2:	2a2f      	cmp	r2, #47	; 0x2f
    17d4:	dc0a      	bgt.n	17ec <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    17d6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    17d8:	2b00      	cmp	r3, #0
    17da:	dbf3      	blt.n	17c4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    17e0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    17e4:	2120      	movs	r1, #32
    17e6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    17ea:	e7f1      	b.n	17d0 <z_arm_interrupt_init+0x10>
	}
}
    17ec:	4770      	bx	lr
    17ee:	bf00      	nop
    17f0:	e000ecfc 	.word	0xe000ecfc

000017f4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    17f4:	2000      	movs	r0, #0
    msr CONTROL, r0
    17f6:	f380 8814 	msr	CONTROL, r0
    isb
    17fa:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    17fe:	f003 f98b 	bl	4b18 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1802:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1804:	490d      	ldr	r1, [pc, #52]	; (183c <__start+0x48>)
    str r0, [r1]
    1806:	6008      	str	r0, [r1, #0]
    dsb
    1808:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    180c:	480c      	ldr	r0, [pc, #48]	; (1840 <__start+0x4c>)
    msr msp, r0
    180e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1812:	f000 f82d 	bl	1870 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1816:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1818:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    181c:	4809      	ldr	r0, [pc, #36]	; (1844 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    181e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1822:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1824:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1828:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    182c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    182e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1830:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1834:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1838:	f7ff fda4 	bl	1384 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    183c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1840:	20000e60 	.word	0x20000e60
    ldr r0, =z_interrupt_stacks
    1844:	20000fe0 	.word	0x20000fe0

00001848 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1848:	4b08      	ldr	r3, [pc, #32]	; (186c <z_arm_clear_arm_mpu_config+0x24>)
    184a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    184e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1852:	2300      	movs	r3, #0
    1854:	e006      	b.n	1864 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1856:	4a05      	ldr	r2, [pc, #20]	; (186c <z_arm_clear_arm_mpu_config+0x24>)
    1858:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    185c:	2100      	movs	r1, #0
    185e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1862:	3301      	adds	r3, #1
    1864:	4283      	cmp	r3, r0
    1866:	dbf6      	blt.n	1856 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1868:	4770      	bx	lr
    186a:	bf00      	nop
    186c:	e000ed00 	.word	0xe000ed00

00001870 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1870:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1872:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1874:	2400      	movs	r4, #0
    1876:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    187a:	f7ff ffe5 	bl	1848 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    187e:	4623      	mov	r3, r4
    1880:	e008      	b.n	1894 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1882:	f103 0120 	add.w	r1, r3, #32
    1886:	4a0e      	ldr	r2, [pc, #56]	; (18c0 <z_arm_init_arch_hw_at_boot+0x50>)
    1888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    188c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1890:	3301      	adds	r3, #1
    1892:	b2db      	uxtb	r3, r3
    1894:	2b07      	cmp	r3, #7
    1896:	d9f4      	bls.n	1882 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1898:	2300      	movs	r3, #0
    189a:	e008      	b.n	18ae <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    189c:	f103 0160 	add.w	r1, r3, #96	; 0x60
    18a0:	4a07      	ldr	r2, [pc, #28]	; (18c0 <z_arm_init_arch_hw_at_boot+0x50>)
    18a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    18a6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    18aa:	3301      	adds	r3, #1
    18ac:	b2db      	uxtb	r3, r3
    18ae:	2b07      	cmp	r3, #7
    18b0:	d9f4      	bls.n	189c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    18b2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    18b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18b8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    18bc:	bd10      	pop	{r4, pc}
    18be:	bf00      	nop
    18c0:	e000e100 	.word	0xe000e100

000018c4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    18c4:	b508      	push	{r3, lr}
	if (_current == thread) {
    18c6:	4b08      	ldr	r3, [pc, #32]	; (18e8 <z_impl_k_thread_abort+0x24>)
    18c8:	689b      	ldr	r3, [r3, #8]
    18ca:	4283      	cmp	r3, r0
    18cc:	d002      	beq.n	18d4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    18ce:	f001 fd87 	bl	33e0 <z_thread_abort>
}
    18d2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    18d4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    18d8:	2b00      	cmp	r3, #0
    18da:	d0f8      	beq.n	18ce <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18dc:	4a03      	ldr	r2, [pc, #12]	; (18ec <z_impl_k_thread_abort+0x28>)
    18de:	6853      	ldr	r3, [r2, #4]
    18e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    18e4:	6053      	str	r3, [r2, #4]
    18e6:	e7f2      	b.n	18ce <z_impl_k_thread_abort+0xa>
    18e8:	20000830 	.word	0x20000830
    18ec:	e000ed00 	.word	0xe000ed00

000018f0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    18f0:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    18f2:	4b03      	ldr	r3, [pc, #12]	; (1900 <z_arm_configure_static_mpu_regions+0x10>)
    18f4:	4a03      	ldr	r2, [pc, #12]	; (1904 <z_arm_configure_static_mpu_regions+0x14>)
    18f6:	2101      	movs	r1, #1
    18f8:	4803      	ldr	r0, [pc, #12]	; (1908 <z_arm_configure_static_mpu_regions+0x18>)
    18fa:	f002 fc1a 	bl	4132 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    18fe:	bd08      	pop	{r3, pc}
    1900:	20040000 	.word	0x20040000
    1904:	20000000 	.word	0x20000000
    1908:	00004e24 	.word	0x00004e24

0000190c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    190c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    190e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    1912:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1914:	4804      	ldr	r0, [pc, #16]	; (1928 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1916:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    1918:	2320      	movs	r3, #32
    191a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    191c:	4b03      	ldr	r3, [pc, #12]	; (192c <z_arm_configure_dynamic_mpu_regions+0x20>)
    191e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1920:	2101      	movs	r1, #1
    1922:	f002 fc0a 	bl	413a <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    1926:	bd08      	pop	{r3, pc}
    1928:	200007a8 	.word	0x200007a8
    192c:	150b0000 	.word	0x150b0000

00001930 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1930:	4a08      	ldr	r2, [pc, #32]	; (1954 <region_init+0x24>)
    1932:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1936:	680b      	ldr	r3, [r1, #0]
    1938:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    193c:	4303      	orrs	r3, r0
    193e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1942:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1946:	688b      	ldr	r3, [r1, #8]
    1948:	f043 0301 	orr.w	r3, r3, #1
    194c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    1950:	4770      	bx	lr
    1952:	bf00      	nop
    1954:	e000ed00 	.word	0xe000ed00

00001958 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1958:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    195a:	4c03      	ldr	r4, [pc, #12]	; (1968 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    195c:	2301      	movs	r3, #1
    195e:	7822      	ldrb	r2, [r4, #0]
    1960:	f002 fbbf 	bl	40e2 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1964:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1966:	bd10      	pop	{r4, pc}
    1968:	20000884 	.word	0x20000884

0000196c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    196c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    196e:	2300      	movs	r3, #0
    1970:	4a09      	ldr	r2, [pc, #36]	; (1998 <mpu_configure_dynamic_mpu_regions+0x2c>)
    1972:	7812      	ldrb	r2, [r2, #0]
    1974:	f002 fbb5 	bl	40e2 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1978:	f110 0f16 	cmn.w	r0, #22
    197c:	d00a      	beq.n	1994 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    197e:	4603      	mov	r3, r0
    1980:	e006      	b.n	1990 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    1982:	4a06      	ldr	r2, [pc, #24]	; (199c <mpu_configure_dynamic_mpu_regions+0x30>)
    1984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1988:	2100      	movs	r1, #0
    198a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    198e:	3301      	adds	r3, #1
    1990:	2b07      	cmp	r3, #7
    1992:	ddf6      	ble.n	1982 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    1994:	bd08      	pop	{r3, pc}
    1996:	bf00      	nop
    1998:	20000884 	.word	0x20000884
    199c:	e000ed00 	.word	0xe000ed00

000019a0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    19a0:	4b04      	ldr	r3, [pc, #16]	; (19b4 <arm_core_mpu_enable+0x14>)
    19a2:	2205      	movs	r2, #5
    19a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    19a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ac:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop
    19b4:	e000ed00 	.word	0xe000ed00

000019b8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    19b8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    19bc:	4b02      	ldr	r3, [pc, #8]	; (19c8 <arm_core_mpu_disable+0x10>)
    19be:	2200      	movs	r2, #0
    19c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    19c4:	4770      	bx	lr
    19c6:	bf00      	nop
    19c8:	e000ed00 	.word	0xe000ed00

000019cc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    19cc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    19ce:	4b0e      	ldr	r3, [pc, #56]	; (1a08 <z_arm_mpu_init+0x3c>)
    19d0:	681d      	ldr	r5, [r3, #0]
    19d2:	2d08      	cmp	r5, #8
    19d4:	d815      	bhi.n	1a02 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    19d6:	f7ff ffef 	bl	19b8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    19da:	2400      	movs	r4, #0
    19dc:	e009      	b.n	19f2 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    19de:	4b0a      	ldr	r3, [pc, #40]	; (1a08 <z_arm_mpu_init+0x3c>)
    19e0:	6859      	ldr	r1, [r3, #4]
    19e2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    19e6:	0093      	lsls	r3, r2, #2
    19e8:	4419      	add	r1, r3
    19ea:	4620      	mov	r0, r4
    19ec:	f7ff ffa0 	bl	1930 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    19f0:	3401      	adds	r4, #1
    19f2:	42a5      	cmp	r5, r4
    19f4:	d8f3      	bhi.n	19de <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <z_arm_mpu_init+0x40>)
    19f8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    19fa:	f7ff ffd1 	bl	19a0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    19fe:	2000      	movs	r0, #0
}
    1a00:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a06:	e7fb      	b.n	1a00 <z_arm_mpu_init+0x34>
    1a08:	00004e40 	.word	0x00004e40
    1a0c:	20000884 	.word	0x20000884

00001a10 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1a10:	f04f 0220 	mov.w	r2, #32
    1a14:	f3ef 8311 	mrs	r3, BASEPRI
    1a18:	f382 8812 	msr	BASEPRI_MAX, r2
    1a1c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1a20:	4a04      	ldr	r2, [pc, #16]	; (1a34 <nordicsemi_nrf52_init+0x24>)
    1a22:	2101      	movs	r1, #1
    1a24:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1a28:	f383 8811 	msr	BASEPRI, r3
    1a2c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1a30:	2000      	movs	r0, #0
    1a32:	4770      	bx	lr
    1a34:	4001e000 	.word	0x4001e000

00001a38 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    1a38:	b2c0      	uxtb	r0, r0
    1a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1a3e:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1a42:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1a46:	4905      	ldr	r1, [pc, #20]	; (1a5c <sys_arch_reboot+0x24>)
    1a48:	68ca      	ldr	r2, [r1, #12]
    1a4a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1a4e:	4b04      	ldr	r3, [pc, #16]	; (1a60 <sys_arch_reboot+0x28>)
    1a50:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1a52:	60cb      	str	r3, [r1, #12]
    1a54:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1a58:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1a5a:	e7fd      	b.n	1a58 <sys_arch_reboot+0x20>
    1a5c:	e000ed00 	.word	0xe000ed00
    1a60:	05fa0004 	.word	0x05fa0004

00001a64 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1a64:	b130      	cbz	r0, 1a74 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    1a66:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1a68:	0180      	lsls	r0, r0, #6
    1a6a:	4b03      	ldr	r3, [pc, #12]	; (1a78 <arch_busy_wait+0x14>)
    1a6c:	f043 0301 	orr.w	r3, r3, #1
    1a70:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1a72:	bd08      	pop	{r3, pc}
    1a74:	4770      	bx	lr
    1a76:	bf00      	nop
    1a78:	00004d30 	.word	0x00004d30

00001a7c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1a7c:	4800      	ldr	r0, [pc, #0]	; (1a80 <get_hf_flags+0x4>)
    1a7e:	4770      	bx	lr
    1a80:	20000804 	.word	0x20000804

00001a84 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1a84:	4b03      	ldr	r3, [pc, #12]	; (1a94 <get_subsys+0x10>)
    1a86:	1ac0      	subs	r0, r0, r3
    1a88:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1a8a:	4b03      	ldr	r3, [pc, #12]	; (1a98 <get_subsys+0x14>)
    1a8c:	fb03 f000 	mul.w	r0, r3, r0
    1a90:	4770      	bx	lr
    1a92:	bf00      	nop
    1a94:	200007c4 	.word	0x200007c4
    1a98:	b6db6db7 	.word	0xb6db6db7

00001a9c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1a9c:	b538      	push	{r3, r4, r5, lr}
    1a9e:	4605      	mov	r5, r0
    1aa0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1aa2:	f7ff ffef 	bl	1a84 <get_subsys>
    1aa6:	4601      	mov	r1, r0
    1aa8:	2240      	movs	r2, #64	; 0x40
    1aaa:	4803      	ldr	r0, [pc, #12]	; (1ab8 <onoff_stop+0x1c>)
    1aac:	f002 fc56 	bl	435c <stop>
    1ab0:	4601      	mov	r1, r0
	notify(mgr, res);
    1ab2:	4628      	mov	r0, r5
    1ab4:	47a0      	blx	r4
}
    1ab6:	bd38      	pop	{r3, r4, r5, pc}
    1ab8:	00004b54 	.word	0x00004b54

00001abc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1abc:	b530      	push	{r4, r5, lr}
    1abe:	b083      	sub	sp, #12
    1ac0:	4605      	mov	r5, r0
    1ac2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ac4:	f7ff ffde 	bl	1a84 <get_subsys>
    1ac8:	4601      	mov	r1, r0
    1aca:	2340      	movs	r3, #64	; 0x40
    1acc:	9300      	str	r3, [sp, #0]
    1ace:	4623      	mov	r3, r4
    1ad0:	4a05      	ldr	r2, [pc, #20]	; (1ae8 <onoff_start+0x2c>)
    1ad2:	4806      	ldr	r0, [pc, #24]	; (1aec <onoff_start+0x30>)
    1ad4:	f002 fc5c 	bl	4390 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1ad8:	1e01      	subs	r1, r0, #0
    1ada:	db01      	blt.n	1ae0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1adc:	b003      	add	sp, #12
    1ade:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1ae0:	4628      	mov	r0, r5
    1ae2:	47a0      	blx	r4
}
    1ae4:	e7fa      	b.n	1adc <onoff_start+0x20>
    1ae6:	bf00      	nop
    1ae8:	000043d9 	.word	0x000043d9
    1aec:	00004b54 	.word	0x00004b54

00001af0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1af0:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1af2:	b110      	cbz	r0, 1afa <clock_event_handler+0xa>
    1af4:	2801      	cmp	r0, #1
    1af6:	d00d      	beq.n	1b14 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1af8:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1afa:	2100      	movs	r1, #0
    1afc:	4808      	ldr	r0, [pc, #32]	; (1b20 <clock_event_handler+0x30>)
    1afe:	f002 fbb8 	bl	4272 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1b02:	6883      	ldr	r3, [r0, #8]
    1b04:	f013 0f07 	tst.w	r3, #7
    1b08:	d1f6      	bne.n	1af8 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1b0a:	2100      	movs	r1, #0
    1b0c:	4804      	ldr	r0, [pc, #16]	; (1b20 <clock_event_handler+0x30>)
    1b0e:	f002 fc13 	bl	4338 <clkstarted_handle>
    1b12:	e7f1      	b.n	1af8 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1b14:	2101      	movs	r1, #1
    1b16:	4802      	ldr	r0, [pc, #8]	; (1b20 <clock_event_handler+0x30>)
    1b18:	f002 fc0e 	bl	4338 <clkstarted_handle>
}
    1b1c:	e7ec      	b.n	1af8 <clock_event_handler+0x8>
    1b1e:	bf00      	nop
    1b20:	00004b54 	.word	0x00004b54

00001b24 <generic_hfclk_start>:
{
    1b24:	b510      	push	{r4, lr}
	__asm__ volatile(
    1b26:	f04f 0320 	mov.w	r3, #32
    1b2a:	f3ef 8411 	mrs	r4, BASEPRI
    1b2e:	f383 8812 	msr	BASEPRI_MAX, r3
    1b32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1b36:	4a13      	ldr	r2, [pc, #76]	; (1b84 <generic_hfclk_start+0x60>)
    1b38:	6813      	ldr	r3, [r2, #0]
    1b3a:	f043 0302 	orr.w	r3, r3, #2
    1b3e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1b40:	f013 0f01 	tst.w	r3, #1
    1b44:	d108      	bne.n	1b58 <generic_hfclk_start+0x34>
	bool already_started = false;
    1b46:	2300      	movs	r3, #0
	__asm__ volatile(
    1b48:	f384 8811 	msr	BASEPRI, r4
    1b4c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1b50:	b99b      	cbnz	r3, 1b7a <generic_hfclk_start+0x56>
	hfclk_start();
    1b52:	f002 fc49 	bl	43e8 <hfclk_start>
}
    1b56:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b5c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1b60:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1b64:	f012 0f01 	tst.w	r2, #1
    1b68:	d101      	bne.n	1b6e <generic_hfclk_start+0x4a>
	bool already_started = false;
    1b6a:	2300      	movs	r3, #0
    1b6c:	e7ec      	b.n	1b48 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1b6e:	f7ff ff85 	bl	1a7c <get_hf_flags>
    1b72:	f002 fbce 	bl	4312 <set_on_state>
			already_started = true;
    1b76:	2301      	movs	r3, #1
    1b78:	e7e6      	b.n	1b48 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1b7a:	2100      	movs	r1, #0
    1b7c:	4802      	ldr	r0, [pc, #8]	; (1b88 <generic_hfclk_start+0x64>)
    1b7e:	f002 fbdb 	bl	4338 <clkstarted_handle>
		return;
    1b82:	e7e8      	b.n	1b56 <generic_hfclk_start+0x32>
    1b84:	20000814 	.word	0x20000814
    1b88:	00004b54 	.word	0x00004b54

00001b8c <generic_hfclk_stop>:
{
    1b8c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b8e:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <generic_hfclk_stop+0x2c>)
    1b90:	f3bf 8f5b 	dmb	ish
    1b94:	e853 2f00 	ldrex	r2, [r3]
    1b98:	f022 0102 	bic.w	r1, r2, #2
    1b9c:	e843 1000 	strex	r0, r1, [r3]
    1ba0:	2800      	cmp	r0, #0
    1ba2:	d1f7      	bne.n	1b94 <generic_hfclk_stop+0x8>
    1ba4:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1ba8:	f012 0f01 	tst.w	r2, #1
    1bac:	d000      	beq.n	1bb0 <generic_hfclk_stop+0x24>
}
    1bae:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1bb0:	f002 fc24 	bl	43fc <hfclk_stop>
    1bb4:	e7fb      	b.n	1bae <generic_hfclk_stop+0x22>
    1bb6:	bf00      	nop
    1bb8:	20000814 	.word	0x20000814

00001bbc <api_blocking_start>:
{
    1bbc:	b500      	push	{lr}
    1bbe:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1bc0:	f8cd d000 	str.w	sp, [sp]
    1bc4:	f8cd d004 	str.w	sp, [sp, #4]
    1bc8:	2300      	movs	r3, #0
    1bca:	9302      	str	r3, [sp, #8]
    1bcc:	2301      	movs	r3, #1
    1bce:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1bd0:	466b      	mov	r3, sp
    1bd2:	4a07      	ldr	r2, [pc, #28]	; (1bf0 <api_blocking_start+0x34>)
    1bd4:	f002 fbf8 	bl	43c8 <api_start>
	if (err < 0) {
    1bd8:	2800      	cmp	r0, #0
    1bda:	db05      	blt.n	1be8 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1bdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1be0:	2300      	movs	r3, #0
    1be2:	4668      	mov	r0, sp
    1be4:	f001 f80c 	bl	2c00 <z_impl_k_sem_take>
}
    1be8:	b005      	add	sp, #20
    1bea:	f85d fb04 	ldr.w	pc, [sp], #4
    1bee:	bf00      	nop
    1bf0:	00004411 	.word	0x00004411

00001bf4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1bf8:	2200      	movs	r2, #0
    1bfa:	2101      	movs	r1, #1
    1bfc:	4610      	mov	r0, r2
    1bfe:	f7ff fba7 	bl	1350 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1c02:	2000      	movs	r0, #0
    1c04:	f7ff fb88 	bl	1318 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1c08:	4811      	ldr	r0, [pc, #68]	; (1c50 <clk_init+0x5c>)
    1c0a:	f000 fc03 	bl	2414 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1c0e:	4b11      	ldr	r3, [pc, #68]	; (1c54 <clk_init+0x60>)
    1c10:	4298      	cmp	r0, r3
    1c12:	d119      	bne.n	1c48 <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1c14:	f002 fd0a 	bl	462c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1c18:	2400      	movs	r4, #0
    1c1a:	2c01      	cmp	r4, #1
    1c1c:	d812      	bhi.n	1c44 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1c1e:	4621      	mov	r1, r4
    1c20:	4630      	mov	r0, r6
    1c22:	f002 fb26 	bl	4272 <get_sub_data>
    1c26:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1c28:	4621      	mov	r1, r4
    1c2a:	4630      	mov	r0, r6
    1c2c:	f002 fb2c 	bl	4288 <get_onoff_manager>
    1c30:	4909      	ldr	r1, [pc, #36]	; (1c58 <clk_init+0x64>)
    1c32:	f002 f8ba 	bl	3daa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1c36:	2800      	cmp	r0, #0
    1c38:	db05      	blt.n	1c46 <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c3a:	2301      	movs	r3, #1
    1c3c:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1c3e:	441c      	add	r4, r3
    1c40:	b2e4      	uxtb	r4, r4
    1c42:	e7ea      	b.n	1c1a <clk_init+0x26>
	}

	return 0;
    1c44:	2000      	movs	r0, #0
}
    1c46:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1c48:	f06f 0004 	mvn.w	r0, #4
    1c4c:	e7fb      	b.n	1c46 <clk_init+0x52>
    1c4e:	bf00      	nop
    1c50:	00001af1 	.word	0x00001af1
    1c54:	0bad0000 	.word	0x0bad0000
    1c58:	00004e90 	.word	0x00004e90

00001c5c <lfclk_spinwait>:
{
    1c5c:	b570      	push	{r4, r5, r6, lr}
    1c5e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1c60:	2801      	cmp	r0, #1
    1c62:	d107      	bne.n	1c74 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c68:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1c6c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1c70:	2b01      	cmp	r3, #1
    1c72:	d05a      	beq.n	1d2a <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1c74:	f002 fd95 	bl	47a2 <k_is_in_isr>
    1c78:	b928      	cbnz	r0, 1c86 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    1c7a:	4b2f      	ldr	r3, [pc, #188]	; (1d38 <lfclk_spinwait+0xdc>)
    1c7c:	781b      	ldrb	r3, [r3, #0]
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d043      	beq.n	1d0a <lfclk_spinwait+0xae>
    1c82:	2300      	movs	r3, #0
    1c84:	e000      	b.n	1c88 <lfclk_spinwait+0x2c>
    1c86:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    1c88:	461c      	mov	r4, r3
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d03f      	beq.n	1d0e <lfclk_spinwait+0xb2>
	__asm__ volatile(
    1c8e:	f04f 0320 	mov.w	r3, #32
    1c92:	f3ef 8611 	mrs	r6, BASEPRI
    1c96:	f383 8812 	msr	BASEPRI_MAX, r3
    1c9a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    1c9e:	b924      	cbnz	r4, 1caa <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    1ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ca4:	2202      	movs	r2, #2
    1ca6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1caa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1cae:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1cb2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1cb6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1cba:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    1cbe:	d12d      	bne.n	1d1c <lfclk_spinwait+0xc0>
    return false;
    1cc0:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1cc2:	b11a      	cbz	r2, 1ccc <lfclk_spinwait+0x70>
    1cc4:	2b01      	cmp	r3, #1
    1cc6:	d02b      	beq.n	1d20 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1cc8:	2d01      	cmp	r5, #1
    1cca:	d029      	beq.n	1d20 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1ccc:	b30c      	cbz	r4, 1d12 <lfclk_spinwait+0xb6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1cce:	4630      	mov	r0, r6
    1cd0:	f7ff fb18 	bl	1304 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cd8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d1e4      	bne.n	1caa <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ce4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d0de      	beq.n	1caa <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cf0:	2200      	movs	r2, #0
    1cf2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1cf6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1cfa:	2201      	movs	r2, #1
    1cfc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d00:	490e      	ldr	r1, [pc, #56]	; (1d3c <lfclk_spinwait+0xe0>)
    1d02:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d06:	609a      	str	r2, [r3, #8]
}
    1d08:	e7cf      	b.n	1caa <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1d0a:	2301      	movs	r3, #1
    1d0c:	e7bc      	b.n	1c88 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    1d0e:	2600      	movs	r6, #0
    1d10:	e7c5      	b.n	1c9e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    1d12:	2021      	movs	r0, #33	; 0x21
    1d14:	2100      	movs	r1, #0
    1d16:	f001 fb31 	bl	337c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1d1a:	e7db      	b.n	1cd4 <lfclk_spinwait+0x78>
                return true;
    1d1c:	2201      	movs	r2, #1
    1d1e:	e7d0      	b.n	1cc2 <lfclk_spinwait+0x66>
	if (isr_mode) {
    1d20:	b124      	cbz	r4, 1d2c <lfclk_spinwait+0xd0>
	__asm__ volatile(
    1d22:	f386 8811 	msr	BASEPRI, r6
    1d26:	f3bf 8f6f 	isb	sy
}
    1d2a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    1d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d30:	2202      	movs	r2, #2
    1d32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1d36:	e7f8      	b.n	1d2a <lfclk_spinwait+0xce>
    1d38:	20000885 	.word	0x20000885
    1d3c:	e000e100 	.word	0xe000e100

00001d40 <z_nrf_clock_control_lf_on>:
{
    1d40:	b510      	push	{r4, lr}
    1d42:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1d44:	4b10      	ldr	r3, [pc, #64]	; (1d88 <z_nrf_clock_control_lf_on+0x48>)
    1d46:	2101      	movs	r1, #1
    1d48:	f3bf 8f5b 	dmb	ish
    1d4c:	e853 2f00 	ldrex	r2, [r3]
    1d50:	e843 1000 	strex	r0, r1, [r3]
    1d54:	2800      	cmp	r0, #0
    1d56:	d1f9      	bne.n	1d4c <z_nrf_clock_control_lf_on+0xc>
    1d58:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1d5c:	b11a      	cbz	r2, 1d66 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    1d5e:	1e63      	subs	r3, r4, #1
    1d60:	2b01      	cmp	r3, #1
    1d62:	d90d      	bls.n	1d80 <z_nrf_clock_control_lf_on+0x40>
}
    1d64:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1d66:	4809      	ldr	r0, [pc, #36]	; (1d8c <z_nrf_clock_control_lf_on+0x4c>)
    1d68:	f002 fa8e 	bl	4288 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1d6c:	4908      	ldr	r1, [pc, #32]	; (1d90 <z_nrf_clock_control_lf_on+0x50>)
    1d6e:	2300      	movs	r3, #0
    1d70:	604b      	str	r3, [r1, #4]
    1d72:	608b      	str	r3, [r1, #8]
    1d74:	60cb      	str	r3, [r1, #12]
    1d76:	2301      	movs	r3, #1
    1d78:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1d7a:	f002 f833 	bl	3de4 <onoff_request>
    1d7e:	e7ee      	b.n	1d5e <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    1d80:	4620      	mov	r0, r4
    1d82:	f7ff ff6b 	bl	1c5c <lfclk_spinwait>
		break;
    1d86:	e7ed      	b.n	1d64 <z_nrf_clock_control_lf_on+0x24>
    1d88:	20000818 	.word	0x20000818
    1d8c:	00004b54 	.word	0x00004b54
    1d90:	200007b4 	.word	0x200007b4

00001d94 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1d94:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1d98:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    1d9c:	4b01      	ldr	r3, [pc, #4]	; (1da4 <set_comparator+0x10>)
    1d9e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    1da2:	4770      	bx	lr
    1da4:	40011000 	.word	0x40011000

00001da8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    1da8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    1dac:	4b01      	ldr	r3, [pc, #4]	; (1db4 <get_comparator+0xc>)
    1dae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    1db2:	4770      	bx	lr
    1db4:	40011000 	.word	0x40011000

00001db8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1dbc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1dbe:	4a02      	ldr	r2, [pc, #8]	; (1dc8 <event_enable+0x10>)
    1dc0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    1dc4:	4770      	bx	lr
    1dc6:	bf00      	nop
    1dc8:	40011000 	.word	0x40011000

00001dcc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1dd0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1dd2:	4a02      	ldr	r2, [pc, #8]	; (1ddc <event_disable+0x10>)
    1dd4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    1dd8:	4770      	bx	lr
    1dda:	bf00      	nop
    1ddc:	40011000 	.word	0x40011000

00001de0 <counter>:
     return p_reg->COUNTER;
    1de0:	4b01      	ldr	r3, [pc, #4]	; (1de8 <counter+0x8>)
    1de2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    1de6:	4770      	bx	lr
    1de8:	40011000 	.word	0x40011000

00001dec <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    1dec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    1dee:	2301      	movs	r3, #1
    1df0:	4083      	lsls	r3, r0
    1df2:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1df6:	4a10      	ldr	r2, [pc, #64]	; (1e38 <compare_int_lock+0x4c>)
    1df8:	f3bf 8f5b 	dmb	ish
    1dfc:	e852 1f00 	ldrex	r1, [r2]
    1e00:	ea01 0e0c 	and.w	lr, r1, ip
    1e04:	e842 e400 	strex	r4, lr, [r2]
    1e08:	2c00      	cmp	r4, #0
    1e0a:	d1f7      	bne.n	1dfc <compare_int_lock+0x10>
    1e0c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1e10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1e14:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    1e18:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1e1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    1e20:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    1e24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e28:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    1e2c:	420b      	tst	r3, r1
}
    1e2e:	bf14      	ite	ne
    1e30:	2001      	movne	r0, #1
    1e32:	2000      	moveq	r0, #0
    1e34:	bd10      	pop	{r4, pc}
    1e36:	bf00      	nop
    1e38:	20000820 	.word	0x20000820

00001e3c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    1e3c:	b570      	push	{r4, r5, r6, lr}
    1e3e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    1e40:	f002 faff 	bl	4442 <full_int_lock>
    1e44:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    1e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e4a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    1e4c:	4a17      	ldr	r2, [pc, #92]	; (1eac <channel_processing_check_and_clear+0x70>)
    1e4e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    1e52:	4213      	tst	r3, r2
    1e54:	d105      	bne.n	1e62 <channel_processing_check_and_clear+0x26>
	bool result = false;
    1e56:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    1e58:	4628      	mov	r0, r5
    1e5a:	f002 fafb 	bl	4454 <full_int_unlock>

	return result;
}
    1e5e:	4630      	mov	r0, r6
    1e60:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    1e62:	2301      	movs	r3, #1
    1e64:	40a3      	lsls	r3, r4
    1e66:	43db      	mvns	r3, r3
    1e68:	4a11      	ldr	r2, [pc, #68]	; (1eb0 <channel_processing_check_and_clear+0x74>)
    1e6a:	f3bf 8f5b 	dmb	ish
    1e6e:	e852 1f00 	ldrex	r1, [r2]
    1e72:	ea01 0003 	and.w	r0, r1, r3
    1e76:	e842 0600 	strex	r6, r0, [r2]
    1e7a:	2e00      	cmp	r6, #0
    1e7c:	d1f7      	bne.n	1e6e <channel_processing_check_and_clear+0x32>
    1e7e:	f3bf 8f5b 	dmb	ish
    1e82:	b959      	cbnz	r1, 1e9c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    1e84:	f104 0350 	add.w	r3, r4, #80	; 0x50
    1e88:	009b      	lsls	r3, r3, #2
    1e8a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1e90:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    1e94:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    1e96:	b113      	cbz	r3, 1e9e <channel_processing_check_and_clear+0x62>
    1e98:	2301      	movs	r3, #1
    1e9a:	e000      	b.n	1e9e <channel_processing_check_and_clear+0x62>
    1e9c:	2301      	movs	r3, #1
		if (result) {
    1e9e:	461e      	mov	r6, r3
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d0d9      	beq.n	1e58 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    1ea4:	4620      	mov	r0, r4
    1ea6:	f002 fabd 	bl	4424 <event_clear>
    1eaa:	e7d5      	b.n	1e58 <channel_processing_check_and_clear+0x1c>
    1eac:	40011000 	.word	0x40011000
    1eb0:	2000081c 	.word	0x2000081c

00001eb4 <compare_int_unlock>:
	if (key) {
    1eb4:	b901      	cbnz	r1, 1eb8 <compare_int_unlock+0x4>
}
    1eb6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    1eb8:	2301      	movs	r3, #1
    1eba:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1ebc:	4a11      	ldr	r2, [pc, #68]	; (1f04 <compare_int_unlock+0x50>)
    1ebe:	f3bf 8f5b 	dmb	ish
    1ec2:	e852 1f00 	ldrex	r1, [r2]
    1ec6:	4319      	orrs	r1, r3
    1ec8:	e842 1c00 	strex	ip, r1, [r2]
    1ecc:	f1bc 0f00 	cmp.w	ip, #0
    1ed0:	d1f7      	bne.n	1ec2 <compare_int_unlock+0xe>
    1ed2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1eda:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    1edc:	4a0a      	ldr	r2, [pc, #40]	; (1f08 <compare_int_unlock+0x54>)
    1ede:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1ee2:	f3bf 8f5b 	dmb	ish
    1ee6:	4b09      	ldr	r3, [pc, #36]	; (1f0c <compare_int_unlock+0x58>)
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    1eee:	fa23 f000 	lsr.w	r0, r3, r0
    1ef2:	f010 0f01 	tst.w	r0, #1
    1ef6:	d0de      	beq.n	1eb6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ef8:	4b05      	ldr	r3, [pc, #20]	; (1f10 <compare_int_unlock+0x5c>)
    1efa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1efe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    1f02:	e7d8      	b.n	1eb6 <compare_int_unlock+0x2>
    1f04:	20000820 	.word	0x20000820
    1f08:	40011000 	.word	0x40011000
    1f0c:	2000081c 	.word	0x2000081c
    1f10:	e000e100 	.word	0xe000e100

00001f14 <sys_clock_timeout_handler>:
{
    1f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f18:	4607      	mov	r7, r0
    1f1a:	4614      	mov	r4, r2
    1f1c:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    1f1e:	4610      	mov	r0, r2
    1f20:	4619      	mov	r1, r3
    1f22:	f002 fa8b 	bl	443c <absolute_time_to_cc>
    1f26:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    1f28:	4b15      	ldr	r3, [pc, #84]	; (1f80 <sys_clock_timeout_handler+0x6c>)
    1f2a:	681a      	ldr	r2, [r3, #0]
    1f2c:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    1f2e:	601c      	str	r4, [r3, #0]
    1f30:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    1f32:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    1f36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    1f3a:	d309      	bcc.n	1f50 <sys_clock_timeout_handler+0x3c>
	return false;
    1f3c:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    1f3e:	f001 fb67 	bl	3610 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    1f42:	4638      	mov	r0, r7
    1f44:	f7ff ff30 	bl	1da8 <get_comparator>
    1f48:	42a8      	cmp	r0, r5
    1f4a:	d00e      	beq.n	1f6a <sys_clock_timeout_handler+0x56>
}
    1f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    1f50:	4b0c      	ldr	r3, [pc, #48]	; (1f84 <sys_clock_timeout_handler+0x70>)
    1f52:	681b      	ldr	r3, [r3, #0]
    1f54:	0a1a      	lsrs	r2, r3, #8
    1f56:	061b      	lsls	r3, r3, #24
    1f58:	eb15 0803 	adds.w	r8, r5, r3
    1f5c:	f142 0900 	adc.w	r9, r2, #0
    1f60:	4b09      	ldr	r3, [pc, #36]	; (1f88 <sys_clock_timeout_handler+0x74>)
    1f62:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    1f66:	2401      	movs	r4, #1
    1f68:	e7e9      	b.n	1f3e <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    1f6a:	b11c      	cbz	r4, 1f74 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    1f6c:	4638      	mov	r0, r7
    1f6e:	f7ff ff23 	bl	1db8 <event_enable>
}
    1f72:	e7eb      	b.n	1f4c <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    1f74:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    1f78:	4638      	mov	r0, r7
    1f7a:	f7ff ff0b 	bl	1d94 <set_comparator>
    1f7e:	e7f5      	b.n	1f6c <sys_clock_timeout_handler+0x58>
    1f80:	20000100 	.word	0x20000100
    1f84:	20000824 	.word	0x20000824
    1f88:	200000e8 	.word	0x200000e8

00001f8c <z_nrf_rtc_timer_read>:
{
    1f8c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    1f8e:	4b0d      	ldr	r3, [pc, #52]	; (1fc4 <z_nrf_rtc_timer_read+0x38>)
    1f90:	681c      	ldr	r4, [r3, #0]
    1f92:	0a25      	lsrs	r5, r4, #8
    1f94:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    1f96:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    1f9a:	f7ff ff21 	bl	1de0 <counter>
    1f9e:	4603      	mov	r3, r0
	val += cntr;
    1fa0:	1900      	adds	r0, r0, r4
    1fa2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    1fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1faa:	d20a      	bcs.n	1fc2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    1fac:	4b06      	ldr	r3, [pc, #24]	; (1fc8 <z_nrf_rtc_timer_read+0x3c>)
    1fae:	e9d3 2300 	ldrd	r2, r3, [r3]
    1fb2:	4290      	cmp	r0, r2
    1fb4:	eb71 0303 	sbcs.w	r3, r1, r3
    1fb8:	d203      	bcs.n	1fc2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    1fba:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    1fbe:	f141 0100 	adc.w	r1, r1, #0
}
    1fc2:	bd38      	pop	{r3, r4, r5, pc}
    1fc4:	20000824 	.word	0x20000824
    1fc8:	200000e8 	.word	0x200000e8

00001fcc <compare_set_nolocks>:
{
    1fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fce:	4606      	mov	r6, r0
    1fd0:	4614      	mov	r4, r2
    1fd2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    1fd4:	4610      	mov	r0, r2
    1fd6:	4619      	mov	r1, r3
    1fd8:	f002 fa30 	bl	443c <absolute_time_to_cc>
    1fdc:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    1fde:	f7ff ffd5 	bl	1f8c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    1fe2:	42a0      	cmp	r0, r4
    1fe4:	eb71 0305 	sbcs.w	r3, r1, r5
    1fe8:	d21d      	bcs.n	2026 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    1fea:	1a23      	subs	r3, r4, r0
    1fec:	eb65 0101 	sbc.w	r1, r5, r1
    1ff0:	4a1b      	ldr	r2, [pc, #108]	; (2060 <compare_set_nolocks+0x94>)
    1ff2:	4293      	cmp	r3, r2
    1ff4:	f171 0300 	sbcs.w	r3, r1, #0
    1ff8:	d22f      	bcs.n	205a <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    1ffa:	4b1a      	ldr	r3, [pc, #104]	; (2064 <compare_set_nolocks+0x98>)
    1ffc:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2000:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2004:	42ab      	cmp	r3, r5
    2006:	bf08      	it	eq
    2008:	42a2      	cmpeq	r2, r4
    200a:	d01a      	beq.n	2042 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    200c:	4639      	mov	r1, r7
    200e:	4630      	mov	r0, r6
    2010:	f002 fa25 	bl	445e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2014:	4639      	mov	r1, r7
    2016:	f002 fa01 	bl	441c <counter_sub>
    201a:	1900      	adds	r0, r0, r4
    201c:	f145 0300 	adc.w	r3, r5, #0
    2020:	4604      	mov	r4, r0
    2022:	461d      	mov	r5, r3
    2024:	e00d      	b.n	2042 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    2026:	2301      	movs	r3, #1
    2028:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    202a:	4a0f      	ldr	r2, [pc, #60]	; (2068 <compare_set_nolocks+0x9c>)
    202c:	f3bf 8f5b 	dmb	ish
    2030:	e852 1f00 	ldrex	r1, [r2]
    2034:	4319      	orrs	r1, r3
    2036:	e842 1000 	strex	r0, r1, [r2]
    203a:	2800      	cmp	r0, #0
    203c:	d1f8      	bne.n	2030 <compare_set_nolocks+0x64>
    203e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2042:	4b08      	ldr	r3, [pc, #32]	; (2064 <compare_set_nolocks+0x98>)
    2044:	0132      	lsls	r2, r6, #4
    2046:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    204a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    204e:	9906      	ldr	r1, [sp, #24]
    2050:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2052:	9b07      	ldr	r3, [sp, #28]
    2054:	6073      	str	r3, [r6, #4]
	return ret;
    2056:	2000      	movs	r0, #0
}
    2058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    205a:	f06f 0015 	mvn.w	r0, #21
    205e:	e7fb      	b.n	2058 <compare_set_nolocks+0x8c>
    2060:	01000001 	.word	0x01000001
    2064:	200000f0 	.word	0x200000f0
    2068:	2000081c 	.word	0x2000081c

0000206c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    206c:	b530      	push	{r4, r5, lr}
    206e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2070:	2300      	movs	r3, #0
    2072:	4a1d      	ldr	r2, [pc, #116]	; (20e8 <sys_clock_driver_init+0x7c>)
    2074:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2078:	2b00      	cmp	r3, #0
    207a:	dd24      	ble.n	20c6 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    207c:	4c1a      	ldr	r4, [pc, #104]	; (20e8 <sys_clock_driver_init+0x7c>)
    207e:	2502      	movs	r5, #2
    2080:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2084:	4b19      	ldr	r3, [pc, #100]	; (20ec <sys_clock_driver_init+0x80>)
    2086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    208a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    208e:	2200      	movs	r2, #0
    2090:	2101      	movs	r1, #1
    2092:	2011      	movs	r0, #17
    2094:	f7ff f95c 	bl	1350 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2098:	2011      	movs	r0, #17
    209a:	f7ff f93d 	bl	1318 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    209e:	2301      	movs	r3, #1
    20a0:	60a3      	str	r3, [r4, #8]
    20a2:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    20a4:	4a12      	ldr	r2, [pc, #72]	; (20f0 <sys_clock_driver_init+0x84>)
    20a6:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    20a8:	2400      	movs	r4, #0
    20aa:	9401      	str	r4, [sp, #4]
    20ac:	4b11      	ldr	r3, [pc, #68]	; (20f4 <sys_clock_driver_init+0x88>)
    20ae:	9300      	str	r3, [sp, #0]
    20b0:	4a11      	ldr	r2, [pc, #68]	; (20f8 <sys_clock_driver_init+0x8c>)
    20b2:	2300      	movs	r3, #0
    20b4:	4620      	mov	r0, r4
    20b6:	f002 fa0d 	bl	44d4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    20ba:	4628      	mov	r0, r5
    20bc:	f7ff fe40 	bl	1d40 <z_nrf_clock_control_lf_on>

	return 0;
}
    20c0:	4620      	mov	r0, r4
    20c2:	b003      	add	sp, #12
    20c4:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    20c6:	4a0d      	ldr	r2, [pc, #52]	; (20fc <sys_clock_driver_init+0x90>)
    20c8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    20cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    20d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    20d4:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    20d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    20dc:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    20de:	4902      	ldr	r1, [pc, #8]	; (20e8 <sys_clock_driver_init+0x7c>)
    20e0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    20e4:	3301      	adds	r3, #1
    20e6:	e7c7      	b.n	2078 <sys_clock_driver_init+0xc>
    20e8:	40011000 	.word	0x40011000
    20ec:	e000e100 	.word	0xe000e100
    20f0:	20000820 	.word	0x20000820
    20f4:	00001f15 	.word	0x00001f15
    20f8:	007fffff 	.word	0x007fffff
    20fc:	200000f0 	.word	0x200000f0

00002100 <process_channel>:
{
    2100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2104:	b082      	sub	sp, #8
    2106:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2108:	f7ff fe98 	bl	1e3c <channel_processing_check_and_clear>
    210c:	b910      	cbnz	r0, 2114 <process_channel+0x14>
}
    210e:	b002      	add	sp, #8
    2110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2114:	f7ff ff3a 	bl	1f8c <z_nrf_rtc_timer_read>
    2118:	4682      	mov	sl, r0
    211a:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    211c:	f002 f991 	bl	4442 <full_int_lock>
    2120:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    2122:	4b13      	ldr	r3, [pc, #76]	; (2170 <process_channel+0x70>)
    2124:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2128:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    212c:	45c2      	cmp	sl, r8
    212e:	eb76 0309 	sbcs.w	r3, r6, r9
    2132:	d20b      	bcs.n	214c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2134:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    2136:	4628      	mov	r0, r5
    2138:	f002 f98c 	bl	4454 <full_int_unlock>
		if (handler) {
    213c:	2e00      	cmp	r6, #0
    213e:	d0e6      	beq.n	210e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2140:	9700      	str	r7, [sp, #0]
    2142:	4642      	mov	r2, r8
    2144:	464b      	mov	r3, r9
    2146:	4620      	mov	r0, r4
    2148:	47b0      	blx	r6
}
    214a:	e7e0      	b.n	210e <process_channel+0xe>
			handler = cc_data[chan].callback;
    214c:	4a08      	ldr	r2, [pc, #32]	; (2170 <process_channel+0x70>)
    214e:	0123      	lsls	r3, r4, #4
    2150:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2154:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    2156:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2158:	2000      	movs	r0, #0
    215a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    215c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2164:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2168:	4620      	mov	r0, r4
    216a:	f7ff fe2f 	bl	1dcc <event_disable>
    216e:	e7e2      	b.n	2136 <process_channel+0x36>
    2170:	200000f0 	.word	0x200000f0

00002174 <rtc_nrf_isr>:
{
    2174:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2176:	4b0e      	ldr	r3, [pc, #56]	; (21b0 <rtc_nrf_isr+0x3c>)
    2178:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    217c:	f013 0f02 	tst.w	r3, #2
    2180:	d00d      	beq.n	219e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2182:	4b0b      	ldr	r3, [pc, #44]	; (21b0 <rtc_nrf_isr+0x3c>)
    2184:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2188:	b14b      	cbz	r3, 219e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    218a:	4b09      	ldr	r3, [pc, #36]	; (21b0 <rtc_nrf_isr+0x3c>)
    218c:	2200      	movs	r2, #0
    218e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2192:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    2196:	4a07      	ldr	r2, [pc, #28]	; (21b4 <rtc_nrf_isr+0x40>)
    2198:	6813      	ldr	r3, [r2, #0]
    219a:	3301      	adds	r3, #1
    219c:	6013      	str	r3, [r2, #0]
{
    219e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    21a0:	2c00      	cmp	r4, #0
    21a2:	dd00      	ble.n	21a6 <rtc_nrf_isr+0x32>
}
    21a4:	bd10      	pop	{r4, pc}
		process_channel(chan);
    21a6:	4620      	mov	r0, r4
    21a8:	f7ff ffaa 	bl	2100 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    21ac:	3401      	adds	r4, #1
    21ae:	e7f7      	b.n	21a0 <rtc_nrf_isr+0x2c>
    21b0:	40011000 	.word	0x40011000
    21b4:	20000824 	.word	0x20000824

000021b8 <sys_clock_set_timeout>:
{
    21b8:	b510      	push	{r4, lr}
    21ba:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    21bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    21c0:	d007      	beq.n	21d2 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    21c2:	1e44      	subs	r4, r0, #1
    21c4:	2c00      	cmp	r4, #0
    21c6:	dd07      	ble.n	21d8 <sys_clock_set_timeout+0x20>
    21c8:	4b11      	ldr	r3, [pc, #68]	; (2210 <sys_clock_set_timeout+0x58>)
    21ca:	429c      	cmp	r4, r3
    21cc:	dd05      	ble.n	21da <sys_clock_set_timeout+0x22>
    21ce:	4c11      	ldr	r4, [pc, #68]	; (2214 <sys_clock_set_timeout+0x5c>)
    21d0:	e003      	b.n	21da <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    21d2:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    21d6:	e7f4      	b.n	21c2 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    21d8:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    21da:	f7ff fed7 	bl	1f8c <z_nrf_rtc_timer_read>
    21de:	4b0e      	ldr	r3, [pc, #56]	; (2218 <sys_clock_set_timeout+0x60>)
    21e0:	681a      	ldr	r2, [r3, #0]
    21e2:	685b      	ldr	r3, [r3, #4]
    21e4:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    21e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    21ea:	d300      	bcc.n	21ee <sys_clock_set_timeout+0x36>
		ticks = 0;
    21ec:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    21ee:	4404      	add	r4, r0
    21f0:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    21f2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    21f6:	d300      	bcc.n	21fa <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    21f8:	4c06      	ldr	r4, [pc, #24]	; (2214 <sys_clock_set_timeout+0x5c>)
	uint64_t target_time = cyc + last_count;
    21fa:	2000      	movs	r0, #0
    21fc:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    21fe:	9001      	str	r0, [sp, #4]
    2200:	4906      	ldr	r1, [pc, #24]	; (221c <sys_clock_set_timeout+0x64>)
    2202:	9100      	str	r1, [sp, #0]
    2204:	f143 0300 	adc.w	r3, r3, #0
    2208:	f002 f964 	bl	44d4 <compare_set>
}
    220c:	b002      	add	sp, #8
    220e:	bd10      	pop	{r4, pc}
    2210:	007ffffe 	.word	0x007ffffe
    2214:	007fffff 	.word	0x007fffff
    2218:	20000100 	.word	0x20000100
    221c:	00001f15 	.word	0x00001f15

00002220 <sys_clock_elapsed>:
{
    2220:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2222:	f7ff feb3 	bl	1f8c <z_nrf_rtc_timer_read>
    2226:	4b02      	ldr	r3, [pc, #8]	; (2230 <sys_clock_elapsed+0x10>)
    2228:	681b      	ldr	r3, [r3, #0]
}
    222a:	1ac0      	subs	r0, r0, r3
    222c:	bd08      	pop	{r3, pc}
    222e:	bf00      	nop
    2230:	20000100 	.word	0x20000100

00002234 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2234:	4b02      	ldr	r3, [pc, #8]	; (2240 <nvmc_wait+0xc>)
    2236:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    223a:	2b00      	cmp	r3, #0
    223c:	d0fa      	beq.n	2234 <nvmc_wait>
}
    223e:	4770      	bx	lr
    2240:	4001e000 	.word	0x4001e000

00002244 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    2244:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2246:	4b03      	ldr	r3, [pc, #12]	; (2254 <nvmc_config+0x10>)
    2248:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    224c:	f7ff fff2 	bl	2234 <nvmc_wait>
}
    2250:	bd08      	pop	{r3, pc}
    2252:	bf00      	nop
    2254:	4001e000 	.word	0x4001e000

00002258 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2258:	4b01      	ldr	r3, [pc, #4]	; (2260 <SystemCoreClockUpdate+0x8>)
    225a:	4a02      	ldr	r2, [pc, #8]	; (2264 <SystemCoreClockUpdate+0xc>)
    225c:	601a      	str	r2, [r3, #0]
}
    225e:	4770      	bx	lr
    2260:	20000024 	.word	0x20000024
    2264:	03d09000 	.word	0x03d09000

00002268 <SystemInit>:

void SystemInit(void)
{
    2268:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    226a:	f002 f95e 	bl	452a <nrf52_errata_36>
    226e:	b140      	cbz	r0, 2282 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2274:	2200      	movs	r2, #0
    2276:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    227a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    227e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2282:	f002 f95c 	bl	453e <nrf52_errata_66>
    2286:	2800      	cmp	r0, #0
    2288:	d046      	beq.n	2318 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    228a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    228e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2292:	4b59      	ldr	r3, [pc, #356]	; (23f8 <SystemInit+0x190>)
    2294:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2298:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    229c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    22a0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    22a4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    22a8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    22ac:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    22b0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    22b4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    22b8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    22bc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    22c0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    22c4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    22c8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    22cc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    22d0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    22d4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    22d8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    22dc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    22e0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    22e4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    22e8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    22ec:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    22f0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    22f4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    22f8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    22fc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2300:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2304:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2308:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    230c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2310:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2314:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2318:	f002 f91b 	bl	4552 <nrf52_errata_98>
    231c:	b118      	cbz	r0, 2326 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    231e:	4b37      	ldr	r3, [pc, #220]	; (23fc <SystemInit+0x194>)
    2320:	4a37      	ldr	r2, [pc, #220]	; (2400 <SystemInit+0x198>)
    2322:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2326:	f002 f927 	bl	4578 <nrf52_errata_103>
    232a:	b118      	cbz	r0, 2334 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    232c:	4b35      	ldr	r3, [pc, #212]	; (2404 <SystemInit+0x19c>)
    232e:	22fb      	movs	r2, #251	; 0xfb
    2330:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2334:	f002 f933 	bl	459e <nrf52_errata_115>
    2338:	b170      	cbz	r0, 2358 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    233a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    233e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    2342:	f023 030f 	bic.w	r3, r3, #15
    2346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    234a:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    234e:	f002 020f 	and.w	r2, r2, #15
    2352:	4313      	orrs	r3, r2
    2354:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2358:	f002 f934 	bl	45c4 <nrf52_errata_120>
    235c:	b120      	cbz	r0, 2368 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    235e:	4b2a      	ldr	r3, [pc, #168]	; (2408 <SystemInit+0x1a0>)
    2360:	f44f 7200 	mov.w	r2, #512	; 0x200
    2364:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2368:	f002 f93f 	bl	45ea <nrf52_errata_136>
    236c:	b160      	cbz	r0, 2388 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    236e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2372:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2376:	f013 0f01 	tst.w	r3, #1
    237a:	d005      	beq.n	2388 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    237c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2380:	f06f 0201 	mvn.w	r2, #1
    2384:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2388:	f002 f939 	bl	45fe <nrf52_configuration_249>
    238c:	b138      	cbz	r0, 239e <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    238e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2392:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    239a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    239e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    23a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    23a6:	2b00      	cmp	r3, #0
    23a8:	db08      	blt.n	23bc <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    23aa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    23ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    23b2:	2b00      	cmp	r3, #0
    23b4:	db02      	blt.n	23bc <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    23b6:	f7ff ff4f 	bl	2258 <SystemCoreClockUpdate>
}
    23ba:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    23bc:	2001      	movs	r0, #1
    23be:	f7ff ff41 	bl	2244 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    23c2:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    23c6:	2512      	movs	r5, #18
    23c8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    23cc:	f7ff ff32 	bl	2234 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    23d0:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    23d4:	f7ff ff2e 	bl	2234 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    23d8:	2000      	movs	r0, #0
    23da:	f7ff ff33 	bl	2244 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    23de:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    23e2:	490a      	ldr	r1, [pc, #40]	; (240c <SystemInit+0x1a4>)
    23e4:	68ca      	ldr	r2, [r1, #12]
    23e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    23ea:	4b09      	ldr	r3, [pc, #36]	; (2410 <SystemInit+0x1a8>)
    23ec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    23ee:	60cb      	str	r3, [r1, #12]
    23f0:	f3bf 8f4f 	dsb	sy
    __NOP();
    23f4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    23f6:	e7fd      	b.n	23f4 <SystemInit+0x18c>
    23f8:	4000c000 	.word	0x4000c000
    23fc:	40005000 	.word	0x40005000
    2400:	00038148 	.word	0x00038148
    2404:	4000f000 	.word	0x4000f000
    2408:	40029000 	.word	0x40029000
    240c:	e000ed00 	.word	0xe000ed00
    2410:	05fa0004 	.word	0x05fa0004

00002414 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2414:	4b06      	ldr	r3, [pc, #24]	; (2430 <nrfx_clock_init+0x1c>)
    2416:	791b      	ldrb	r3, [r3, #4]
    2418:	b93b      	cbnz	r3, 242a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    241a:	4b05      	ldr	r3, [pc, #20]	; (2430 <nrfx_clock_init+0x1c>)
    241c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    241e:	2201      	movs	r2, #1
    2420:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    2422:	2200      	movs	r2, #0
    2424:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2426:	4803      	ldr	r0, [pc, #12]	; (2434 <nrfx_clock_init+0x20>)
    2428:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    242a:	4803      	ldr	r0, [pc, #12]	; (2438 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    242c:	4770      	bx	lr
    242e:	bf00      	nop
    2430:	20000828 	.word	0x20000828
    2434:	0bad0000 	.word	0x0bad0000
    2438:	0bad000c 	.word	0x0bad000c

0000243c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    243c:	b530      	push	{r4, r5, lr}
    243e:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2440:	4604      	mov	r4, r0
    2442:	b118      	cbz	r0, 244c <nrfx_clock_stop+0x10>
    2444:	2801      	cmp	r0, #1
    2446:	d012      	beq.n	246e <nrfx_clock_stop+0x32>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2448:	b003      	add	sp, #12
    244a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    244c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2450:	2202      	movs	r2, #2
    2452:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2456:	2200      	movs	r2, #0
    2458:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    245c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2460:	2201      	movs	r2, #1
    2462:	60da      	str	r2, [r3, #12]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2464:	2c01      	cmp	r4, #1
    2466:	d00e      	beq.n	2486 <nrfx_clock_stop+0x4a>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2468:	f242 7510 	movw	r5, #10000	; 0x2710
    246c:	e051      	b.n	2512 <nrfx_clock_stop+0xd6>
    p_reg->INTENCLR = mask;
    246e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2472:	2201      	movs	r2, #1
    2474:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2478:	2100      	movs	r1, #0
    247a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    247e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2482:	605a      	str	r2, [r3, #4]
}
    2484:	e7ee      	b.n	2464 <nrfx_clock_stop+0x28>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2486:	2301      	movs	r3, #1
    2488:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    248c:	f242 7510 	movw	r5, #10000	; 0x2710
    2490:	e018      	b.n	24c4 <nrfx_clock_stop+0x88>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2496:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    249a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    249e:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    24a2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    24a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    24aa:	d120      	bne.n	24ee <nrfx_clock_stop+0xb2>
    return false;
    24ac:	2300      	movs	r3, #0
    24ae:	2b00      	cmp	r3, #0
    24b0:	d042      	beq.n	2538 <nrfx_clock_stop+0xfc>
    24b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    24b6:	2b01      	cmp	r3, #1
    24b8:	d13e      	bne.n	2538 <nrfx_clock_stop+0xfc>
    24ba:	2001      	movs	r0, #1
    24bc:	f002 f8b2 	bl	4624 <nrfx_busy_wait>
    24c0:	3d01      	subs	r5, #1
    24c2:	d039      	beq.n	2538 <nrfx_clock_stop+0xfc>
    switch (domain)
    24c4:	2c00      	cmp	r4, #0
    24c6:	d0e4      	beq.n	2492 <nrfx_clock_stop+0x56>
    24c8:	2c01      	cmp	r4, #1
    24ca:	d001      	beq.n	24d0 <nrfx_clock_stop+0x94>
    24cc:	2300      	movs	r3, #0
    24ce:	e7ee      	b.n	24ae <nrfx_clock_stop+0x72>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    24d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    24d4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    24d8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    24dc:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    24e0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    24e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    24e8:	d103      	bne.n	24f2 <nrfx_clock_stop+0xb6>
    return false;
    24ea:	2300      	movs	r3, #0
    24ec:	e7df      	b.n	24ae <nrfx_clock_stop+0x72>
                return true;
    24ee:	2301      	movs	r3, #1
    24f0:	e7dd      	b.n	24ae <nrfx_clock_stop+0x72>
                return true;
    24f2:	2301      	movs	r3, #1
    24f4:	e7db      	b.n	24ae <nrfx_clock_stop+0x72>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    24f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    24fa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    24fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2502:	d115      	bne.n	2530 <nrfx_clock_stop+0xf4>
    return false;
    2504:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2506:	b1bb      	cbz	r3, 2538 <nrfx_clock_stop+0xfc>
    2508:	2001      	movs	r0, #1
    250a:	f002 f88b 	bl	4624 <nrfx_busy_wait>
    250e:	3d01      	subs	r5, #1
    2510:	d012      	beq.n	2538 <nrfx_clock_stop+0xfc>
    switch (domain)
    2512:	2c00      	cmp	r4, #0
    2514:	d0ef      	beq.n	24f6 <nrfx_clock_stop+0xba>
    2516:	2c01      	cmp	r4, #1
    2518:	d001      	beq.n	251e <nrfx_clock_stop+0xe2>
    251a:	2300      	movs	r3, #0
    251c:	e7f3      	b.n	2506 <nrfx_clock_stop+0xca>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    251e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2522:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2526:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    252a:	d103      	bne.n	2534 <nrfx_clock_stop+0xf8>
    return false;
    252c:	2300      	movs	r3, #0
    252e:	e7ea      	b.n	2506 <nrfx_clock_stop+0xca>
                return true;
    2530:	2301      	movs	r3, #1
    2532:	e7e8      	b.n	2506 <nrfx_clock_stop+0xca>
                return true;
    2534:	2301      	movs	r3, #1
    2536:	e7e6      	b.n	2506 <nrfx_clock_stop+0xca>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2538:	2c01      	cmp	r4, #1
    253a:	d185      	bne.n	2448 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    253c:	4b01      	ldr	r3, [pc, #4]	; (2544 <nrfx_clock_stop+0x108>)
    253e:	2200      	movs	r2, #0
    2540:	715a      	strb	r2, [r3, #5]
    2542:	e781      	b.n	2448 <nrfx_clock_stop+0xc>
    2544:	20000828 	.word	0x20000828

00002548 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2548:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    254a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    254e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2552:	b18b      	cbz	r3, 2578 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2558:	2200      	movs	r2, #0
    255a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    255e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2562:	2201      	movs	r2, #1
    2564:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2568:	4b15      	ldr	r3, [pc, #84]	; (25c0 <nrfx_power_clock_irq_handler+0x78>)
    256a:	795b      	ldrb	r3, [r3, #5]
    256c:	b923      	cbnz	r3, 2578 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    256e:	4b14      	ldr	r3, [pc, #80]	; (25c0 <nrfx_power_clock_irq_handler+0x78>)
    2570:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2572:	681b      	ldr	r3, [r3, #0]
    2574:	2000      	movs	r0, #0
    2576:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    257c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2580:	b19b      	cbz	r3, 25aa <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2586:	2200      	movs	r2, #0
    2588:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    258c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2590:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2594:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2598:	f012 0f03 	tst.w	r2, #3
    259c:	d106      	bne.n	25ac <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    259e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25a2:	2201      	movs	r2, #1
    25a4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25a8:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    25aa:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    25ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25b0:	2202      	movs	r2, #2
    25b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    25b6:	4b02      	ldr	r3, [pc, #8]	; (25c0 <nrfx_power_clock_irq_handler+0x78>)
    25b8:	681b      	ldr	r3, [r3, #0]
    25ba:	2001      	movs	r0, #1
    25bc:	4798      	blx	r3
}
    25be:	e7f4      	b.n	25aa <nrfx_power_clock_irq_handler+0x62>
    25c0:	20000828 	.word	0x20000828

000025c4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c6:	b089      	sub	sp, #36	; 0x24
    25c8:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    25ca:	4d15      	ldr	r5, [pc, #84]	; (2620 <init_idle_thread+0x5c>)
    25cc:	23b0      	movs	r3, #176	; 0xb0
    25ce:	fb03 5500 	mla	r5, r3, r0, r5
	k_thread_stack_t *stack = z_idle_stacks[i];
    25d2:	4e14      	ldr	r6, [pc, #80]	; (2624 <init_idle_thread+0x60>)
    25d4:	f44f 73b0 	mov.w	r3, #352	; 0x160
    25d8:	fb03 6600 	mla	r6, r3, r0, r6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    25dc:	af06      	add	r7, sp, #24
    25de:	4603      	mov	r3, r0
    25e0:	4a11      	ldr	r2, [pc, #68]	; (2628 <init_idle_thread+0x64>)
    25e2:	2108      	movs	r1, #8
    25e4:	4638      	mov	r0, r7
    25e6:	f001 faf6 	bl	3bd6 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    25ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    25ee:	480f      	ldr	r0, [pc, #60]	; (262c <init_idle_thread+0x68>)
    25f0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    25f4:	9705      	str	r7, [sp, #20]
    25f6:	2301      	movs	r3, #1
    25f8:	9304      	str	r3, [sp, #16]
    25fa:	230f      	movs	r3, #15
    25fc:	9303      	str	r3, [sp, #12]
    25fe:	2300      	movs	r3, #0
    2600:	9302      	str	r3, [sp, #8]
    2602:	9301      	str	r3, [sp, #4]
    2604:	9400      	str	r4, [sp, #0]
    2606:	4b0a      	ldr	r3, [pc, #40]	; (2630 <init_idle_thread+0x6c>)
    2608:	f44f 72a0 	mov.w	r2, #320	; 0x140
    260c:	4631      	mov	r1, r6
    260e:	4628      	mov	r0, r5
    2610:	f000 f940 	bl	2894 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2614:	7b6b      	ldrb	r3, [r5, #13]
    2616:	f023 0304 	bic.w	r3, r3, #4
    261a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    261c:	b009      	add	sp, #36	; 0x24
    261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2620:	20000108 	.word	0x20000108
    2624:	20000e80 	.word	0x20000e80
    2628:	00004ea0 	.word	0x00004ea0
    262c:	20000830 	.word	0x20000830
    2630:	000029f1 	.word	0x000029f1

00002634 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    2638:	f000 fe04 	bl	3244 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    263c:	4d1b      	ldr	r5, [pc, #108]	; (26ac <prepare_multithreading+0x78>)
    263e:	4b1c      	ldr	r3, [pc, #112]	; (26b0 <prepare_multithreading+0x7c>)
    2640:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2642:	4b1c      	ldr	r3, [pc, #112]	; (26b4 <prepare_multithreading+0x80>)
    2644:	9305      	str	r3, [sp, #20]
    2646:	2301      	movs	r3, #1
    2648:	9304      	str	r3, [sp, #16]
    264a:	2400      	movs	r4, #0
    264c:	9403      	str	r4, [sp, #12]
    264e:	9402      	str	r4, [sp, #8]
    2650:	9401      	str	r4, [sp, #4]
    2652:	9400      	str	r4, [sp, #0]
    2654:	4b18      	ldr	r3, [pc, #96]	; (26b8 <prepare_multithreading+0x84>)
    2656:	f44f 6280 	mov.w	r2, #1024	; 0x400
    265a:	4918      	ldr	r1, [pc, #96]	; (26bc <prepare_multithreading+0x88>)
    265c:	4628      	mov	r0, r5
    265e:	f000 f919 	bl	2894 <z_setup_new_thread>
    2662:	4606      	mov	r6, r0
    2664:	7b6b      	ldrb	r3, [r5, #13]
    2666:	f023 0304 	bic.w	r3, r3, #4
    266a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    266c:	4628      	mov	r0, r5
    266e:	f002 f902 	bl	4876 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    2672:	2c00      	cmp	r4, #0
    2674:	dd02      	ble.n	267c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    2676:	4630      	mov	r0, r6
    2678:	b006      	add	sp, #24
    267a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    267c:	4620      	mov	r0, r4
    267e:	f7ff ffa1 	bl	25c4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2682:	4a0f      	ldr	r2, [pc, #60]	; (26c0 <prepare_multithreading+0x8c>)
    2684:	23b0      	movs	r3, #176	; 0xb0
    2686:	fb03 2204 	mla	r2, r3, r4, r2
    268a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    268e:	4b08      	ldr	r3, [pc, #32]	; (26b0 <prepare_multithreading+0x7c>)
    2690:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2694:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    2696:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    2698:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    269c:	4a09      	ldr	r2, [pc, #36]	; (26c4 <prepare_multithreading+0x90>)
    269e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    26a2:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    26a6:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    26a8:	3401      	adds	r4, #1
    26aa:	e7e2      	b.n	2672 <prepare_multithreading+0x3e>
    26ac:	200001b8 	.word	0x200001b8
    26b0:	20000830 	.word	0x20000830
    26b4:	00004eac 	.word	0x00004eac
    26b8:	000026c9 	.word	0x000026c9
    26bc:	20000a60 	.word	0x20000a60
    26c0:	20000108 	.word	0x20000108
    26c4:	20000fe0 	.word	0x20000fe0

000026c8 <bg_thread_main>:
{
    26c8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    26ca:	4b0a      	ldr	r3, [pc, #40]	; (26f4 <bg_thread_main+0x2c>)
    26cc:	2201      	movs	r2, #1
    26ce:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    26d0:	2002      	movs	r0, #2
    26d2:	f001 f82b 	bl	372c <z_sys_init_run_level>
	boot_banner();
    26d6:	f002 fa1e 	bl	4b16 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    26da:	2003      	movs	r0, #3
    26dc:	f001 f826 	bl	372c <z_sys_init_run_level>
	z_init_static_threads();
    26e0:	f000 f93c 	bl	295c <z_init_static_threads>
	main();
    26e4:	f7fd fe8e 	bl	404 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    26e8:	4a03      	ldr	r2, [pc, #12]	; (26f8 <bg_thread_main+0x30>)
    26ea:	7b13      	ldrb	r3, [r2, #12]
    26ec:	f023 0301 	bic.w	r3, r3, #1
    26f0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    26f2:	bd08      	pop	{r3, pc}
    26f4:	20000885 	.word	0x20000885
    26f8:	200001b8 	.word	0x200001b8

000026fc <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    26fc:	b508      	push	{r3, lr}
    26fe:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2700:	4a01      	ldr	r2, [pc, #4]	; (2708 <switch_to_main_thread+0xc>)
    2702:	4802      	ldr	r0, [pc, #8]	; (270c <switch_to_main_thread+0x10>)
    2704:	f7fe fefc 	bl	1500 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2708:	000026c9 	.word	0x000026c9
    270c:	200001b8 	.word	0x200001b8

00002710 <z_bss_zero>:
{
    2710:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2712:	4803      	ldr	r0, [pc, #12]	; (2720 <z_bss_zero+0x10>)
    2714:	4a03      	ldr	r2, [pc, #12]	; (2724 <z_bss_zero+0x14>)
    2716:	1a12      	subs	r2, r2, r0
    2718:	2100      	movs	r1, #0
    271a:	f001 fd6e 	bl	41fa <memset>
}
    271e:	bd08      	pop	{r3, pc}
    2720:	200000e8 	.word	0x200000e8
    2724:	20000a44 	.word	0x20000a44

00002728 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    2728:	b500      	push	{lr}
    272a:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    272c:	4b1c      	ldr	r3, [pc, #112]	; (27a0 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    272e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    2732:	4c1c      	ldr	r4, [pc, #112]	; (27a4 <z_cstart+0x7c>)
    2734:	6963      	ldr	r3, [r4, #20]
    2736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    273a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    273c:	23e0      	movs	r3, #224	; 0xe0
    273e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    2742:	2500      	movs	r5, #0
    2744:	77e5      	strb	r5, [r4, #31]
    2746:	7625      	strb	r5, [r4, #24]
    2748:	7665      	strb	r5, [r4, #25]
    274a:	76a5      	strb	r5, [r4, #26]
    274c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2750:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2752:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2756:	6263      	str	r3, [r4, #36]	; 0x24
    2758:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    275c:	f7ff f81e 	bl	179c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2760:	f7fe fdbc 	bl	12dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2768:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    276a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    276c:	f7ff f92e 	bl	19cc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2770:	f7ff f8be 	bl	18f0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    2774:	2401      	movs	r4, #1
    2776:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    277a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    277e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    2780:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    2782:	4b09      	ldr	r3, [pc, #36]	; (27a8 <z_cstart+0x80>)
    2784:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    2788:	f000 ffc4 	bl	3714 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    278c:	4628      	mov	r0, r5
    278e:	f000 ffcd 	bl	372c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2792:	4620      	mov	r0, r4
    2794:	f000 ffca 	bl	372c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    2798:	f7ff ff4c 	bl	2634 <prepare_multithreading>
    279c:	f7ff ffae 	bl	26fc <switch_to_main_thread>
    27a0:	20001800 	.word	0x20001800
    27a4:	e000ed00 	.word	0xe000ed00
    27a8:	20000830 	.word	0x20000830

000027ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    27ac:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    27ae:	4c06      	ldr	r4, [pc, #24]	; (27c8 <init_mem_slab_module+0x1c>)
	int rc = 0;
    27b0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    27b2:	e000      	b.n	27b6 <init_mem_slab_module+0xa>
    27b4:	341c      	adds	r4, #28
    27b6:	4b05      	ldr	r3, [pc, #20]	; (27cc <init_mem_slab_module+0x20>)
    27b8:	429c      	cmp	r4, r3
    27ba:	d204      	bcs.n	27c6 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    27bc:	4620      	mov	r0, r4
    27be:	f001 ff8d 	bl	46dc <create_free_list>
		if (rc < 0) {
    27c2:	2800      	cmp	r0, #0
    27c4:	daf6      	bge.n	27b4 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    27c6:	bd10      	pop	{r4, pc}
    27c8:	20000094 	.word	0x20000094
    27cc:	20000094 	.word	0x20000094

000027d0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    27d0:	b530      	push	{r4, r5, lr}
    27d2:	b083      	sub	sp, #12
    27d4:	460d      	mov	r5, r1
	__asm__ volatile(
    27d6:	f04f 0420 	mov.w	r4, #32
    27da:	f3ef 8111 	mrs	r1, BASEPRI
    27de:	f384 8812 	msr	BASEPRI_MAX, r4
    27e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    27e6:	6944      	ldr	r4, [r0, #20]
    27e8:	b16c      	cbz	r4, 2806 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    27ea:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    27ec:	6943      	ldr	r3, [r0, #20]
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    27f2:	6983      	ldr	r3, [r0, #24]
    27f4:	3301      	adds	r3, #1
    27f6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    27f8:	2000      	movs	r0, #0
	__asm__ volatile(
    27fa:	f381 8811 	msr	BASEPRI, r1
    27fe:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    2802:	b003      	add	sp, #12
    2804:	bd30      	pop	{r4, r5, pc}
    2806:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    280a:	ea53 0402 	orrs.w	r4, r3, r2
    280e:	d104      	bne.n	281a <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    2810:	2300      	movs	r3, #0
    2812:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    2814:	f06f 000b 	mvn.w	r0, #11
    2818:	e7ef      	b.n	27fa <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    281a:	9200      	str	r2, [sp, #0]
    281c:	9301      	str	r3, [sp, #4]
    281e:	4602      	mov	r2, r0
    2820:	4660      	mov	r0, ip
    2822:	f000 fbe3 	bl	2fec <z_pend_curr>
		if (result == 0) {
    2826:	2800      	cmp	r0, #0
    2828:	d1eb      	bne.n	2802 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    282a:	4b02      	ldr	r3, [pc, #8]	; (2834 <k_mem_slab_alloc+0x64>)
    282c:	689b      	ldr	r3, [r3, #8]
    282e:	695b      	ldr	r3, [r3, #20]
    2830:	602b      	str	r3, [r5, #0]
		return result;
    2832:	e7e6      	b.n	2802 <k_mem_slab_alloc+0x32>
    2834:	20000830 	.word	0x20000830

00002838 <z_thread_monitor_exit>:
	__asm__ volatile(
    2838:	f04f 0320 	mov.w	r3, #32
    283c:	f3ef 8111 	mrs	r1, BASEPRI
    2840:	f383 8812 	msr	BASEPRI_MAX, r3
    2844:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    2848:	4b0a      	ldr	r3, [pc, #40]	; (2874 <z_thread_monitor_exit+0x3c>)
    284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    284c:	4283      	cmp	r3, r0
    284e:	d104      	bne.n	285a <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    2850:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    2852:	4b08      	ldr	r3, [pc, #32]	; (2874 <z_thread_monitor_exit+0x3c>)
    2854:	629a      	str	r2, [r3, #40]	; 0x28
    2856:	e007      	b.n	2868 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    2858:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    285a:	b113      	cbz	r3, 2862 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    285c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    285e:	4282      	cmp	r2, r0
    2860:	d1fa      	bne.n	2858 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    2862:	b10b      	cbz	r3, 2868 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    2864:	6f02      	ldr	r2, [r0, #112]	; 0x70
    2866:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    2868:	f381 8811 	msr	BASEPRI, r1
    286c:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    2870:	4770      	bx	lr
    2872:	bf00      	nop
    2874:	20000830 	.word	0x20000830

00002878 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    2878:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    287a:	ea53 0102 	orrs.w	r1, r3, r2
    287e:	d102      	bne.n	2886 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    2880:	f001 ff95 	bl	47ae <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    2884:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    2886:	4902      	ldr	r1, [pc, #8]	; (2890 <schedule_new_thread+0x18>)
    2888:	3018      	adds	r0, #24
    288a:	f000 fe33 	bl	34f4 <z_add_timeout>
    288e:	e7f9      	b.n	2884 <schedule_new_thread+0xc>
    2890:	000048af 	.word	0x000048af

00002894 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2898:	b085      	sub	sp, #20
    289a:	4604      	mov	r4, r0
    289c:	460f      	mov	r7, r1
    289e:	4615      	mov	r5, r2
    28a0:	461e      	mov	r6, r3
    28a2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    28a6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    28aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    28ae:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    28b2:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    28b6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    28b8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    28ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    28bc:	2204      	movs	r2, #4
    28be:	9911      	ldr	r1, [sp, #68]	; 0x44
    28c0:	f001 ff79 	bl	47b6 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    28c4:	462a      	mov	r2, r5
    28c6:	4639      	mov	r1, r7
    28c8:	4620      	mov	r0, r4
    28ca:	f001 ff58 	bl	477e <setup_thread_stack>
    28ce:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    28d0:	f8cd 8008 	str.w	r8, [sp, #8]
    28d4:	f8cd 9004 	str.w	r9, [sp, #4]
    28d8:	f8cd a000 	str.w	sl, [sp]
    28dc:	4633      	mov	r3, r6
    28de:	4602      	mov	r2, r0
    28e0:	4639      	mov	r1, r7
    28e2:	4620      	mov	r0, r4
    28e4:	f7fe fdc2 	bl	146c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    28e8:	2300      	movs	r3, #0
    28ea:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    28ec:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    28ee:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    28f2:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    28f6:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    28fa:	f04f 0320 	mov.w	r3, #32
    28fe:	f3ef 8211 	mrs	r2, BASEPRI
    2902:	f383 8812 	msr	BASEPRI_MAX, r3
    2906:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    290a:	4b13      	ldr	r3, [pc, #76]	; (2958 <z_setup_new_thread+0xc4>)
    290c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    290e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    2910:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    2912:	f382 8811 	msr	BASEPRI, r2
    2916:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    291a:	f1bb 0f00 	cmp.w	fp, #0
    291e:	d013      	beq.n	2948 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    2920:	221f      	movs	r2, #31
    2922:	4659      	mov	r1, fp
    2924:	f104 0074 	add.w	r0, r4, #116	; 0x74
    2928:	f001 fc0b 	bl	4142 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    292c:	2300      	movs	r3, #0
    292e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    2932:	4b09      	ldr	r3, [pc, #36]	; (2958 <z_setup_new_thread+0xc4>)
    2934:	689b      	ldr	r3, [r3, #8]
    2936:	b15b      	cbz	r3, 2950 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    293c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    2940:	4628      	mov	r0, r5
    2942:	b005      	add	sp, #20
    2944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    2948:	2300      	movs	r3, #0
    294a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    294e:	e7f0      	b.n	2932 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    2950:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    2954:	e7f4      	b.n	2940 <z_setup_new_thread+0xac>
    2956:	bf00      	nop
    2958:	20000830 	.word	0x20000830

0000295c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    295c:	b530      	push	{r4, r5, lr}
    295e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2960:	4c21      	ldr	r4, [pc, #132]	; (29e8 <z_init_static_threads+0x8c>)
    2962:	e014      	b.n	298e <z_init_static_threads+0x32>
		z_setup_new_thread(
    2964:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2966:	9305      	str	r3, [sp, #20]
    2968:	6a23      	ldr	r3, [r4, #32]
    296a:	9304      	str	r3, [sp, #16]
    296c:	69e3      	ldr	r3, [r4, #28]
    296e:	9303      	str	r3, [sp, #12]
    2970:	69a3      	ldr	r3, [r4, #24]
    2972:	9302      	str	r3, [sp, #8]
    2974:	6963      	ldr	r3, [r4, #20]
    2976:	9301      	str	r3, [sp, #4]
    2978:	6923      	ldr	r3, [r4, #16]
    297a:	9300      	str	r3, [sp, #0]
    297c:	68e3      	ldr	r3, [r4, #12]
    297e:	68a2      	ldr	r2, [r4, #8]
    2980:	6861      	ldr	r1, [r4, #4]
    2982:	6820      	ldr	r0, [r4, #0]
    2984:	f7ff ff86 	bl	2894 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    2988:	6823      	ldr	r3, [r4, #0]
    298a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    298c:	3430      	adds	r4, #48	; 0x30
    298e:	4b17      	ldr	r3, [pc, #92]	; (29ec <z_init_static_threads+0x90>)
    2990:	429c      	cmp	r4, r3
    2992:	d3e7      	bcc.n	2964 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2994:	f000 f9d6 	bl	2d44 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2998:	4c13      	ldr	r4, [pc, #76]	; (29e8 <z_init_static_threads+0x8c>)
    299a:	e000      	b.n	299e <z_init_static_threads+0x42>
    299c:	3430      	adds	r4, #48	; 0x30
    299e:	4b13      	ldr	r3, [pc, #76]	; (29ec <z_init_static_threads+0x90>)
    29a0:	429c      	cmp	r4, r3
    29a2:	d21c      	bcs.n	29de <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    29a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    29a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    29aa:	d0f7      	beq.n	299c <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    29ac:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    29ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    29b2:	17c1      	asrs	r1, r0, #31
		} else {
			return (t * to_hz + off) / from_hz;
    29b4:	03c9      	lsls	r1, r1, #15
    29b6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    29ba:	03c0      	lsls	r0, r0, #15
    29bc:	f240 33e7 	movw	r3, #999	; 0x3e7
    29c0:	18c0      	adds	r0, r0, r3
    29c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29c6:	f04f 0300 	mov.w	r3, #0
    29ca:	f141 0100 	adc.w	r1, r1, #0
    29ce:	f7fd fb97 	bl	100 <__aeabi_uldivmod>
    29d2:	4602      	mov	r2, r0
    29d4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    29d6:	4628      	mov	r0, r5
    29d8:	f7ff ff4e 	bl	2878 <schedule_new_thread>
    29dc:	e7de      	b.n	299c <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    29de:	f000 fbbb 	bl	3158 <k_sched_unlock>
}
    29e2:	b007      	add	sp, #28
    29e4:	bd30      	pop	{r4, r5, pc}
    29e6:	bf00      	nop
    29e8:	20000094 	.word	0x20000094
    29ec:	20000094 	.word	0x20000094

000029f0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    29f0:	b508      	push	{r3, lr}
	__asm__ volatile(
    29f2:	f04f 0220 	mov.w	r2, #32
    29f6:	f3ef 8311 	mrs	r3, BASEPRI
    29fa:	f382 8812 	msr	BASEPRI_MAX, r2
    29fe:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    2a02:	f002 f83c 	bl	4a7e <z_get_next_timeout_expiry>
    2a06:	4b04      	ldr	r3, [pc, #16]	; (2a18 <idle+0x28>)
    2a08:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    2a0a:	f7fe fadb 	bl	fc4 <pm_system_suspend>
    2a0e:	2800      	cmp	r0, #0
    2a10:	d1ef      	bne.n	29f2 <idle+0x2>
	arch_cpu_idle();
    2a12:	f7fe fc69 	bl	12e8 <arch_cpu_idle>
}
    2a16:	e7ec      	b.n	29f2 <idle+0x2>
    2a18:	20000830 	.word	0x20000830

00002a1c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    2a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a20:	b083      	sub	sp, #12
    2a22:	4604      	mov	r4, r0
    2a24:	461d      	mov	r5, r3
    2a26:	f04f 0320 	mov.w	r3, #32
    2a2a:	f3ef 8711 	mrs	r7, BASEPRI
    2a2e:	f383 8812 	msr	BASEPRI_MAX, r3
    2a32:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2a36:	68c1      	ldr	r1, [r0, #12]
    2a38:	b999      	cbnz	r1, 2a62 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    2a3a:	2900      	cmp	r1, #0
    2a3c:	d14f      	bne.n	2ade <z_impl_k_mutex_lock+0xc2>
    2a3e:	4b3a      	ldr	r3, [pc, #232]	; (2b28 <z_impl_k_mutex_lock+0x10c>)
    2a40:	689b      	ldr	r3, [r3, #8]
    2a42:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2a46:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    2a48:	3101      	adds	r1, #1
    2a4a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    2a4c:	4b36      	ldr	r3, [pc, #216]	; (2b28 <z_impl_k_mutex_lock+0x10c>)
    2a4e:	689b      	ldr	r3, [r3, #8]
    2a50:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    2a52:	f387 8811 	msr	BASEPRI, r7
    2a56:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    2a5a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    2a5c:	b003      	add	sp, #12
    2a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2a62:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2a64:	6882      	ldr	r2, [r0, #8]
    2a66:	4b30      	ldr	r3, [pc, #192]	; (2b28 <z_impl_k_mutex_lock+0x10c>)
    2a68:	689b      	ldr	r3, [r3, #8]
    2a6a:	429a      	cmp	r2, r3
    2a6c:	d0e5      	beq.n	2a3a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2a6e:	ea55 0106 	orrs.w	r1, r5, r6
    2a72:	bf0c      	ite	eq
    2a74:	f04f 0801 	moveq.w	r8, #1
    2a78:	f04f 0800 	movne.w	r8, #0
    2a7c:	d031      	beq.n	2ae2 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    2a7e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    2a82:	4649      	mov	r1, r9
    2a84:	f993 000e 	ldrsb.w	r0, [r3, #14]
    2a88:	f001 fea6 	bl	47d8 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    2a8c:	4581      	cmp	r9, r0
    2a8e:	dc2f      	bgt.n	2af0 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    2a90:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2a94:	9600      	str	r6, [sp, #0]
    2a96:	9501      	str	r5, [sp, #4]
    2a98:	4622      	mov	r2, r4
    2a9a:	4639      	mov	r1, r7
    2a9c:	4823      	ldr	r0, [pc, #140]	; (2b2c <z_impl_k_mutex_lock+0x110>)
    2a9e:	f000 faa5 	bl	2fec <z_pend_curr>
	if (got_mutex == 0) {
    2aa2:	2800      	cmp	r0, #0
    2aa4:	d0da      	beq.n	2a5c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    2aa6:	f04f 0320 	mov.w	r3, #32
    2aaa:	f3ef 8511 	mrs	r5, BASEPRI
    2aae:	f383 8812 	msr	BASEPRI_MAX, r3
    2ab2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    2ab6:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ab8:	429c      	cmp	r4, r3
    2aba:	d01f      	beq.n	2afc <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    2abc:	b1f3      	cbz	r3, 2afc <z_impl_k_mutex_lock+0xe0>
    2abe:	6921      	ldr	r1, [r4, #16]
    2ac0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    2ac4:	f001 fe88 	bl	47d8 <new_prio_for_inheritance>
    2ac8:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2aca:	4620      	mov	r0, r4
    2acc:	f001 fe8f 	bl	47ee <adjust_owner_prio>
    2ad0:	b9b0      	cbnz	r0, 2b00 <z_impl_k_mutex_lock+0xe4>
    2ad2:	f1b9 0f00 	cmp.w	r9, #0
    2ad6:	d015      	beq.n	2b04 <z_impl_k_mutex_lock+0xe8>
    2ad8:	f04f 0801 	mov.w	r8, #1
    2adc:	e012      	b.n	2b04 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    2ade:	6923      	ldr	r3, [r4, #16]
    2ae0:	e7b1      	b.n	2a46 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    2ae2:	f387 8811 	msr	BASEPRI, r7
    2ae6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    2aea:	f06f 000f 	mvn.w	r0, #15
    2aee:	e7b5      	b.n	2a5c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    2af0:	4601      	mov	r1, r0
    2af2:	4620      	mov	r0, r4
    2af4:	f001 fe7b 	bl	47ee <adjust_owner_prio>
    2af8:	4681      	mov	r9, r0
    2afa:	e7cb      	b.n	2a94 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    2afc:	6921      	ldr	r1, [r4, #16]
    2afe:	e7e4      	b.n	2aca <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2b00:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    2b04:	f1b8 0f00 	cmp.w	r8, #0
    2b08:	d106      	bne.n	2b18 <z_impl_k_mutex_lock+0xfc>
    2b0a:	f385 8811 	msr	BASEPRI, r5
    2b0e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    2b12:	f06f 000a 	mvn.w	r0, #10
    2b16:	e7a1      	b.n	2a5c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    2b18:	4629      	mov	r1, r5
    2b1a:	4804      	ldr	r0, [pc, #16]	; (2b2c <z_impl_k_mutex_lock+0x110>)
    2b1c:	f000 f8f6 	bl	2d0c <z_reschedule>
	return -EAGAIN;
    2b20:	f06f 000a 	mvn.w	r0, #10
    2b24:	e79a      	b.n	2a5c <z_impl_k_mutex_lock+0x40>
    2b26:	bf00      	nop
    2b28:	20000830 	.word	0x20000830
    2b2c:	2000085c 	.word	0x2000085c

00002b30 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    2b30:	6882      	ldr	r2, [r0, #8]
    2b32:	2a00      	cmp	r2, #0
    2b34:	d035      	beq.n	2ba2 <z_impl_k_mutex_unlock+0x72>
{
    2b36:	b538      	push	{r3, r4, r5, lr}
    2b38:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    2b3a:	4b1d      	ldr	r3, [pc, #116]	; (2bb0 <z_impl_k_mutex_unlock+0x80>)
    2b3c:	689b      	ldr	r3, [r3, #8]
    2b3e:	429a      	cmp	r2, r3
    2b40:	d132      	bne.n	2ba8 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    2b42:	7bda      	ldrb	r2, [r3, #15]
    2b44:	3a01      	subs	r2, #1
    2b46:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    2b48:	68c3      	ldr	r3, [r0, #12]
    2b4a:	2b01      	cmp	r3, #1
    2b4c:	d905      	bls.n	2b5a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    2b4e:	3b01      	subs	r3, #1
    2b50:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    2b52:	f000 fb01 	bl	3158 <k_sched_unlock>

	return 0;
    2b56:	2000      	movs	r0, #0
}
    2b58:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    2b5a:	f04f 0320 	mov.w	r3, #32
    2b5e:	f3ef 8511 	mrs	r5, BASEPRI
    2b62:	f383 8812 	msr	BASEPRI_MAX, r3
    2b66:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2b6a:	6901      	ldr	r1, [r0, #16]
    2b6c:	f001 fe3f 	bl	47ee <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2b70:	4620      	mov	r0, r4
    2b72:	f001 ff20 	bl	49b6 <z_unpend_first_thread>
	mutex->owner = new_owner;
    2b76:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2b78:	b160      	cbz	r0, 2b94 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    2b7a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2b7e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2b80:	2300      	movs	r3, #0
    2b82:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    2b86:	f001 fe76 	bl	4876 <z_ready_thread>
		z_reschedule(&lock, key);
    2b8a:	4629      	mov	r1, r5
    2b8c:	4809      	ldr	r0, [pc, #36]	; (2bb4 <z_impl_k_mutex_unlock+0x84>)
    2b8e:	f000 f8bd 	bl	2d0c <z_reschedule>
    2b92:	e7de      	b.n	2b52 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2b94:	2300      	movs	r3, #0
    2b96:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    2b98:	f385 8811 	msr	BASEPRI, r5
    2b9c:	f3bf 8f6f 	isb	sy
    2ba0:	e7d7      	b.n	2b52 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    2ba2:	f06f 0015 	mvn.w	r0, #21
}
    2ba6:	4770      	bx	lr
		return -EPERM;
    2ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2bac:	e7d4      	b.n	2b58 <z_impl_k_mutex_unlock+0x28>
    2bae:	bf00      	nop
    2bb0:	20000830 	.word	0x20000830
    2bb4:	2000085c 	.word	0x2000085c

00002bb8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2bb8:	b538      	push	{r3, r4, r5, lr}
    2bba:	4604      	mov	r4, r0
	__asm__ volatile(
    2bbc:	f04f 0320 	mov.w	r3, #32
    2bc0:	f3ef 8511 	mrs	r5, BASEPRI
    2bc4:	f383 8812 	msr	BASEPRI_MAX, r3
    2bc8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    2bcc:	f001 fef3 	bl	49b6 <z_unpend_first_thread>

	if (thread != NULL) {
    2bd0:	b148      	cbz	r0, 2be6 <z_impl_k_sem_give+0x2e>
    2bd2:	2200      	movs	r2, #0
    2bd4:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2bd8:	f001 fe4d 	bl	4876 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    2bdc:	4629      	mov	r1, r5
    2bde:	4807      	ldr	r0, [pc, #28]	; (2bfc <z_impl_k_sem_give+0x44>)
    2be0:	f000 f894 	bl	2d0c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    2be4:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2be6:	68a3      	ldr	r3, [r4, #8]
    2be8:	68e2      	ldr	r2, [r4, #12]
    2bea:	4293      	cmp	r3, r2
    2bec:	d003      	beq.n	2bf6 <z_impl_k_sem_give+0x3e>
    2bee:	2201      	movs	r2, #1
    2bf0:	4413      	add	r3, r2
    2bf2:	60a3      	str	r3, [r4, #8]
}
    2bf4:	e7f2      	b.n	2bdc <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2bf6:	2200      	movs	r2, #0
    2bf8:	e7fa      	b.n	2bf0 <z_impl_k_sem_give+0x38>
    2bfa:	bf00      	nop
    2bfc:	2000085c 	.word	0x2000085c

00002c00 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    2c00:	b510      	push	{r4, lr}
    2c02:	b082      	sub	sp, #8
    2c04:	f04f 0420 	mov.w	r4, #32
    2c08:	f3ef 8111 	mrs	r1, BASEPRI
    2c0c:	f384 8812 	msr	BASEPRI_MAX, r4
    2c10:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    2c14:	6884      	ldr	r4, [r0, #8]
    2c16:	b144      	cbz	r4, 2c2a <z_impl_k_sem_take+0x2a>
		sem->count--;
    2c18:	3c01      	subs	r4, #1
    2c1a:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    2c1c:	f381 8811 	msr	BASEPRI, r1
    2c20:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2c24:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    2c26:	b002      	add	sp, #8
    2c28:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2c2a:	ea53 0402 	orrs.w	r4, r3, r2
    2c2e:	d006      	beq.n	2c3e <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2c30:	9200      	str	r2, [sp, #0]
    2c32:	9301      	str	r3, [sp, #4]
    2c34:	4602      	mov	r2, r0
    2c36:	4805      	ldr	r0, [pc, #20]	; (2c4c <z_impl_k_sem_take+0x4c>)
    2c38:	f000 f9d8 	bl	2fec <z_pend_curr>
	return ret;
    2c3c:	e7f3      	b.n	2c26 <z_impl_k_sem_take+0x26>
    2c3e:	f381 8811 	msr	BASEPRI, r1
    2c42:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2c46:	f06f 000f 	mvn.w	r0, #15
    2c4a:	e7ec      	b.n	2c26 <z_impl_k_sem_take+0x26>
    2c4c:	2000085c 	.word	0x2000085c

00002c50 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c54:	bf08      	it	eq
    2c56:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    2c5a:	d100      	bne.n	2c5e <add_thread_timeout+0xe>
    2c5c:	4770      	bx	lr
{
    2c5e:	b508      	push	{r3, lr}
    2c60:	4902      	ldr	r1, [pc, #8]	; (2c6c <add_thread_timeout+0x1c>)
    2c62:	3018      	adds	r0, #24
    2c64:	f000 fc46 	bl	34f4 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    2c68:	bd08      	pop	{r3, pc}
    2c6a:	bf00      	nop
    2c6c:	000048af 	.word	0x000048af

00002c70 <z_reset_time_slice>:
{
    2c70:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    2c72:	4b08      	ldr	r3, [pc, #32]	; (2c94 <z_reset_time_slice+0x24>)
    2c74:	681b      	ldr	r3, [r3, #0]
    2c76:	b903      	cbnz	r3, 2c7a <z_reset_time_slice+0xa>
}
    2c78:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    2c7a:	f7ff fad1 	bl	2220 <sys_clock_elapsed>
    2c7e:	4603      	mov	r3, r0
    2c80:	4a04      	ldr	r2, [pc, #16]	; (2c94 <z_reset_time_slice+0x24>)
    2c82:	6810      	ldr	r0, [r2, #0]
    2c84:	4403      	add	r3, r0
    2c86:	4a04      	ldr	r2, [pc, #16]	; (2c98 <z_reset_time_slice+0x28>)
    2c88:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    2c8a:	2100      	movs	r1, #0
    2c8c:	f001 ff0e 	bl	4aac <z_set_timeout_expiry>
}
    2c90:	e7f2      	b.n	2c78 <z_reset_time_slice+0x8>
    2c92:	bf00      	nop
    2c94:	20000864 	.word	0x20000864
    2c98:	20000830 	.word	0x20000830

00002c9c <k_sched_time_slice_set>:
{
    2c9c:	b570      	push	{r4, r5, r6, lr}
    2c9e:	4604      	mov	r4, r0
    2ca0:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    2ca2:	2300      	movs	r3, #0
	__asm__ volatile(
    2ca4:	f04f 0220 	mov.w	r2, #32
    2ca8:	f3ef 8611 	mrs	r6, BASEPRI
    2cac:	f382 8812 	msr	BASEPRI_MAX, r2
    2cb0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2cb4:	e00c      	b.n	2cd0 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
    2cb6:	2802      	cmp	r0, #2
    2cb8:	bfb8      	it	lt
    2cba:	2002      	movlt	r0, #2
    2cbc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2cbe:	4b10      	ldr	r3, [pc, #64]	; (2d00 <k_sched_time_slice_set+0x64>)
    2cc0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    2cc2:	f7ff ffd5 	bl	2c70 <z_reset_time_slice>
	__asm__ volatile(
    2cc6:	f386 8811 	msr	BASEPRI, r6
    2cca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    2cce:	2301      	movs	r3, #1
    2cd0:	b9a3      	cbnz	r3, 2cfc <k_sched_time_slice_set+0x60>
		_current_cpu->slice_ticks = 0;
    2cd2:	4b0c      	ldr	r3, [pc, #48]	; (2d04 <k_sched_time_slice_set+0x68>)
    2cd4:	2200      	movs	r2, #0
    2cd6:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    2cd8:	0c61      	lsrs	r1, r4, #17
    2cda:	03e3      	lsls	r3, r4, #15
    2cdc:	f240 30e7 	movw	r0, #999	; 0x3e7
    2ce0:	1818      	adds	r0, r3, r0
    2ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ce6:	f04f 0300 	mov.w	r3, #0
    2cea:	f141 0100 	adc.w	r1, r1, #0
    2cee:	f7fd fa07 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    2cf2:	4b05      	ldr	r3, [pc, #20]	; (2d08 <k_sched_time_slice_set+0x6c>)
    2cf4:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    2cf6:	2c00      	cmp	r4, #0
    2cf8:	dcdd      	bgt.n	2cb6 <k_sched_time_slice_set+0x1a>
    2cfa:	e7e0      	b.n	2cbe <k_sched_time_slice_set+0x22>
}
    2cfc:	bd70      	pop	{r4, r5, r6, pc}
    2cfe:	bf00      	nop
    2d00:	20000860 	.word	0x20000860
    2d04:	20000830 	.word	0x20000830
    2d08:	20000864 	.word	0x20000864

00002d0c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    2d0c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    2d0e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2d10:	b921      	cbnz	r1, 2d1c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2d12:	f3ef 8305 	mrs	r3, IPSR
    2d16:	b913      	cbnz	r3, 2d1e <z_reschedule+0x12>
    2d18:	2101      	movs	r1, #1
    2d1a:	e000      	b.n	2d1e <z_reschedule+0x12>
    2d1c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    2d1e:	f011 0f01 	tst.w	r1, #1
    2d22:	d007      	beq.n	2d34 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    2d24:	4b06      	ldr	r3, [pc, #24]	; (2d40 <z_reschedule+0x34>)
    2d26:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    2d28:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    2d2a:	429a      	cmp	r2, r3
    2d2c:	d002      	beq.n	2d34 <z_reschedule+0x28>
	ret = arch_swap(key);
    2d2e:	f7fe fb45 	bl	13bc <arch_swap>
		z_swap(lock, key);
    2d32:	e003      	b.n	2d3c <z_reschedule+0x30>
    2d34:	f380 8811 	msr	BASEPRI, r0
    2d38:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    2d3c:	bd08      	pop	{r3, pc}
    2d3e:	bf00      	nop
    2d40:	20000830 	.word	0x20000830

00002d44 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    2d44:	2300      	movs	r3, #0
	__asm__ volatile(
    2d46:	f04f 0220 	mov.w	r2, #32
    2d4a:	f3ef 8111 	mrs	r1, BASEPRI
    2d4e:	f382 8812 	msr	BASEPRI_MAX, r2
    2d52:	f3bf 8f6f 	isb	sy
    2d56:	e009      	b.n	2d6c <k_sched_lock+0x28>
    2d58:	4b06      	ldr	r3, [pc, #24]	; (2d74 <k_sched_lock+0x30>)
    2d5a:	689a      	ldr	r2, [r3, #8]
    2d5c:	7bd3      	ldrb	r3, [r2, #15]
    2d5e:	3b01      	subs	r3, #1
    2d60:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2d62:	f381 8811 	msr	BASEPRI, r1
    2d66:	f3bf 8f6f 	isb	sy
    2d6a:	2301      	movs	r3, #1
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d0f3      	beq.n	2d58 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    2d70:	4770      	bx	lr
    2d72:	bf00      	nop
    2d74:	20000830 	.word	0x20000830

00002d78 <update_cache>:
{
    2d78:	b538      	push	{r3, r4, r5, lr}
    2d7a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    2d7c:	480f      	ldr	r0, [pc, #60]	; (2dbc <update_cache+0x44>)
    2d7e:	f001 fd73 	bl	4868 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    2d82:	4605      	mov	r5, r0
    2d84:	b170      	cbz	r0, 2da4 <update_cache+0x2c>
	if (preempt_ok != 0) {
    2d86:	b984      	cbnz	r4, 2daa <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    2d88:	4b0d      	ldr	r3, [pc, #52]	; (2dc0 <update_cache+0x48>)
    2d8a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    2d8c:	7b5a      	ldrb	r2, [r3, #13]
    2d8e:	f012 0f1f 	tst.w	r2, #31
    2d92:	d10a      	bne.n	2daa <update_cache+0x32>
	return node->next != NULL;
    2d94:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2d96:	b942      	cbnz	r2, 2daa <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    2d98:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    2d9a:	2a7f      	cmp	r2, #127	; 0x7f
    2d9c:	d905      	bls.n	2daa <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    2d9e:	4a08      	ldr	r2, [pc, #32]	; (2dc0 <update_cache+0x48>)
    2da0:	61d3      	str	r3, [r2, #28]
    2da2:	e00a      	b.n	2dba <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    2da4:	4b06      	ldr	r3, [pc, #24]	; (2dc0 <update_cache+0x48>)
    2da6:	68dd      	ldr	r5, [r3, #12]
    2da8:	e7ed      	b.n	2d86 <update_cache+0xe>
		if (thread != _current) {
    2daa:	4b05      	ldr	r3, [pc, #20]	; (2dc0 <update_cache+0x48>)
    2dac:	689b      	ldr	r3, [r3, #8]
    2dae:	42ab      	cmp	r3, r5
    2db0:	d001      	beq.n	2db6 <update_cache+0x3e>
			z_reset_time_slice();
    2db2:	f7ff ff5d 	bl	2c70 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    2db6:	4b02      	ldr	r3, [pc, #8]	; (2dc0 <update_cache+0x48>)
    2db8:	61dd      	str	r5, [r3, #28]
}
    2dba:	bd38      	pop	{r3, r4, r5, pc}
    2dbc:	20000850 	.word	0x20000850
    2dc0:	20000830 	.word	0x20000830

00002dc4 <move_thread_to_end_of_prio_q>:
{
    2dc4:	b538      	push	{r3, r4, r5, lr}
    2dc6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    2dc8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    2dca:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2dce:	2b00      	cmp	r3, #0
    2dd0:	db28      	blt.n	2e24 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    2dd2:	7b6b      	ldrb	r3, [r5, #13]
    2dd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2dd8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    2dda:	4b1a      	ldr	r3, [pc, #104]	; (2e44 <move_thread_to_end_of_prio_q+0x80>)
    2ddc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2de0:	429c      	cmp	r4, r3
    2de2:	d02d      	beq.n	2e40 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2de4:	b16c      	cbz	r4, 2e02 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    2de6:	4621      	mov	r1, r4
    2de8:	4628      	mov	r0, r5
    2dea:	f001 fd16 	bl	481a <z_sched_prio_cmp>
    2dee:	2800      	cmp	r0, #0
    2df0:	dc20      	bgt.n	2e34 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2df2:	b134      	cbz	r4, 2e02 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    2df4:	4b13      	ldr	r3, [pc, #76]	; (2e44 <move_thread_to_end_of_prio_q+0x80>)
    2df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2df8:	429c      	cmp	r4, r3
    2dfa:	d002      	beq.n	2e02 <move_thread_to_end_of_prio_q+0x3e>
    2dfc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2dfe:	2c00      	cmp	r4, #0
    2e00:	d1f0      	bne.n	2de4 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    2e02:	4b10      	ldr	r3, [pc, #64]	; (2e44 <move_thread_to_end_of_prio_q+0x80>)
    2e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    2e06:	f103 0120 	add.w	r1, r3, #32
    2e0a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    2e0c:	606a      	str	r2, [r5, #4]

	tail->next = node;
    2e0e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    2e10:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    2e12:	4b0c      	ldr	r3, [pc, #48]	; (2e44 <move_thread_to_end_of_prio_q+0x80>)
    2e14:	6898      	ldr	r0, [r3, #8]
    2e16:	42a8      	cmp	r0, r5
    2e18:	bf14      	ite	ne
    2e1a:	2000      	movne	r0, #0
    2e1c:	2001      	moveq	r0, #1
    2e1e:	f7ff ffab 	bl	2d78 <update_cache>
}
    2e22:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2e24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    2e28:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    2e2a:	4601      	mov	r1, r0
    2e2c:	4806      	ldr	r0, [pc, #24]	; (2e48 <move_thread_to_end_of_prio_q+0x84>)
    2e2e:	f001 fd13 	bl	4858 <z_priq_dumb_remove>
}
    2e32:	e7ce      	b.n	2dd2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    2e34:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    2e36:	606b      	str	r3, [r5, #4]
	node->next = successor;
    2e38:	602c      	str	r4, [r5, #0]
	prev->next = node;
    2e3a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    2e3c:	6065      	str	r5, [r4, #4]
}
    2e3e:	e7e8      	b.n	2e12 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2e40:	2400      	movs	r4, #0
    2e42:	e7cf      	b.n	2de4 <move_thread_to_end_of_prio_q+0x20>
    2e44:	20000830 	.word	0x20000830
    2e48:	20000850 	.word	0x20000850

00002e4c <z_time_slice>:
{
    2e4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    2e4e:	f04f 0320 	mov.w	r3, #32
    2e52:	f3ef 8411 	mrs	r4, BASEPRI
    2e56:	f383 8812 	msr	BASEPRI_MAX, r3
    2e5a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    2e5e:	4b21      	ldr	r3, [pc, #132]	; (2ee4 <z_time_slice+0x98>)
    2e60:	689b      	ldr	r3, [r3, #8]
    2e62:	4a21      	ldr	r2, [pc, #132]	; (2ee8 <z_time_slice+0x9c>)
    2e64:	6812      	ldr	r2, [r2, #0]
    2e66:	4293      	cmp	r3, r2
    2e68:	d017      	beq.n	2e9a <z_time_slice+0x4e>
	pending_current = NULL;
    2e6a:	4a1f      	ldr	r2, [pc, #124]	; (2ee8 <z_time_slice+0x9c>)
    2e6c:	2100      	movs	r1, #0
    2e6e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    2e70:	4a1e      	ldr	r2, [pc, #120]	; (2eec <z_time_slice+0xa0>)
    2e72:	6812      	ldr	r2, [r2, #0]
    2e74:	b372      	cbz	r2, 2ed4 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    2e76:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    2e78:	2a7f      	cmp	r2, #127	; 0x7f
    2e7a:	d815      	bhi.n	2ea8 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
    2e7c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    2e7e:	f012 0f1f 	tst.w	r2, #31
    2e82:	d11b      	bne.n	2ebc <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2e84:	f993 100e 	ldrsb.w	r1, [r3, #14]
    2e88:	4a19      	ldr	r2, [pc, #100]	; (2ef0 <z_time_slice+0xa4>)
    2e8a:	6812      	ldr	r2, [r2, #0]
    2e8c:	4291      	cmp	r1, r2
    2e8e:	db17      	blt.n	2ec0 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    2e90:	4a18      	ldr	r2, [pc, #96]	; (2ef4 <z_time_slice+0xa8>)
    2e92:	4293      	cmp	r3, r2
    2e94:	d016      	beq.n	2ec4 <z_time_slice+0x78>
    2e96:	2201      	movs	r2, #1
    2e98:	e007      	b.n	2eaa <z_time_slice+0x5e>
		z_reset_time_slice();
    2e9a:	f7ff fee9 	bl	2c70 <z_reset_time_slice>
	__asm__ volatile(
    2e9e:	f384 8811 	msr	BASEPRI, r4
    2ea2:	f3bf 8f6f 	isb	sy
		return;
    2ea6:	e01c      	b.n	2ee2 <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
    2ea8:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
    2eaa:	b19a      	cbz	r2, 2ed4 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
    2eac:	4a0d      	ldr	r2, [pc, #52]	; (2ee4 <z_time_slice+0x98>)
    2eae:	6912      	ldr	r2, [r2, #16]
    2eb0:	4282      	cmp	r2, r0
    2eb2:	dd09      	ble.n	2ec8 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
    2eb4:	1a10      	subs	r0, r2, r0
    2eb6:	4b0b      	ldr	r3, [pc, #44]	; (2ee4 <z_time_slice+0x98>)
    2eb8:	6118      	str	r0, [r3, #16]
    2eba:	e00e      	b.n	2eda <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
    2ebc:	2200      	movs	r2, #0
    2ebe:	e7f4      	b.n	2eaa <z_time_slice+0x5e>
    2ec0:	2200      	movs	r2, #0
    2ec2:	e7f2      	b.n	2eaa <z_time_slice+0x5e>
    2ec4:	2200      	movs	r2, #0
    2ec6:	e7f0      	b.n	2eaa <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
    2ec8:	4618      	mov	r0, r3
    2eca:	f7ff ff7b 	bl	2dc4 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    2ece:	f7ff fecf 	bl	2c70 <z_reset_time_slice>
    2ed2:	e002      	b.n	2eda <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
    2ed4:	4b03      	ldr	r3, [pc, #12]	; (2ee4 <z_time_slice+0x98>)
    2ed6:	2200      	movs	r2, #0
    2ed8:	611a      	str	r2, [r3, #16]
    2eda:	f384 8811 	msr	BASEPRI, r4
    2ede:	f3bf 8f6f 	isb	sy
}
    2ee2:	bd10      	pop	{r4, pc}
    2ee4:	20000830 	.word	0x20000830
    2ee8:	2000085c 	.word	0x2000085c
    2eec:	20000864 	.word	0x20000864
    2ef0:	20000860 	.word	0x20000860
    2ef4:	20000108 	.word	0x20000108

00002ef8 <ready_thread>:
{
    2ef8:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    2efa:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    2efc:	f990 200d 	ldrsb.w	r2, [r0, #13]
    2f00:	2a00      	cmp	r2, #0
    2f02:	db2d      	blt.n	2f60 <ready_thread+0x68>
    2f04:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    2f06:	f013 0f1f 	tst.w	r3, #31
    2f0a:	d105      	bne.n	2f18 <ready_thread+0x20>
	return node->next != NULL;
    2f0c:	6982      	ldr	r2, [r0, #24]
    2f0e:	b10a      	cbz	r2, 2f14 <ready_thread+0x1c>
    2f10:	2200      	movs	r2, #0
    2f12:	e002      	b.n	2f1a <ready_thread+0x22>
    2f14:	2201      	movs	r2, #1
    2f16:	e000      	b.n	2f1a <ready_thread+0x22>
    2f18:	2200      	movs	r2, #0
    2f1a:	b30a      	cbz	r2, 2f60 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    2f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f20:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    2f22:	4b14      	ldr	r3, [pc, #80]	; (2f74 <ready_thread+0x7c>)
    2f24:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2f28:	429d      	cmp	r5, r3
    2f2a:	d020      	beq.n	2f6e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2f2c:	b16d      	cbz	r5, 2f4a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    2f2e:	4629      	mov	r1, r5
    2f30:	4620      	mov	r0, r4
    2f32:	f001 fc72 	bl	481a <z_sched_prio_cmp>
    2f36:	2800      	cmp	r0, #0
    2f38:	dc13      	bgt.n	2f62 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2f3a:	b135      	cbz	r5, 2f4a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    2f3c:	4b0d      	ldr	r3, [pc, #52]	; (2f74 <ready_thread+0x7c>)
    2f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f40:	429d      	cmp	r5, r3
    2f42:	d002      	beq.n	2f4a <ready_thread+0x52>
    2f44:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2f46:	2d00      	cmp	r5, #0
    2f48:	d1f0      	bne.n	2f2c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    2f4a:	4b0a      	ldr	r3, [pc, #40]	; (2f74 <ready_thread+0x7c>)
    2f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    2f4e:	f103 0120 	add.w	r1, r3, #32
    2f52:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    2f54:	6062      	str	r2, [r4, #4]
	tail->next = node;
    2f56:	6014      	str	r4, [r2, #0]
	list->tail = node;
    2f58:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    2f5a:	2000      	movs	r0, #0
    2f5c:	f7ff ff0c 	bl	2d78 <update_cache>
}
    2f60:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    2f62:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    2f64:	6063      	str	r3, [r4, #4]
	node->next = successor;
    2f66:	6025      	str	r5, [r4, #0]
	prev->next = node;
    2f68:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    2f6a:	606c      	str	r4, [r5, #4]
}
    2f6c:	e7f5      	b.n	2f5a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2f6e:	2500      	movs	r5, #0
    2f70:	e7dc      	b.n	2f2c <ready_thread+0x34>
    2f72:	bf00      	nop
    2f74:	20000830 	.word	0x20000830

00002f78 <z_sched_start>:
{
    2f78:	b510      	push	{r4, lr}
	__asm__ volatile(
    2f7a:	f04f 0320 	mov.w	r3, #32
    2f7e:	f3ef 8411 	mrs	r4, BASEPRI
    2f82:	f383 8812 	msr	BASEPRI_MAX, r3
    2f86:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    2f8a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    2f8c:	f013 0f04 	tst.w	r3, #4
    2f90:	d104      	bne.n	2f9c <z_sched_start+0x24>
	__asm__ volatile(
    2f92:	f384 8811 	msr	BASEPRI, r4
    2f96:	f3bf 8f6f 	isb	sy
}
    2f9a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2f9c:	f023 0304 	bic.w	r3, r3, #4
    2fa0:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    2fa2:	f7ff ffa9 	bl	2ef8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2fa6:	4621      	mov	r1, r4
    2fa8:	4801      	ldr	r0, [pc, #4]	; (2fb0 <z_sched_start+0x38>)
    2faa:	f7ff feaf 	bl	2d0c <z_reschedule>
    2fae:	e7f4      	b.n	2f9a <z_sched_start+0x22>
    2fb0:	20000860 	.word	0x20000860

00002fb4 <unready_thread>:
{
    2fb4:	b510      	push	{r4, lr}
    2fb6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    2fb8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    2fba:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	db08      	blt.n	2fd4 <unready_thread+0x20>
	update_cache(thread == _current);
    2fc2:	4b08      	ldr	r3, [pc, #32]	; (2fe4 <unready_thread+0x30>)
    2fc4:	6898      	ldr	r0, [r3, #8]
    2fc6:	42a0      	cmp	r0, r4
    2fc8:	bf14      	ite	ne
    2fca:	2000      	movne	r0, #0
    2fcc:	2001      	moveq	r0, #1
    2fce:	f7ff fed3 	bl	2d78 <update_cache>
}
    2fd2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2fd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    2fd8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    2fda:	4601      	mov	r1, r0
    2fdc:	4802      	ldr	r0, [pc, #8]	; (2fe8 <unready_thread+0x34>)
    2fde:	f001 fc3b 	bl	4858 <z_priq_dumb_remove>
}
    2fe2:	e7ee      	b.n	2fc2 <unready_thread+0xe>
    2fe4:	20000830 	.word	0x20000830
    2fe8:	20000850 	.word	0x20000850

00002fec <z_pend_curr>:
{
    2fec:	b510      	push	{r4, lr}
    2fee:	460c      	mov	r4, r1
    2ff0:	4611      	mov	r1, r2
	pending_current = _current;
    2ff2:	4b06      	ldr	r3, [pc, #24]	; (300c <z_pend_curr+0x20>)
    2ff4:	6898      	ldr	r0, [r3, #8]
    2ff6:	4b06      	ldr	r3, [pc, #24]	; (3010 <z_pend_curr+0x24>)
    2ff8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    2ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2ffe:	f001 fcb8 	bl	4972 <pend>
    3002:	4620      	mov	r0, r4
    3004:	f7fe f9da 	bl	13bc <arch_swap>
}
    3008:	bd10      	pop	{r4, pc}
    300a:	bf00      	nop
    300c:	20000830 	.word	0x20000830
    3010:	2000085c 	.word	0x2000085c

00003014 <z_set_prio>:
{
    3014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3018:	4604      	mov	r4, r0
    301a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    301c:	2300      	movs	r3, #0
	__asm__ volatile(
    301e:	f04f 0220 	mov.w	r2, #32
    3022:	f3ef 8811 	mrs	r8, BASEPRI
    3026:	f382 8812 	msr	BASEPRI_MAX, r2
    302a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    302e:	461f      	mov	r7, r3
    3030:	e008      	b.n	3044 <z_set_prio+0x30>
		if (need_sched) {
    3032:	f012 0701 	ands.w	r7, r2, #1
    3036:	d111      	bne.n	305c <z_set_prio+0x48>
			thread->base.prio = prio;
    3038:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
    303a:	f388 8811 	msr	BASEPRI, r8
    303e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3042:	2301      	movs	r3, #1
    3044:	461a      	mov	r2, r3
    3046:	2b00      	cmp	r3, #0
    3048:	d13d      	bne.n	30c6 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    304a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    304c:	f013 0f1f 	tst.w	r3, #31
    3050:	d1ef      	bne.n	3032 <z_set_prio+0x1e>
	return node->next != NULL;
    3052:	69a1      	ldr	r1, [r4, #24]
    3054:	2900      	cmp	r1, #0
    3056:	d1ec      	bne.n	3032 <z_set_prio+0x1e>
    3058:	2201      	movs	r2, #1
    305a:	e7ea      	b.n	3032 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    305c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3060:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3062:	f8df 9068 	ldr.w	r9, [pc, #104]	; 30cc <z_set_prio+0xb8>
    3066:	4621      	mov	r1, r4
    3068:	4648      	mov	r0, r9
    306a:	f001 fbf5 	bl	4858 <z_priq_dumb_remove>
				thread->base.prio = prio;
    306e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    3070:	7b63      	ldrb	r3, [r4, #13]
    3072:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3076:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    3078:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    307c:	454d      	cmp	r5, r9
    307e:	d020      	beq.n	30c2 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3080:	b16d      	cbz	r5, 309e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3082:	4629      	mov	r1, r5
    3084:	4620      	mov	r0, r4
    3086:	f001 fbc8 	bl	481a <z_sched_prio_cmp>
    308a:	2800      	cmp	r0, #0
    308c:	dc13      	bgt.n	30b6 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    308e:	b135      	cbz	r5, 309e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    3090:	4b0f      	ldr	r3, [pc, #60]	; (30d0 <z_set_prio+0xbc>)
    3092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3094:	429d      	cmp	r5, r3
    3096:	d002      	beq.n	309e <z_set_prio+0x8a>
    3098:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    309a:	2d00      	cmp	r5, #0
    309c:	d1f0      	bne.n	3080 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    309e:	4b0c      	ldr	r3, [pc, #48]	; (30d0 <z_set_prio+0xbc>)
    30a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    30a2:	f103 0120 	add.w	r1, r3, #32
    30a6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    30a8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    30aa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    30ac:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    30ae:	2001      	movs	r0, #1
    30b0:	f7ff fe62 	bl	2d78 <update_cache>
    30b4:	e7c1      	b.n	303a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    30b6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    30b8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    30ba:	6025      	str	r5, [r4, #0]
	prev->next = node;
    30bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    30be:	606c      	str	r4, [r5, #4]
}
    30c0:	e7f5      	b.n	30ae <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    30c2:	2500      	movs	r5, #0
    30c4:	e7dc      	b.n	3080 <z_set_prio+0x6c>
}
    30c6:	4638      	mov	r0, r7
    30c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30cc:	20000850 	.word	0x20000850
    30d0:	20000830 	.word	0x20000830

000030d4 <z_impl_k_thread_suspend>:
{
    30d4:	b538      	push	{r3, r4, r5, lr}
    30d6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    30d8:	3018      	adds	r0, #24
    30da:	f001 fcb2 	bl	4a42 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    30de:	2300      	movs	r3, #0
	__asm__ volatile(
    30e0:	f04f 0220 	mov.w	r2, #32
    30e4:	f3ef 8511 	mrs	r5, BASEPRI
    30e8:	f382 8812 	msr	BASEPRI_MAX, r2
    30ec:	f3bf 8f6f 	isb	sy
    30f0:	e010      	b.n	3114 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    30f2:	7b63      	ldrb	r3, [r4, #13]
    30f4:	f043 0310 	orr.w	r3, r3, #16
    30f8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    30fa:	4b15      	ldr	r3, [pc, #84]	; (3150 <z_impl_k_thread_suspend+0x7c>)
    30fc:	6898      	ldr	r0, [r3, #8]
    30fe:	42a0      	cmp	r0, r4
    3100:	bf14      	ite	ne
    3102:	2000      	movne	r0, #0
    3104:	2001      	moveq	r0, #1
    3106:	f7ff fe37 	bl	2d78 <update_cache>
	__asm__ volatile(
    310a:	f385 8811 	msr	BASEPRI, r5
    310e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3112:	2301      	movs	r3, #1
    3114:	b963      	cbnz	r3, 3130 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    3116:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    3118:	f994 300d 	ldrsb.w	r3, [r4, #13]
    311c:	2b00      	cmp	r3, #0
    311e:	dae8      	bge.n	30f2 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3120:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3124:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3126:	4621      	mov	r1, r4
    3128:	480a      	ldr	r0, [pc, #40]	; (3154 <z_impl_k_thread_suspend+0x80>)
    312a:	f001 fb95 	bl	4858 <z_priq_dumb_remove>
}
    312e:	e7e0      	b.n	30f2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    3130:	4b07      	ldr	r3, [pc, #28]	; (3150 <z_impl_k_thread_suspend+0x7c>)
    3132:	689b      	ldr	r3, [r3, #8]
    3134:	42a3      	cmp	r3, r4
    3136:	d000      	beq.n	313a <z_impl_k_thread_suspend+0x66>
}
    3138:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    313a:	f04f 0320 	mov.w	r3, #32
    313e:	f3ef 8011 	mrs	r0, BASEPRI
    3142:	f383 8812 	msr	BASEPRI_MAX, r3
    3146:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    314a:	f001 fb70 	bl	482e <z_reschedule_irqlock>
    314e:	e7f3      	b.n	3138 <z_impl_k_thread_suspend+0x64>
    3150:	20000830 	.word	0x20000830
    3154:	20000850 	.word	0x20000850

00003158 <k_sched_unlock>:

void k_sched_unlock(void)
{
    3158:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    315a:	2300      	movs	r3, #0
    315c:	f04f 0220 	mov.w	r2, #32
    3160:	f3ef 8411 	mrs	r4, BASEPRI
    3164:	f382 8812 	msr	BASEPRI_MAX, r2
    3168:	f3bf 8f6f 	isb	sy
    316c:	e00c      	b.n	3188 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    316e:	4b0d      	ldr	r3, [pc, #52]	; (31a4 <k_sched_unlock+0x4c>)
    3170:	689a      	ldr	r2, [r3, #8]
    3172:	7bd3      	ldrb	r3, [r2, #15]
    3174:	3301      	adds	r3, #1
    3176:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3178:	2000      	movs	r0, #0
    317a:	f7ff fdfd 	bl	2d78 <update_cache>
	__asm__ volatile(
    317e:	f384 8811 	msr	BASEPRI, r4
    3182:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3186:	2301      	movs	r3, #1
    3188:	2b00      	cmp	r3, #0
    318a:	d0f0      	beq.n	316e <k_sched_unlock+0x16>
	__asm__ volatile(
    318c:	f04f 0320 	mov.w	r3, #32
    3190:	f3ef 8011 	mrs	r0, BASEPRI
    3194:	f383 8812 	msr	BASEPRI_MAX, r3
    3198:	f3bf 8f6f 	isb	sy
    319c:	f001 fb47 	bl	482e <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    31a0:	bd10      	pop	{r4, pc}
    31a2:	bf00      	nop
    31a4:	20000830 	.word	0x20000830

000031a8 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    31a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    31aa:	7b43      	ldrb	r3, [r0, #13]
    31ac:	f013 0f08 	tst.w	r3, #8
    31b0:	d145      	bne.n	323e <end_thread+0x96>
    31b2:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    31b4:	f043 0308 	orr.w	r3, r3, #8
    31b8:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    31ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    31be:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    31c0:	f013 0f80 	tst.w	r3, #128	; 0x80
    31c4:	d12d      	bne.n	3222 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    31c6:	68ab      	ldr	r3, [r5, #8]
    31c8:	b15b      	cbz	r3, 31e2 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    31ca:	4628      	mov	r0, r5
    31cc:	f001 fb23 	bl	4816 <pended_on_thread>
    31d0:	4629      	mov	r1, r5
    31d2:	f001 fb41 	bl	4858 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    31d6:	7b6b      	ldrb	r3, [r5, #13]
    31d8:	f023 0302 	bic.w	r3, r3, #2
    31dc:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    31de:	2300      	movs	r3, #0
    31e0:	60ab      	str	r3, [r5, #8]
    31e2:	f105 0018 	add.w	r0, r5, #24
    31e6:	f001 fc2c 	bl	4a42 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    31ea:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    31ee:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    31f0:	42bc      	cmp	r4, r7
    31f2:	d01e      	beq.n	3232 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    31f4:	b1ec      	cbz	r4, 3232 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    31f6:	4620      	mov	r0, r4
    31f8:	f001 fb0d 	bl	4816 <pended_on_thread>
    31fc:	4621      	mov	r1, r4
    31fe:	f001 fb2b 	bl	4858 <z_priq_dumb_remove>
    3202:	7b63      	ldrb	r3, [r4, #13]
    3204:	f023 0302 	bic.w	r3, r3, #2
    3208:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    320a:	2600      	movs	r6, #0
    320c:	60a6      	str	r6, [r4, #8]
    320e:	f104 0018 	add.w	r0, r4, #24
    3212:	f001 fc16 	bl	4a42 <z_abort_timeout>
    3216:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    321a:	4620      	mov	r0, r4
    321c:	f7ff fe6c 	bl	2ef8 <ready_thread>
    3220:	e7e5      	b.n	31ee <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3226:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3228:	4601      	mov	r1, r0
    322a:	4805      	ldr	r0, [pc, #20]	; (3240 <end_thread+0x98>)
    322c:	f001 fb14 	bl	4858 <z_priq_dumb_remove>
}
    3230:	e7c9      	b.n	31c6 <end_thread+0x1e>
		update_cache(1);
    3232:	2001      	movs	r0, #1
    3234:	f7ff fda0 	bl	2d78 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    3238:	4628      	mov	r0, r5
    323a:	f7ff fafd 	bl	2838 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3240:	20000850 	.word	0x20000850

00003244 <z_sched_init>:
{
    3244:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    3246:	4804      	ldr	r0, [pc, #16]	; (3258 <z_sched_init+0x14>)
    3248:	f001 fbe0 	bl	4a0c <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    324c:	2100      	movs	r1, #0
    324e:	4608      	mov	r0, r1
    3250:	f7ff fd24 	bl	2c9c <k_sched_time_slice_set>
}
    3254:	bd08      	pop	{r3, pc}
    3256:	bf00      	nop
    3258:	2000084c 	.word	0x2000084c

0000325c <z_impl_k_yield>:
{
    325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    325e:	f04f 0320 	mov.w	r3, #32
    3262:	f3ef 8611 	mrs	r6, BASEPRI
    3266:	f383 8812 	msr	BASEPRI_MAX, r3
    326a:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    326e:	4c1c      	ldr	r4, [pc, #112]	; (32e0 <z_impl_k_yield+0x84>)
    3270:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3272:	7b4b      	ldrb	r3, [r1, #13]
    3274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3278:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    327a:	f104 0720 	add.w	r7, r4, #32
    327e:	4638      	mov	r0, r7
    3280:	f001 faea 	bl	4858 <z_priq_dumb_remove>
	queue_thread(_current);
    3284:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3286:	7b6b      	ldrb	r3, [r5, #13]
    3288:	f063 037f 	orn	r3, r3, #127	; 0x7f
    328c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    328e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3290:	42bc      	cmp	r4, r7
    3292:	d023      	beq.n	32dc <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3294:	b16c      	cbz	r4, 32b2 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3296:	4621      	mov	r1, r4
    3298:	4628      	mov	r0, r5
    329a:	f001 fabe 	bl	481a <z_sched_prio_cmp>
    329e:	2800      	cmp	r0, #0
    32a0:	dc16      	bgt.n	32d0 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    32a2:	b134      	cbz	r4, 32b2 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    32a4:	4b0e      	ldr	r3, [pc, #56]	; (32e0 <z_impl_k_yield+0x84>)
    32a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32a8:	429c      	cmp	r4, r3
    32aa:	d002      	beq.n	32b2 <z_impl_k_yield+0x56>
    32ac:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    32ae:	2c00      	cmp	r4, #0
    32b0:	d1f0      	bne.n	3294 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    32b2:	4b0b      	ldr	r3, [pc, #44]	; (32e0 <z_impl_k_yield+0x84>)
    32b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    32b6:	f103 0120 	add.w	r1, r3, #32
    32ba:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    32bc:	606a      	str	r2, [r5, #4]
	tail->next = node;
    32be:	6015      	str	r5, [r2, #0]
	list->tail = node;
    32c0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    32c2:	2001      	movs	r0, #1
    32c4:	f7ff fd58 	bl	2d78 <update_cache>
    32c8:	4630      	mov	r0, r6
    32ca:	f7fe f877 	bl	13bc <arch_swap>
}
    32ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    32d0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    32d2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    32d4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    32d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    32d8:	6065      	str	r5, [r4, #4]
}
    32da:	e7f2      	b.n	32c2 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    32dc:	2400      	movs	r4, #0
    32de:	e7d9      	b.n	3294 <z_impl_k_yield+0x38>
    32e0:	20000830 	.word	0x20000830

000032e4 <z_tick_sleep>:
{
    32e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    32e8:	ea50 0301 	orrs.w	r3, r0, r1
    32ec:	d038      	beq.n	3360 <z_tick_sleep+0x7c>
    32ee:	4604      	mov	r4, r0
    32f0:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    32f2:	f06f 0301 	mvn.w	r3, #1
    32f6:	1a1b      	subs	r3, r3, r0
    32f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    32fc:	eb62 0201 	sbc.w	r2, r2, r1
    3300:	2b01      	cmp	r3, #1
    3302:	f172 0300 	sbcs.w	r3, r2, #0
    3306:	db2f      	blt.n	3368 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3308:	f06f 0501 	mvn.w	r5, #1
    330c:	1a2d      	subs	r5, r5, r0
    330e:	f04f 0320 	mov.w	r3, #32
    3312:	f3ef 8811 	mrs	r8, BASEPRI
    3316:	f383 8812 	msr	BASEPRI_MAX, r3
    331a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    331e:	4f14      	ldr	r7, [pc, #80]	; (3370 <z_tick_sleep+0x8c>)
    3320:	68b8      	ldr	r0, [r7, #8]
    3322:	4b14      	ldr	r3, [pc, #80]	; (3374 <z_tick_sleep+0x90>)
    3324:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    3326:	f7ff fe45 	bl	2fb4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    332a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    332c:	4622      	mov	r2, r4
    332e:	4633      	mov	r3, r6
    3330:	4911      	ldr	r1, [pc, #68]	; (3378 <z_tick_sleep+0x94>)
    3332:	3018      	adds	r0, #24
    3334:	f000 f8de 	bl	34f4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3338:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    333a:	7b53      	ldrb	r3, [r2, #13]
    333c:	f043 0310 	orr.w	r3, r3, #16
    3340:	7353      	strb	r3, [r2, #13]
    3342:	4640      	mov	r0, r8
    3344:	f7fe f83a 	bl	13bc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3348:	f001 fbdb 	bl	4b02 <sys_clock_tick_get_32>
    334c:	1a28      	subs	r0, r5, r0
    334e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3352:	2801      	cmp	r0, #1
    3354:	f173 0300 	sbcs.w	r3, r3, #0
    3358:	da00      	bge.n	335c <z_tick_sleep+0x78>
	return 0;
    335a:	2000      	movs	r0, #0
}
    335c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    3360:	f7ff ff7c 	bl	325c <z_impl_k_yield>
		return 0;
    3364:	2000      	movs	r0, #0
    3366:	e7f9      	b.n	335c <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3368:	f001 fbcb 	bl	4b02 <sys_clock_tick_get_32>
    336c:	1905      	adds	r5, r0, r4
    336e:	e7ce      	b.n	330e <z_tick_sleep+0x2a>
    3370:	20000830 	.word	0x20000830
    3374:	2000085c 	.word	0x2000085c
    3378:	000048af 	.word	0x000048af

0000337c <z_impl_k_sleep>:
{
    337c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    337e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    3382:	bf08      	it	eq
    3384:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    3388:	d01a      	beq.n	33c0 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    338a:	f7ff ffab 	bl	32e4 <z_tick_sleep>
    338e:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    3390:	17c2      	asrs	r2, r0, #31
			return (t * to_hz + off) / from_hz;
    3392:	0151      	lsls	r1, r2, #5
    3394:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    3398:	0143      	lsls	r3, r0, #5
    339a:	1a1b      	subs	r3, r3, r0
    339c:	eb61 0102 	sbc.w	r1, r1, r2
    33a0:	0088      	lsls	r0, r1, #2
    33a2:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    33a6:	009b      	lsls	r3, r3, #2
    33a8:	eb13 030c 	adds.w	r3, r3, ip
    33ac:	eb42 0000 	adc.w	r0, r2, r0
    33b0:	00c0      	lsls	r0, r0, #3
    33b2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    33b6:	f3c3 3310 	ubfx	r3, r3, #12, #17
    33ba:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    33be:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    33c0:	4b03      	ldr	r3, [pc, #12]	; (33d0 <z_impl_k_sleep+0x54>)
    33c2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    33c4:	f7ff fe86 	bl	30d4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    33c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33cc:	e7f7      	b.n	33be <z_impl_k_sleep+0x42>
    33ce:	bf00      	nop
    33d0:	20000830 	.word	0x20000830

000033d4 <z_impl_z_current_get>:
}
    33d4:	4b01      	ldr	r3, [pc, #4]	; (33dc <z_impl_z_current_get+0x8>)
    33d6:	6898      	ldr	r0, [r3, #8]
    33d8:	4770      	bx	lr
    33da:	bf00      	nop
    33dc:	20000830 	.word	0x20000830

000033e0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    33e0:	b538      	push	{r3, r4, r5, lr}
    33e2:	f04f 0320 	mov.w	r3, #32
    33e6:	f3ef 8511 	mrs	r5, BASEPRI
    33ea:	f383 8812 	msr	BASEPRI_MAX, r3
    33ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    33f2:	7b43      	ldrb	r3, [r0, #13]
    33f4:	f013 0f08 	tst.w	r3, #8
    33f8:	d004      	beq.n	3404 <z_thread_abort+0x24>
	__asm__ volatile(
    33fa:	f385 8811 	msr	BASEPRI, r5
    33fe:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3402:	bd38      	pop	{r3, r4, r5, pc}
    3404:	4604      	mov	r4, r0
	end_thread(thread);
    3406:	f7ff fecf 	bl	31a8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    340a:	4b08      	ldr	r3, [pc, #32]	; (342c <z_thread_abort+0x4c>)
    340c:	689b      	ldr	r3, [r3, #8]
    340e:	42a3      	cmp	r3, r4
    3410:	d004      	beq.n	341c <z_thread_abort+0x3c>
    3412:	f385 8811 	msr	BASEPRI, r5
    3416:	f3bf 8f6f 	isb	sy
    341a:	e7f2      	b.n	3402 <z_thread_abort+0x22>
    341c:	f3ef 8305 	mrs	r3, IPSR
    3420:	2b00      	cmp	r3, #0
    3422:	d1f6      	bne.n	3412 <z_thread_abort+0x32>
    3424:	4628      	mov	r0, r5
    3426:	f7fd ffc9 	bl	13bc <arch_swap>
	return ret;
    342a:	e7f2      	b.n	3412 <z_thread_abort+0x32>
    342c:	20000830 	.word	0x20000830

00003430 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3430:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    3432:	4806      	ldr	r0, [pc, #24]	; (344c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    3434:	4a06      	ldr	r2, [pc, #24]	; (3450 <z_data_copy+0x20>)
    3436:	1a12      	subs	r2, r2, r0
    3438:	4906      	ldr	r1, [pc, #24]	; (3454 <z_data_copy+0x24>)
    343a:	f000 feaf 	bl	419c <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    343e:	4a06      	ldr	r2, [pc, #24]	; (3458 <z_data_copy+0x28>)
    3440:	4906      	ldr	r1, [pc, #24]	; (345c <z_data_copy+0x2c>)
    3442:	4807      	ldr	r0, [pc, #28]	; (3460 <z_data_copy+0x30>)
    3444:	f000 feaa 	bl	419c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3448:	bd08      	pop	{r3, pc}
    344a:	bf00      	nop
    344c:	20000000 	.word	0x20000000
    3450:	200000e4 	.word	0x200000e4
    3454:	00004f50 	.word	0x00004f50
    3458:	00000000 	.word	0x00000000
    345c:	00004f50 	.word	0x00004f50
    3460:	20000000 	.word	0x20000000

00003464 <first>:
	return list->head == list;
    3464:	4b03      	ldr	r3, [pc, #12]	; (3474 <first+0x10>)
    3466:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3468:	4298      	cmp	r0, r3
    346a:	d000      	beq.n	346e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    346c:	4770      	bx	lr
    346e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    3470:	e7fc      	b.n	346c <first+0x8>
    3472:	bf00      	nop
    3474:	20000028 	.word	0x20000028

00003478 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3478:	b130      	cbz	r0, 3488 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    347a:	4a04      	ldr	r2, [pc, #16]	; (348c <next+0x14>)
    347c:	6852      	ldr	r2, [r2, #4]
    347e:	4290      	cmp	r0, r2
    3480:	d001      	beq.n	3486 <next+0xe>
    3482:	6800      	ldr	r0, [r0, #0]
    3484:	4770      	bx	lr
    3486:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    3488:	4770      	bx	lr
    348a:	bf00      	nop
    348c:	20000028 	.word	0x20000028

00003490 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    3490:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3492:	4b04      	ldr	r3, [pc, #16]	; (34a4 <elapsed+0x14>)
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	b10b      	cbz	r3, 349c <elapsed+0xc>
    3498:	2000      	movs	r0, #0
}
    349a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    349c:	f7fe fec0 	bl	2220 <sys_clock_elapsed>
    34a0:	e7fb      	b.n	349a <elapsed+0xa>
    34a2:	bf00      	nop
    34a4:	20000868 	.word	0x20000868

000034a8 <next_timeout>:

static int32_t next_timeout(void)
{
    34a8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    34aa:	f7ff ffdb 	bl	3464 <first>
    34ae:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    34b0:	f7ff ffee 	bl	3490 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    34b4:	b18c      	cbz	r4, 34da <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    34b6:	6923      	ldr	r3, [r4, #16]
    34b8:	6962      	ldr	r2, [r4, #20]
    34ba:	1a1b      	subs	r3, r3, r0
    34bc:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    34c0:	2b01      	cmp	r3, #1
    34c2:	f172 0100 	sbcs.w	r1, r2, #0
    34c6:	db11      	blt.n	34ec <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    34c8:	4618      	mov	r0, r3
    34ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    34ce:	f172 0300 	sbcs.w	r3, r2, #0
    34d2:	db04      	blt.n	34de <next_timeout+0x36>
    34d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    34d8:	e001      	b.n	34de <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    34da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    34de:	4b04      	ldr	r3, [pc, #16]	; (34f0 <next_timeout+0x48>)
    34e0:	691b      	ldr	r3, [r3, #16]
    34e2:	b113      	cbz	r3, 34ea <next_timeout+0x42>
    34e4:	4283      	cmp	r3, r0
    34e6:	da00      	bge.n	34ea <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    34e8:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    34ea:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    34ec:	2000      	movs	r0, #0
    34ee:	e7f6      	b.n	34de <next_timeout+0x36>
    34f0:	20000830 	.word	0x20000830

000034f4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    34f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    34f8:	bf08      	it	eq
    34fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    34fe:	d07f      	beq.n	3600 <z_add_timeout+0x10c>
{
    3500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3504:	4604      	mov	r4, r0
    3506:	4691      	mov	r9, r2
    3508:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    350a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    350c:	2300      	movs	r3, #0
	__asm__ volatile(
    350e:	f04f 0220 	mov.w	r2, #32
    3512:	f3ef 8711 	mrs	r7, BASEPRI
    3516:	f382 8812 	msr	BASEPRI_MAX, r2
    351a:	f3bf 8f6f 	isb	sy
    351e:	e021      	b.n	3564 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    3520:	f7ff ffb6 	bl	3490 <elapsed>
    3524:	eb19 0800 	adds.w	r8, r9, r0
    3528:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    352c:	f118 0301 	adds.w	r3, r8, #1
    3530:	f140 0000 	adc.w	r0, r0, #0
    3534:	6123      	str	r3, [r4, #16]
    3536:	6160      	str	r0, [r4, #20]
    3538:	e038      	b.n	35ac <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    353a:	1a51      	subs	r1, r2, r1
    353c:	eb66 0303 	sbc.w	r3, r6, r3
    3540:	6101      	str	r1, [r0, #16]
    3542:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    3544:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    3546:	6063      	str	r3, [r4, #4]
	node->next = successor;
    3548:	6020      	str	r0, [r4, #0]
	prev->next = node;
    354a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    354c:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    354e:	2800      	cmp	r0, #0
    3550:	d040      	beq.n	35d4 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3552:	f7ff ff87 	bl	3464 <first>
    3556:	4284      	cmp	r4, r0
    3558:	d043      	beq.n	35e2 <z_add_timeout+0xee>
	__asm__ volatile(
    355a:	f387 8811 	msr	BASEPRI, r7
    355e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    3562:	2301      	movs	r3, #1
    3564:	2b00      	cmp	r3, #0
    3566:	d149      	bne.n	35fc <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    3568:	f06f 0201 	mvn.w	r2, #1
    356c:	ebb2 0209 	subs.w	r2, r2, r9
    3570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3574:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3578:	2b00      	cmp	r3, #0
    357a:	dbd1      	blt.n	3520 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    357c:	4b21      	ldr	r3, [pc, #132]	; (3604 <z_add_timeout+0x110>)
    357e:	681a      	ldr	r2, [r3, #0]
    3580:	685b      	ldr	r3, [r3, #4]
    3582:	eb19 0202 	adds.w	r2, r9, r2
    3586:	eb43 0305 	adc.w	r3, r3, r5
    358a:	f06f 0801 	mvn.w	r8, #1
    358e:	ebb8 0802 	subs.w	r8, r8, r2
    3592:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
    3596:	4641      	mov	r1, r8
    3598:	461a      	mov	r2, r3
    359a:	f1b8 0f01 	cmp.w	r8, #1
    359e:	f173 0300 	sbcs.w	r3, r3, #0
    35a2:	da01      	bge.n	35a8 <z_add_timeout+0xb4>
    35a4:	2101      	movs	r1, #1
    35a6:	2200      	movs	r2, #0
    35a8:	6121      	str	r1, [r4, #16]
    35aa:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    35ac:	f7ff ff5a 	bl	3464 <first>
    35b0:	2800      	cmp	r0, #0
    35b2:	d0cc      	beq.n	354e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
    35b4:	6902      	ldr	r2, [r0, #16]
    35b6:	6946      	ldr	r6, [r0, #20]
    35b8:	6921      	ldr	r1, [r4, #16]
    35ba:	6963      	ldr	r3, [r4, #20]
    35bc:	4291      	cmp	r1, r2
    35be:	eb73 0c06 	sbcs.w	ip, r3, r6
    35c2:	dbba      	blt.n	353a <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    35c4:	1a89      	subs	r1, r1, r2
    35c6:	eb63 0306 	sbc.w	r3, r3, r6
    35ca:	6121      	str	r1, [r4, #16]
    35cc:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    35ce:	f7ff ff53 	bl	3478 <next>
    35d2:	e7ed      	b.n	35b0 <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
    35d4:	4b0c      	ldr	r3, [pc, #48]	; (3608 <z_add_timeout+0x114>)
    35d6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    35d8:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    35da:	6062      	str	r2, [r4, #4]
	tail->next = node;
    35dc:	6014      	str	r4, [r2, #0]
	list->tail = node;
    35de:	605c      	str	r4, [r3, #4]
}
    35e0:	e7b7      	b.n	3552 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    35e2:	f7ff ff61 	bl	34a8 <next_timeout>

			if (next_time == 0 ||
    35e6:	4603      	mov	r3, r0
    35e8:	b118      	cbz	r0, 35f2 <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
    35ea:	4a08      	ldr	r2, [pc, #32]	; (360c <z_add_timeout+0x118>)
    35ec:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    35ee:	4282      	cmp	r2, r0
    35f0:	d0b3      	beq.n	355a <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
    35f2:	2100      	movs	r1, #0
    35f4:	4618      	mov	r0, r3
    35f6:	f7fe fddf 	bl	21b8 <sys_clock_set_timeout>
    35fa:	e7ae      	b.n	355a <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    35fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3600:	4770      	bx	lr
    3602:	bf00      	nop
    3604:	20000268 	.word	0x20000268
    3608:	20000028 	.word	0x20000028
    360c:	20000830 	.word	0x20000830

00003610 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3610:	b570      	push	{r4, r5, r6, lr}
    3612:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3614:	f7ff fc1a 	bl	2e4c <z_time_slice>
	__asm__ volatile(
    3618:	f04f 0320 	mov.w	r3, #32
    361c:	f3ef 8511 	mrs	r5, BASEPRI
    3620:	f383 8812 	msr	BASEPRI_MAX, r3
    3624:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3628:	4b28      	ldr	r3, [pc, #160]	; (36cc <sys_clock_announce+0xbc>)
    362a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    362c:	e020      	b.n	3670 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    362e:	4828      	ldr	r0, [pc, #160]	; (36d0 <sys_clock_announce+0xc0>)
    3630:	6801      	ldr	r1, [r0, #0]
    3632:	6846      	ldr	r6, [r0, #4]
    3634:	1889      	adds	r1, r1, r2
    3636:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    363a:	6001      	str	r1, [r0, #0]
    363c:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    363e:	1a9b      	subs	r3, r3, r2
    3640:	4a22      	ldr	r2, [pc, #136]	; (36cc <sys_clock_announce+0xbc>)
    3642:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    3644:	2200      	movs	r2, #0
    3646:	2300      	movs	r3, #0
    3648:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    364c:	4620      	mov	r0, r4
    364e:	f001 f9e1 	bl	4a14 <remove_timeout>
	__asm__ volatile(
    3652:	f385 8811 	msr	BASEPRI, r5
    3656:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    365a:	68a3      	ldr	r3, [r4, #8]
    365c:	4620      	mov	r0, r4
    365e:	4798      	blx	r3
	__asm__ volatile(
    3660:	f04f 0320 	mov.w	r3, #32
    3664:	f3ef 8511 	mrs	r5, BASEPRI
    3668:	f383 8812 	msr	BASEPRI_MAX, r3
    366c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3670:	f7ff fef8 	bl	3464 <first>
    3674:	4604      	mov	r4, r0
    3676:	b140      	cbz	r0, 368a <sys_clock_announce+0x7a>
    3678:	6902      	ldr	r2, [r0, #16]
    367a:	6941      	ldr	r1, [r0, #20]
    367c:	4b13      	ldr	r3, [pc, #76]	; (36cc <sys_clock_announce+0xbc>)
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	17d8      	asrs	r0, r3, #31
    3682:	4293      	cmp	r3, r2
    3684:	eb70 0101 	sbcs.w	r1, r0, r1
    3688:	dad1      	bge.n	362e <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    368a:	b144      	cbz	r4, 369e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    368c:	4b0f      	ldr	r3, [pc, #60]	; (36cc <sys_clock_announce+0xbc>)
    368e:	6819      	ldr	r1, [r3, #0]
    3690:	6923      	ldr	r3, [r4, #16]
    3692:	6962      	ldr	r2, [r4, #20]
    3694:	1a5b      	subs	r3, r3, r1
    3696:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    369a:	6123      	str	r3, [r4, #16]
    369c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    369e:	4a0c      	ldr	r2, [pc, #48]	; (36d0 <sys_clock_announce+0xc0>)
    36a0:	4e0a      	ldr	r6, [pc, #40]	; (36cc <sys_clock_announce+0xbc>)
    36a2:	6830      	ldr	r0, [r6, #0]
    36a4:	6813      	ldr	r3, [r2, #0]
    36a6:	6851      	ldr	r1, [r2, #4]
    36a8:	181b      	adds	r3, r3, r0
    36aa:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    36ae:	6013      	str	r3, [r2, #0]
    36b0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    36b2:	2400      	movs	r4, #0
    36b4:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    36b6:	f7ff fef7 	bl	34a8 <next_timeout>
    36ba:	4621      	mov	r1, r4
    36bc:	f7fe fd7c 	bl	21b8 <sys_clock_set_timeout>
	__asm__ volatile(
    36c0:	f385 8811 	msr	BASEPRI, r5
    36c4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    36c8:	bd70      	pop	{r4, r5, r6, pc}
    36ca:	bf00      	nop
    36cc:	20000868 	.word	0x20000868
    36d0:	20000268 	.word	0x20000268

000036d4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    36d4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    36d6:	2300      	movs	r3, #0
	__asm__ volatile(
    36d8:	f04f 0220 	mov.w	r2, #32
    36dc:	f3ef 8411 	mrs	r4, BASEPRI
    36e0:	f382 8812 	msr	BASEPRI_MAX, r2
    36e4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    36e8:	4618      	mov	r0, r3
    36ea:	4619      	mov	r1, r3
    36ec:	e00c      	b.n	3708 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
    36ee:	f7fe fd97 	bl	2220 <sys_clock_elapsed>
    36f2:	4a07      	ldr	r2, [pc, #28]	; (3710 <sys_clock_tick_get+0x3c>)
    36f4:	6813      	ldr	r3, [r2, #0]
    36f6:	6851      	ldr	r1, [r2, #4]
    36f8:	18c0      	adds	r0, r0, r3
    36fa:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    36fe:	f384 8811 	msr	BASEPRI, r4
    3702:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    3706:	2301      	movs	r3, #1
    3708:	2b00      	cmp	r3, #0
    370a:	d0f0      	beq.n	36ee <sys_clock_tick_get+0x1a>
	}
	return t;
}
    370c:	bd10      	pop	{r4, pc}
    370e:	bf00      	nop
    3710:	20000268 	.word	0x20000268

00003714 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3714:	4b03      	ldr	r3, [pc, #12]	; (3724 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3716:	e000      	b.n	371a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3718:	3318      	adds	r3, #24
	while (dev < __device_end) {
    371a:	4a03      	ldr	r2, [pc, #12]	; (3728 <z_device_state_init+0x14>)
    371c:	4293      	cmp	r3, r2
    371e:	d3fb      	bcc.n	3718 <z_device_state_init+0x4>
	}
}
    3720:	4770      	bx	lr
    3722:	bf00      	nop
    3724:	00004b54 	.word	0x00004b54
    3728:	00004b6c 	.word	0x00004b6c

0000372c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    372c:	b570      	push	{r4, r5, r6, lr}
    372e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3730:	4b11      	ldr	r3, [pc, #68]	; (3778 <z_sys_init_run_level+0x4c>)
    3732:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3736:	e009      	b.n	374c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3738:	4240      	negs	r0, r0
    373a:	e017      	b.n	376c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    373c:	68eb      	ldr	r3, [r5, #12]
    373e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3740:	68ea      	ldr	r2, [r5, #12]
    3742:	7853      	ldrb	r3, [r2, #1]
    3744:	f043 0301 	orr.w	r3, r3, #1
    3748:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    374a:	3408      	adds	r4, #8
    374c:	1c73      	adds	r3, r6, #1
    374e:	4a0a      	ldr	r2, [pc, #40]	; (3778 <z_sys_init_run_level+0x4c>)
    3750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3754:	42a3      	cmp	r3, r4
    3756:	d90d      	bls.n	3774 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3758:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    375a:	6823      	ldr	r3, [r4, #0]
    375c:	4628      	mov	r0, r5
    375e:	4798      	blx	r3
		if (dev != NULL) {
    3760:	2d00      	cmp	r5, #0
    3762:	d0f2      	beq.n	374a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3764:	2800      	cmp	r0, #0
    3766:	d0eb      	beq.n	3740 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3768:	2800      	cmp	r0, #0
    376a:	dbe5      	blt.n	3738 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    376c:	28ff      	cmp	r0, #255	; 0xff
    376e:	dde5      	ble.n	373c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3770:	20ff      	movs	r0, #255	; 0xff
    3772:	e7e3      	b.n	373c <z_sys_init_run_level+0x10>
		}
	}
}
    3774:	bd70      	pop	{r4, r5, r6, pc}
    3776:	bf00      	nop
    3778:	00004eb4 	.word	0x00004eb4

0000377c <nrf_cc3xx_platform_init_no_rng>:
    377c:	b510      	push	{r4, lr}
    377e:	4c0a      	ldr	r4, [pc, #40]	; (37a8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    3780:	6823      	ldr	r3, [r4, #0]
    3782:	b11b      	cbz	r3, 378c <nrf_cc3xx_platform_init_no_rng+0x10>
    3784:	2301      	movs	r3, #1
    3786:	6023      	str	r3, [r4, #0]
    3788:	2000      	movs	r0, #0
    378a:	bd10      	pop	{r4, pc}
    378c:	f000 f8d6 	bl	393c <CC_LibInitNoRng>
    3790:	2800      	cmp	r0, #0
    3792:	d0f7      	beq.n	3784 <nrf_cc3xx_platform_init_no_rng+0x8>
    3794:	3801      	subs	r0, #1
    3796:	2806      	cmp	r0, #6
    3798:	d803      	bhi.n	37a2 <nrf_cc3xx_platform_init_no_rng+0x26>
    379a:	4b04      	ldr	r3, [pc, #16]	; (37ac <nrf_cc3xx_platform_init_no_rng+0x30>)
    379c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    37a0:	bd10      	pop	{r4, pc}
    37a2:	4803      	ldr	r0, [pc, #12]	; (37b0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    37a4:	bd10      	pop	{r4, pc}
    37a6:	bf00      	nop
    37a8:	2000086c 	.word	0x2000086c
    37ac:	00004ec8 	.word	0x00004ec8
    37b0:	ffff8ffe 	.word	0xffff8ffe

000037b4 <nrf_cc3xx_platform_abort>:
    37b4:	f3bf 8f4f 	dsb	sy
    37b8:	4905      	ldr	r1, [pc, #20]	; (37d0 <nrf_cc3xx_platform_abort+0x1c>)
    37ba:	4b06      	ldr	r3, [pc, #24]	; (37d4 <nrf_cc3xx_platform_abort+0x20>)
    37bc:	68ca      	ldr	r2, [r1, #12]
    37be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    37c2:	4313      	orrs	r3, r2
    37c4:	60cb      	str	r3, [r1, #12]
    37c6:	f3bf 8f4f 	dsb	sy
    37ca:	bf00      	nop
    37cc:	e7fd      	b.n	37ca <nrf_cc3xx_platform_abort+0x16>
    37ce:	bf00      	nop
    37d0:	e000ed00 	.word	0xe000ed00
    37d4:	05fa0004 	.word	0x05fa0004

000037d8 <CC_PalAbort>:
    37d8:	b4f0      	push	{r4, r5, r6, r7}
    37da:	4f09      	ldr	r7, [pc, #36]	; (3800 <CC_PalAbort+0x28>)
    37dc:	4e09      	ldr	r6, [pc, #36]	; (3804 <CC_PalAbort+0x2c>)
    37de:	4c0a      	ldr	r4, [pc, #40]	; (3808 <CC_PalAbort+0x30>)
    37e0:	4a0a      	ldr	r2, [pc, #40]	; (380c <CC_PalAbort+0x34>)
    37e2:	4d0b      	ldr	r5, [pc, #44]	; (3810 <CC_PalAbort+0x38>)
    37e4:	490b      	ldr	r1, [pc, #44]	; (3814 <CC_PalAbort+0x3c>)
    37e6:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    37ea:	603b      	str	r3, [r7, #0]
    37ec:	6852      	ldr	r2, [r2, #4]
    37ee:	6033      	str	r3, [r6, #0]
    37f0:	6023      	str	r3, [r4, #0]
    37f2:	2400      	movs	r4, #0
    37f4:	602b      	str	r3, [r5, #0]
    37f6:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    37fa:	bcf0      	pop	{r4, r5, r6, r7}
    37fc:	4710      	bx	r2
    37fe:	bf00      	nop
    3800:	5002b400 	.word	0x5002b400
    3804:	5002b404 	.word	0x5002b404
    3808:	5002b408 	.word	0x5002b408
    380c:	20000030 	.word	0x20000030
    3810:	5002b40c 	.word	0x5002b40c
    3814:	5002a000 	.word	0x5002a000

00003818 <nrf_cc3xx_platform_set_abort>:
    3818:	e9d0 1200 	ldrd	r1, r2, [r0]
    381c:	4b01      	ldr	r3, [pc, #4]	; (3824 <nrf_cc3xx_platform_set_abort+0xc>)
    381e:	e9c3 1200 	strd	r1, r2, [r3]
    3822:	4770      	bx	lr
    3824:	20000030 	.word	0x20000030

00003828 <mutex_free>:
    3828:	b510      	push	{r4, lr}
    382a:	4604      	mov	r4, r0
    382c:	b130      	cbz	r0, 383c <mutex_free+0x14>
    382e:	6863      	ldr	r3, [r4, #4]
    3830:	06db      	lsls	r3, r3, #27
    3832:	d502      	bpl.n	383a <mutex_free+0x12>
    3834:	2300      	movs	r3, #0
    3836:	6023      	str	r3, [r4, #0]
    3838:	6063      	str	r3, [r4, #4]
    383a:	bd10      	pop	{r4, pc}
    383c:	4b02      	ldr	r3, [pc, #8]	; (3848 <mutex_free+0x20>)
    383e:	4803      	ldr	r0, [pc, #12]	; (384c <mutex_free+0x24>)
    3840:	685b      	ldr	r3, [r3, #4]
    3842:	4798      	blx	r3
    3844:	e7f3      	b.n	382e <mutex_free+0x6>
    3846:	bf00      	nop
    3848:	20000030 	.word	0x20000030
    384c:	00004ee4 	.word	0x00004ee4

00003850 <mutex_unlock>:
    3850:	b168      	cbz	r0, 386e <mutex_unlock+0x1e>
    3852:	6843      	ldr	r3, [r0, #4]
    3854:	b13b      	cbz	r3, 3866 <mutex_unlock+0x16>
    3856:	06db      	lsls	r3, r3, #27
    3858:	d507      	bpl.n	386a <mutex_unlock+0x1a>
    385a:	f3bf 8f5f 	dmb	sy
    385e:	2300      	movs	r3, #0
    3860:	6003      	str	r3, [r0, #0]
    3862:	4618      	mov	r0, r3
    3864:	4770      	bx	lr
    3866:	4803      	ldr	r0, [pc, #12]	; (3874 <mutex_unlock+0x24>)
    3868:	4770      	bx	lr
    386a:	4803      	ldr	r0, [pc, #12]	; (3878 <mutex_unlock+0x28>)
    386c:	4770      	bx	lr
    386e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3872:	4770      	bx	lr
    3874:	ffff8fea 	.word	0xffff8fea
    3878:	ffff8fe9 	.word	0xffff8fe9

0000387c <mutex_init>:
    387c:	b510      	push	{r4, lr}
    387e:	4604      	mov	r4, r0
    3880:	b120      	cbz	r0, 388c <mutex_init+0x10>
    3882:	2200      	movs	r2, #0
    3884:	2311      	movs	r3, #17
    3886:	6022      	str	r2, [r4, #0]
    3888:	6063      	str	r3, [r4, #4]
    388a:	bd10      	pop	{r4, pc}
    388c:	4801      	ldr	r0, [pc, #4]	; (3894 <mutex_init+0x18>)
    388e:	f7ff ffa3 	bl	37d8 <CC_PalAbort>
    3892:	e7f6      	b.n	3882 <mutex_init+0x6>
    3894:	00004f0c 	.word	0x00004f0c

00003898 <mutex_lock>:
    3898:	b1c0      	cbz	r0, 38cc <mutex_lock+0x34>
    389a:	6843      	ldr	r3, [r0, #4]
    389c:	b1a3      	cbz	r3, 38c8 <mutex_lock+0x30>
    389e:	06db      	lsls	r3, r3, #27
    38a0:	d510      	bpl.n	38c4 <mutex_lock+0x2c>
    38a2:	2201      	movs	r2, #1
    38a4:	f3bf 8f5b 	dmb	ish
    38a8:	e850 3f00 	ldrex	r3, [r0]
    38ac:	e840 2100 	strex	r1, r2, [r0]
    38b0:	2900      	cmp	r1, #0
    38b2:	d1f9      	bne.n	38a8 <mutex_lock+0x10>
    38b4:	f3bf 8f5b 	dmb	ish
    38b8:	2b01      	cmp	r3, #1
    38ba:	d0f3      	beq.n	38a4 <mutex_lock+0xc>
    38bc:	f3bf 8f5f 	dmb	sy
    38c0:	2000      	movs	r0, #0
    38c2:	4770      	bx	lr
    38c4:	4803      	ldr	r0, [pc, #12]	; (38d4 <mutex_lock+0x3c>)
    38c6:	4770      	bx	lr
    38c8:	4803      	ldr	r0, [pc, #12]	; (38d8 <mutex_lock+0x40>)
    38ca:	4770      	bx	lr
    38cc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    38d0:	4770      	bx	lr
    38d2:	bf00      	nop
    38d4:	ffff8fe9 	.word	0xffff8fe9
    38d8:	ffff8fea 	.word	0xffff8fea

000038dc <nrf_cc3xx_platform_set_mutexes>:
    38dc:	b570      	push	{r4, r5, r6, lr}
    38de:	e9d0 2300 	ldrd	r2, r3, [r0]
    38e2:	4c13      	ldr	r4, [pc, #76]	; (3930 <nrf_cc3xx_platform_set_mutexes+0x54>)
    38e4:	4d13      	ldr	r5, [pc, #76]	; (3934 <nrf_cc3xx_platform_set_mutexes+0x58>)
    38e6:	e9c4 2300 	strd	r2, r3, [r4]
    38ea:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    38ee:	e9c4 6302 	strd	r6, r3, [r4, #8]
    38f2:	4b11      	ldr	r3, [pc, #68]	; (3938 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    38f4:	6808      	ldr	r0, [r1, #0]
    38f6:	6018      	str	r0, [r3, #0]
    38f8:	6848      	ldr	r0, [r1, #4]
    38fa:	6058      	str	r0, [r3, #4]
    38fc:	6888      	ldr	r0, [r1, #8]
    38fe:	6098      	str	r0, [r3, #8]
    3900:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    3904:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    3908:	60de      	str	r6, [r3, #12]
    390a:	6118      	str	r0, [r3, #16]
    390c:	06cb      	lsls	r3, r1, #27
    390e:	d50d      	bpl.n	392c <nrf_cc3xx_platform_set_mutexes+0x50>
    3910:	2300      	movs	r3, #0
    3912:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    3916:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    391a:	f505 7088 	add.w	r0, r5, #272	; 0x110
    391e:	4790      	blx	r2
    3920:	6823      	ldr	r3, [r4, #0]
    3922:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    3926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    392a:	4718      	bx	r3
    392c:	bd70      	pop	{r4, r5, r6, pc}
    392e:	bf00      	nop
    3930:	20000040 	.word	0x20000040
    3934:	20000888 	.word	0x20000888
    3938:	20000050 	.word	0x20000050

0000393c <CC_LibInitNoRng>:
    393c:	b510      	push	{r4, lr}
    393e:	f000 f833 	bl	39a8 <CC_HalInit>
    3942:	b120      	cbz	r0, 394e <CC_LibInitNoRng+0x12>
    3944:	2403      	movs	r4, #3
    3946:	f000 f867 	bl	3a18 <CC_PalTerminate>
    394a:	4620      	mov	r0, r4
    394c:	bd10      	pop	{r4, pc}
    394e:	f000 f835 	bl	39bc <CC_PalInit>
    3952:	b990      	cbnz	r0, 397a <CC_LibInitNoRng+0x3e>
    3954:	f000 f8b0 	bl	3ab8 <CC_PalPowerSaveModeSelect>
    3958:	b990      	cbnz	r0, 3980 <CC_LibInitNoRng+0x44>
    395a:	4b0f      	ldr	r3, [pc, #60]	; (3998 <CC_LibInitNoRng+0x5c>)
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	0e1b      	lsrs	r3, r3, #24
    3960:	2bf0      	cmp	r3, #240	; 0xf0
    3962:	d108      	bne.n	3976 <CC_LibInitNoRng+0x3a>
    3964:	4a0d      	ldr	r2, [pc, #52]	; (399c <CC_LibInitNoRng+0x60>)
    3966:	4b0e      	ldr	r3, [pc, #56]	; (39a0 <CC_LibInitNoRng+0x64>)
    3968:	6812      	ldr	r2, [r2, #0]
    396a:	429a      	cmp	r2, r3
    396c:	d00a      	beq.n	3984 <CC_LibInitNoRng+0x48>
    396e:	2407      	movs	r4, #7
    3970:	f000 f81c 	bl	39ac <CC_HalTerminate>
    3974:	e7e7      	b.n	3946 <CC_LibInitNoRng+0xa>
    3976:	2406      	movs	r4, #6
    3978:	e7fa      	b.n	3970 <CC_LibInitNoRng+0x34>
    397a:	2404      	movs	r4, #4
    397c:	4620      	mov	r0, r4
    397e:	bd10      	pop	{r4, pc}
    3980:	2400      	movs	r4, #0
    3982:	e7f5      	b.n	3970 <CC_LibInitNoRng+0x34>
    3984:	2001      	movs	r0, #1
    3986:	f000 f897 	bl	3ab8 <CC_PalPowerSaveModeSelect>
    398a:	4604      	mov	r4, r0
    398c:	2800      	cmp	r0, #0
    398e:	d1f7      	bne.n	3980 <CC_LibInitNoRng+0x44>
    3990:	4b04      	ldr	r3, [pc, #16]	; (39a4 <CC_LibInitNoRng+0x68>)
    3992:	6018      	str	r0, [r3, #0]
    3994:	e7d9      	b.n	394a <CC_LibInitNoRng+0xe>
    3996:	bf00      	nop
    3998:	5002b928 	.word	0x5002b928
    399c:	5002ba24 	.word	0x5002ba24
    39a0:	20e00000 	.word	0x20e00000
    39a4:	5002ba0c 	.word	0x5002ba0c

000039a8 <CC_HalInit>:
    39a8:	2000      	movs	r0, #0
    39aa:	4770      	bx	lr

000039ac <CC_HalTerminate>:
    39ac:	2000      	movs	r0, #0
    39ae:	4770      	bx	lr

000039b0 <CC_HalMaskInterrupt>:
    39b0:	4b01      	ldr	r3, [pc, #4]	; (39b8 <CC_HalMaskInterrupt+0x8>)
    39b2:	6018      	str	r0, [r3, #0]
    39b4:	4770      	bx	lr
    39b6:	bf00      	nop
    39b8:	5002ba04 	.word	0x5002ba04

000039bc <CC_PalInit>:
    39bc:	b510      	push	{r4, lr}
    39be:	4811      	ldr	r0, [pc, #68]	; (3a04 <CC_PalInit+0x48>)
    39c0:	f000 f848 	bl	3a54 <CC_PalMutexCreate>
    39c4:	b100      	cbz	r0, 39c8 <CC_PalInit+0xc>
    39c6:	bd10      	pop	{r4, pc}
    39c8:	480f      	ldr	r0, [pc, #60]	; (3a08 <CC_PalInit+0x4c>)
    39ca:	f000 f843 	bl	3a54 <CC_PalMutexCreate>
    39ce:	2800      	cmp	r0, #0
    39d0:	d1f9      	bne.n	39c6 <CC_PalInit+0xa>
    39d2:	4c0e      	ldr	r4, [pc, #56]	; (3a0c <CC_PalInit+0x50>)
    39d4:	4620      	mov	r0, r4
    39d6:	f000 f83d 	bl	3a54 <CC_PalMutexCreate>
    39da:	2800      	cmp	r0, #0
    39dc:	d1f3      	bne.n	39c6 <CC_PalInit+0xa>
    39de:	4b0c      	ldr	r3, [pc, #48]	; (3a10 <CC_PalInit+0x54>)
    39e0:	480c      	ldr	r0, [pc, #48]	; (3a14 <CC_PalInit+0x58>)
    39e2:	601c      	str	r4, [r3, #0]
    39e4:	f000 f836 	bl	3a54 <CC_PalMutexCreate>
    39e8:	4601      	mov	r1, r0
    39ea:	2800      	cmp	r0, #0
    39ec:	d1eb      	bne.n	39c6 <CC_PalInit+0xa>
    39ee:	f000 f82d 	bl	3a4c <CC_PalDmaInit>
    39f2:	4604      	mov	r4, r0
    39f4:	b108      	cbz	r0, 39fa <CC_PalInit+0x3e>
    39f6:	4620      	mov	r0, r4
    39f8:	bd10      	pop	{r4, pc}
    39fa:	f000 f83f 	bl	3a7c <CC_PalPowerSaveModeInit>
    39fe:	4620      	mov	r0, r4
    3a00:	e7fa      	b.n	39f8 <CC_PalInit+0x3c>
    3a02:	bf00      	nop
    3a04:	20000088 	.word	0x20000088
    3a08:	2000007c 	.word	0x2000007c
    3a0c:	20000084 	.word	0x20000084
    3a10:	2000008c 	.word	0x2000008c
    3a14:	20000080 	.word	0x20000080

00003a18 <CC_PalTerminate>:
    3a18:	b508      	push	{r3, lr}
    3a1a:	4808      	ldr	r0, [pc, #32]	; (3a3c <CC_PalTerminate+0x24>)
    3a1c:	f000 f824 	bl	3a68 <CC_PalMutexDestroy>
    3a20:	4807      	ldr	r0, [pc, #28]	; (3a40 <CC_PalTerminate+0x28>)
    3a22:	f000 f821 	bl	3a68 <CC_PalMutexDestroy>
    3a26:	4807      	ldr	r0, [pc, #28]	; (3a44 <CC_PalTerminate+0x2c>)
    3a28:	f000 f81e 	bl	3a68 <CC_PalMutexDestroy>
    3a2c:	4806      	ldr	r0, [pc, #24]	; (3a48 <CC_PalTerminate+0x30>)
    3a2e:	f000 f81b 	bl	3a68 <CC_PalMutexDestroy>
    3a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3a36:	f000 b80b 	b.w	3a50 <CC_PalDmaTerminate>
    3a3a:	bf00      	nop
    3a3c:	20000088 	.word	0x20000088
    3a40:	2000007c 	.word	0x2000007c
    3a44:	20000084 	.word	0x20000084
    3a48:	20000080 	.word	0x20000080

00003a4c <CC_PalDmaInit>:
    3a4c:	2000      	movs	r0, #0
    3a4e:	4770      	bx	lr

00003a50 <CC_PalDmaTerminate>:
    3a50:	4770      	bx	lr
    3a52:	bf00      	nop

00003a54 <CC_PalMutexCreate>:
    3a54:	b508      	push	{r3, lr}
    3a56:	4b03      	ldr	r3, [pc, #12]	; (3a64 <CC_PalMutexCreate+0x10>)
    3a58:	6802      	ldr	r2, [r0, #0]
    3a5a:	681b      	ldr	r3, [r3, #0]
    3a5c:	6810      	ldr	r0, [r2, #0]
    3a5e:	4798      	blx	r3
    3a60:	2000      	movs	r0, #0
    3a62:	bd08      	pop	{r3, pc}
    3a64:	20000040 	.word	0x20000040

00003a68 <CC_PalMutexDestroy>:
    3a68:	b508      	push	{r3, lr}
    3a6a:	4b03      	ldr	r3, [pc, #12]	; (3a78 <CC_PalMutexDestroy+0x10>)
    3a6c:	6802      	ldr	r2, [r0, #0]
    3a6e:	685b      	ldr	r3, [r3, #4]
    3a70:	6810      	ldr	r0, [r2, #0]
    3a72:	4798      	blx	r3
    3a74:	2000      	movs	r0, #0
    3a76:	bd08      	pop	{r3, pc}
    3a78:	20000040 	.word	0x20000040

00003a7c <CC_PalPowerSaveModeInit>:
    3a7c:	b570      	push	{r4, r5, r6, lr}
    3a7e:	4c09      	ldr	r4, [pc, #36]	; (3aa4 <CC_PalPowerSaveModeInit+0x28>)
    3a80:	4d09      	ldr	r5, [pc, #36]	; (3aa8 <CC_PalPowerSaveModeInit+0x2c>)
    3a82:	6920      	ldr	r0, [r4, #16]
    3a84:	68ab      	ldr	r3, [r5, #8]
    3a86:	4798      	blx	r3
    3a88:	b118      	cbz	r0, 3a92 <CC_PalPowerSaveModeInit+0x16>
    3a8a:	4b08      	ldr	r3, [pc, #32]	; (3aac <CC_PalPowerSaveModeInit+0x30>)
    3a8c:	4808      	ldr	r0, [pc, #32]	; (3ab0 <CC_PalPowerSaveModeInit+0x34>)
    3a8e:	685b      	ldr	r3, [r3, #4]
    3a90:	4798      	blx	r3
    3a92:	4a08      	ldr	r2, [pc, #32]	; (3ab4 <CC_PalPowerSaveModeInit+0x38>)
    3a94:	68eb      	ldr	r3, [r5, #12]
    3a96:	6920      	ldr	r0, [r4, #16]
    3a98:	2100      	movs	r1, #0
    3a9a:	6011      	str	r1, [r2, #0]
    3a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3aa0:	4718      	bx	r3
    3aa2:	bf00      	nop
    3aa4:	20000050 	.word	0x20000050
    3aa8:	20000040 	.word	0x20000040
    3aac:	20000030 	.word	0x20000030
    3ab0:	00004f30 	.word	0x00004f30
    3ab4:	20000880 	.word	0x20000880

00003ab8 <CC_PalPowerSaveModeSelect>:
    3ab8:	b570      	push	{r4, r5, r6, lr}
    3aba:	4d1a      	ldr	r5, [pc, #104]	; (3b24 <CC_PalPowerSaveModeSelect+0x6c>)
    3abc:	4e1a      	ldr	r6, [pc, #104]	; (3b28 <CC_PalPowerSaveModeSelect+0x70>)
    3abe:	4604      	mov	r4, r0
    3ac0:	68b2      	ldr	r2, [r6, #8]
    3ac2:	6928      	ldr	r0, [r5, #16]
    3ac4:	4790      	blx	r2
    3ac6:	b9f0      	cbnz	r0, 3b06 <CC_PalPowerSaveModeSelect+0x4e>
    3ac8:	b15c      	cbz	r4, 3ae2 <CC_PalPowerSaveModeSelect+0x2a>
    3aca:	4c18      	ldr	r4, [pc, #96]	; (3b2c <CC_PalPowerSaveModeSelect+0x74>)
    3acc:	6823      	ldr	r3, [r4, #0]
    3ace:	b1ab      	cbz	r3, 3afc <CC_PalPowerSaveModeSelect+0x44>
    3ad0:	2b01      	cmp	r3, #1
    3ad2:	d01a      	beq.n	3b0a <CC_PalPowerSaveModeSelect+0x52>
    3ad4:	3b01      	subs	r3, #1
    3ad6:	6023      	str	r3, [r4, #0]
    3ad8:	6928      	ldr	r0, [r5, #16]
    3ada:	68f3      	ldr	r3, [r6, #12]
    3adc:	4798      	blx	r3
    3ade:	2000      	movs	r0, #0
    3ae0:	bd70      	pop	{r4, r5, r6, pc}
    3ae2:	4c12      	ldr	r4, [pc, #72]	; (3b2c <CC_PalPowerSaveModeSelect+0x74>)
    3ae4:	6821      	ldr	r1, [r4, #0]
    3ae6:	b939      	cbnz	r1, 3af8 <CC_PalPowerSaveModeSelect+0x40>
    3ae8:	4b11      	ldr	r3, [pc, #68]	; (3b30 <CC_PalPowerSaveModeSelect+0x78>)
    3aea:	4a12      	ldr	r2, [pc, #72]	; (3b34 <CC_PalPowerSaveModeSelect+0x7c>)
    3aec:	2001      	movs	r0, #1
    3aee:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    3af2:	6813      	ldr	r3, [r2, #0]
    3af4:	2b00      	cmp	r3, #0
    3af6:	d1fc      	bne.n	3af2 <CC_PalPowerSaveModeSelect+0x3a>
    3af8:	3101      	adds	r1, #1
    3afa:	6021      	str	r1, [r4, #0]
    3afc:	68f3      	ldr	r3, [r6, #12]
    3afe:	6928      	ldr	r0, [r5, #16]
    3b00:	4798      	blx	r3
    3b02:	2000      	movs	r0, #0
    3b04:	bd70      	pop	{r4, r5, r6, pc}
    3b06:	480c      	ldr	r0, [pc, #48]	; (3b38 <CC_PalPowerSaveModeSelect+0x80>)
    3b08:	bd70      	pop	{r4, r5, r6, pc}
    3b0a:	4a0a      	ldr	r2, [pc, #40]	; (3b34 <CC_PalPowerSaveModeSelect+0x7c>)
    3b0c:	6813      	ldr	r3, [r2, #0]
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d1fc      	bne.n	3b0c <CC_PalPowerSaveModeSelect+0x54>
    3b12:	4a07      	ldr	r2, [pc, #28]	; (3b30 <CC_PalPowerSaveModeSelect+0x78>)
    3b14:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    3b18:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    3b1c:	f7ff ff48 	bl	39b0 <CC_HalMaskInterrupt>
    3b20:	6823      	ldr	r3, [r4, #0]
    3b22:	e7d7      	b.n	3ad4 <CC_PalPowerSaveModeSelect+0x1c>
    3b24:	20000050 	.word	0x20000050
    3b28:	20000040 	.word	0x20000040
    3b2c:	20000880 	.word	0x20000880
    3b30:	5002a000 	.word	0x5002a000
    3b34:	5002b910 	.word	0x5002b910
    3b38:	ffff8fe9 	.word	0xffff8fe9

00003b3c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    3b3c:	4770      	bx	lr

00003b3e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3b3e:	4602      	mov	r2, r0
    3b40:	b158      	cbz	r0, 3b5a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3b42:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3b44:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3b48:	2b01      	cmp	r3, #1
    3b4a:	d003      	beq.n	3b54 <sys_notify_validate+0x16>
    3b4c:	2b03      	cmp	r3, #3
    3b4e:	d107      	bne.n	3b60 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3b50:	6803      	ldr	r3, [r0, #0]
    3b52:	b143      	cbz	r3, 3b66 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3b54:	2000      	movs	r0, #0
    3b56:	6090      	str	r0, [r2, #8]
    3b58:	4770      	bx	lr
		return -EINVAL;
    3b5a:	f06f 0015 	mvn.w	r0, #21
    3b5e:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    3b60:	f06f 0015 	mvn.w	r0, #21
    3b64:	4770      	bx	lr
			rv = -EINVAL;
    3b66:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3b6a:	4770      	bx	lr

00003b6c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    3b6c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3b6e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3b70:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3b74:	6081      	str	r1, [r0, #8]
	switch (method) {
    3b76:	2a03      	cmp	r2, #3
    3b78:	d103      	bne.n	3b82 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3b7a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3b7c:	2200      	movs	r2, #0
    3b7e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3b80:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    3b82:	2000      	movs	r0, #0
    3b84:	e7fa      	b.n	3b7c <sys_notify_finalize+0x10>

00003b86 <arch_printk_char_out>:
}
    3b86:	2000      	movs	r0, #0
    3b88:	4770      	bx	lr

00003b8a <str_out>:
{
    3b8a:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    3b8c:	680c      	ldr	r4, [r1, #0]
    3b8e:	b154      	cbz	r4, 3ba6 <str_out+0x1c>
    3b90:	688a      	ldr	r2, [r1, #8]
    3b92:	684b      	ldr	r3, [r1, #4]
    3b94:	429a      	cmp	r2, r3
    3b96:	da06      	bge.n	3ba6 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    3b98:	3b01      	subs	r3, #1
    3b9a:	429a      	cmp	r2, r3
    3b9c:	d008      	beq.n	3bb0 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    3b9e:	1c53      	adds	r3, r2, #1
    3ba0:	608b      	str	r3, [r1, #8]
    3ba2:	54a0      	strb	r0, [r4, r2]
    3ba4:	e002      	b.n	3bac <str_out+0x22>
		ctx->count++;
    3ba6:	688b      	ldr	r3, [r1, #8]
    3ba8:	3301      	adds	r3, #1
    3baa:	608b      	str	r3, [r1, #8]
}
    3bac:	bc10      	pop	{r4}
    3bae:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    3bb0:	1c53      	adds	r3, r2, #1
    3bb2:	608b      	str	r3, [r1, #8]
    3bb4:	2300      	movs	r3, #0
    3bb6:	54a3      	strb	r3, [r4, r2]
    3bb8:	e7f8      	b.n	3bac <str_out+0x22>

00003bba <printk>:
{
    3bba:	b40f      	push	{r0, r1, r2, r3}
    3bbc:	b500      	push	{lr}
    3bbe:	b083      	sub	sp, #12
    3bc0:	a904      	add	r1, sp, #16
    3bc2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3bc6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    3bc8:	f7fc fc40 	bl	44c <vprintk>
}
    3bcc:	b003      	add	sp, #12
    3bce:	f85d eb04 	ldr.w	lr, [sp], #4
    3bd2:	b004      	add	sp, #16
    3bd4:	4770      	bx	lr

00003bd6 <snprintk>:
{
    3bd6:	b40c      	push	{r2, r3}
    3bd8:	b500      	push	{lr}
    3bda:	b083      	sub	sp, #12
    3bdc:	ab04      	add	r3, sp, #16
    3bde:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    3be2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    3be4:	f7fc fc42 	bl	46c <vsnprintk>
}
    3be8:	b003      	add	sp, #12
    3bea:	f85d eb04 	ldr.w	lr, [sp], #4
    3bee:	b002      	add	sp, #8
    3bf0:	4770      	bx	lr

00003bf2 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    3bf2:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3bf6:	8b01      	ldrh	r1, [r0, #24]
    3bf8:	f021 0107 	bic.w	r1, r1, #7
    3bfc:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    3bfe:	8301      	strh	r1, [r0, #24]
}
    3c00:	4770      	bx	lr

00003c02 <notify_monitors>:
{
    3c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c06:	4606      	mov	r6, r0
    3c08:	460f      	mov	r7, r1
    3c0a:	4690      	mov	r8, r2
	return list->head;
    3c0c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3c0e:	b119      	cbz	r1, 3c18 <notify_monitors+0x16>
    3c10:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    3c12:	b131      	cbz	r1, 3c22 <notify_monitors+0x20>
	return node->next;
    3c14:	680c      	ldr	r4, [r1, #0]
    3c16:	e004      	b.n	3c22 <notify_monitors+0x20>
    3c18:	460c      	mov	r4, r1
    3c1a:	e002      	b.n	3c22 <notify_monitors+0x20>
    3c1c:	4623      	mov	r3, r4
    3c1e:	4621      	mov	r1, r4
    3c20:	461c      	mov	r4, r3
    3c22:	b159      	cbz	r1, 3c3c <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    3c24:	684d      	ldr	r5, [r1, #4]
    3c26:	4643      	mov	r3, r8
    3c28:	463a      	mov	r2, r7
    3c2a:	4630      	mov	r0, r6
    3c2c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3c2e:	2c00      	cmp	r4, #0
    3c30:	d0f4      	beq.n	3c1c <notify_monitors+0x1a>
    3c32:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3c34:	2c00      	cmp	r4, #0
    3c36:	d0f2      	beq.n	3c1e <notify_monitors+0x1c>
	return node->next;
    3c38:	6823      	ldr	r3, [r4, #0]
    3c3a:	e7f0      	b.n	3c1e <notify_monitors+0x1c>
}
    3c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003c40 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c40:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3c42:	f013 0307 	ands.w	r3, r3, #7
    3c46:	d103      	bne.n	3c50 <process_recheck+0x10>
	return list->head;
    3c48:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    3c4a:	b10a      	cbz	r2, 3c50 <process_recheck+0x10>
		evt = EVT_START;
    3c4c:	2003      	movs	r0, #3
    3c4e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3c50:	2b02      	cmp	r3, #2
    3c52:	d003      	beq.n	3c5c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    3c54:	2b01      	cmp	r3, #1
    3c56:	d006      	beq.n	3c66 <process_recheck+0x26>
	int evt = EVT_NOP;
    3c58:	2000      	movs	r0, #0
    3c5a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    3c5c:	8b42      	ldrh	r2, [r0, #26]
    3c5e:	2a00      	cmp	r2, #0
    3c60:	d1f8      	bne.n	3c54 <process_recheck+0x14>
		evt = EVT_STOP;
    3c62:	2004      	movs	r0, #4
    3c64:	4770      	bx	lr
    3c66:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    3c68:	b10b      	cbz	r3, 3c6e <process_recheck+0x2e>
		evt = EVT_RESET;
    3c6a:	2005      	movs	r0, #5
}
    3c6c:	4770      	bx	lr
	int evt = EVT_NOP;
    3c6e:	2000      	movs	r0, #0
    3c70:	4770      	bx	lr

00003c72 <process_complete>:
{
    3c72:	b510      	push	{r4, lr}
    3c74:	4604      	mov	r4, r0
    3c76:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c78:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    3c7a:	2a00      	cmp	r2, #0
    3c7c:	db07      	blt.n	3c8e <process_complete+0x1c>
    3c7e:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3c82:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3c84:	2a01      	cmp	r2, #1
    3c86:	d90e      	bls.n	3ca6 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3c88:	2b04      	cmp	r3, #4
    3c8a:	d033      	beq.n	3cf4 <process_complete+0x82>
}
    3c8c:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    3c8e:	e9d0 0100 	ldrd	r0, r1, [r0]
    3c92:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    3c96:	2300      	movs	r3, #0
    3c98:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    3c9a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    3c9c:	2101      	movs	r1, #1
    3c9e:	4620      	mov	r0, r4
    3ca0:	f7ff ffa7 	bl	3bf2 <set_state>
    3ca4:	e7f2      	b.n	3c8c <process_complete+0x1a>
		*clients = mgr->clients;
    3ca6:	e9d0 0100 	ldrd	r0, r1, [r0]
    3caa:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    3cae:	2200      	movs	r2, #0
    3cb0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    3cb2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    3cb4:	2b06      	cmp	r3, #6
    3cb6:	d118      	bne.n	3cea <process_complete+0x78>
	return list->head;
    3cb8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3cbc:	b13b      	cbz	r3, 3cce <process_complete+0x5c>
				mgr->refs += 1U;
    3cbe:	8b62      	ldrh	r2, [r4, #26]
    3cc0:	3201      	adds	r2, #1
    3cc2:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d0f9      	beq.n	3cbc <process_complete+0x4a>
	return node->next;
    3cc8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d1f6      	bne.n	3cbc <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    3cce:	2102      	movs	r1, #2
    3cd0:	4620      	mov	r0, r4
    3cd2:	f7ff ff8e 	bl	3bf2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3cd6:	4620      	mov	r0, r4
    3cd8:	f7ff ffb2 	bl	3c40 <process_recheck>
    3cdc:	2800      	cmp	r0, #0
    3cde:	d0d5      	beq.n	3c8c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3ce0:	8b23      	ldrh	r3, [r4, #24]
    3ce2:	f043 0320 	orr.w	r3, r3, #32
    3ce6:	8323      	strh	r3, [r4, #24]
    3ce8:	e7d0      	b.n	3c8c <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    3cea:	2100      	movs	r1, #0
    3cec:	4620      	mov	r0, r4
    3cee:	f7ff ff80 	bl	3bf2 <set_state>
    3cf2:	e7f0      	b.n	3cd6 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    3cf4:	2100      	movs	r1, #0
    3cf6:	f7ff ff7c 	bl	3bf2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3cfa:	4620      	mov	r0, r4
    3cfc:	f7ff ffa0 	bl	3c40 <process_recheck>
    3d00:	2800      	cmp	r0, #0
    3d02:	d0c3      	beq.n	3c8c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3d04:	8b23      	ldrh	r3, [r4, #24]
    3d06:	f043 0320 	orr.w	r3, r3, #32
    3d0a:	8323      	strh	r3, [r4, #24]
}
    3d0c:	e7be      	b.n	3c8c <process_complete+0x1a>

00003d0e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    3d0e:	b158      	cbz	r0, 3d28 <validate_args+0x1a>
{
    3d10:	b510      	push	{r4, lr}
    3d12:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3d14:	b159      	cbz	r1, 3d2e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    3d16:	1d08      	adds	r0, r1, #4
    3d18:	f7ff ff11 	bl	3b3e <sys_notify_validate>
	if ((rv == 0)
    3d1c:	b918      	cbnz	r0, 3d26 <validate_args+0x18>
	    && ((cli->notify.flags
    3d1e:	68a3      	ldr	r3, [r4, #8]
    3d20:	f033 0303 	bics.w	r3, r3, #3
    3d24:	d106      	bne.n	3d34 <validate_args+0x26>
}
    3d26:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3d28:	f06f 0015 	mvn.w	r0, #21
}
    3d2c:	4770      	bx	lr
		return -EINVAL;
    3d2e:	f06f 0015 	mvn.w	r0, #21
    3d32:	e7f8      	b.n	3d26 <validate_args+0x18>
		rv = -EINVAL;
    3d34:	f06f 0015 	mvn.w	r0, #21
    3d38:	e7f5      	b.n	3d26 <validate_args+0x18>

00003d3a <notify_one>:
{
    3d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d3e:	4607      	mov	r7, r0
    3d40:	460c      	mov	r4, r1
    3d42:	4616      	mov	r6, r2
    3d44:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3d46:	4619      	mov	r1, r3
    3d48:	1d20      	adds	r0, r4, #4
    3d4a:	f7ff ff0f 	bl	3b6c <sys_notify_finalize>
	if (cb) {
    3d4e:	b128      	cbz	r0, 3d5c <notify_one+0x22>
    3d50:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    3d52:	462b      	mov	r3, r5
    3d54:	4632      	mov	r2, r6
    3d56:	4621      	mov	r1, r4
    3d58:	4638      	mov	r0, r7
    3d5a:	47c0      	blx	r8
}
    3d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003d60 <notify_all>:
{
    3d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d64:	4680      	mov	r8, r0
    3d66:	460c      	mov	r4, r1
    3d68:	4617      	mov	r7, r2
    3d6a:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    3d6c:	e004      	b.n	3d78 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    3d6e:	4633      	mov	r3, r6
    3d70:	463a      	mov	r2, r7
    3d72:	4640      	mov	r0, r8
    3d74:	f7ff ffe1 	bl	3d3a <notify_one>
	return list->head;
    3d78:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    3d7a:	b131      	cbz	r1, 3d8a <notify_all+0x2a>
	return node->next;
    3d7c:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    3d7e:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3d80:	6863      	ldr	r3, [r4, #4]
    3d82:	428b      	cmp	r3, r1
    3d84:	d1f3      	bne.n	3d6e <notify_all+0xe>
	list->tail = node;
    3d86:	6065      	str	r5, [r4, #4]
}
    3d88:	e7f1      	b.n	3d6e <notify_all+0xe>
}
    3d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003d8e <transition_complete>:
{
    3d8e:	b508      	push	{r3, lr}
	__asm__ volatile(
    3d90:	f04f 0c20 	mov.w	ip, #32
    3d94:	f3ef 8211 	mrs	r2, BASEPRI
    3d98:	f38c 8812 	msr	BASEPRI_MAX, ip
    3d9c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3da0:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    3da2:	2101      	movs	r1, #1
    3da4:	f7fc fb78 	bl	498 <process_event>
}
    3da8:	bd08      	pop	{r3, pc}

00003daa <onoff_manager_init>:
	if ((mgr == NULL)
    3daa:	4603      	mov	r3, r0
    3dac:	b170      	cbz	r0, 3dcc <onoff_manager_init+0x22>
	    || (transitions == NULL)
    3dae:	b181      	cbz	r1, 3dd2 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    3db0:	680a      	ldr	r2, [r1, #0]
    3db2:	b18a      	cbz	r2, 3dd8 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    3db4:	684a      	ldr	r2, [r1, #4]
    3db6:	b192      	cbz	r2, 3dde <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3db8:	2000      	movs	r0, #0
    3dba:	6018      	str	r0, [r3, #0]
    3dbc:	6058      	str	r0, [r3, #4]
    3dbe:	6098      	str	r0, [r3, #8]
    3dc0:	60d8      	str	r0, [r3, #12]
    3dc2:	6118      	str	r0, [r3, #16]
    3dc4:	6158      	str	r0, [r3, #20]
    3dc6:	6198      	str	r0, [r3, #24]
    3dc8:	6119      	str	r1, [r3, #16]
	return 0;
    3dca:	4770      	bx	lr
		return -EINVAL;
    3dcc:	f06f 0015 	mvn.w	r0, #21
    3dd0:	4770      	bx	lr
    3dd2:	f06f 0015 	mvn.w	r0, #21
    3dd6:	4770      	bx	lr
    3dd8:	f06f 0015 	mvn.w	r0, #21
    3ddc:	4770      	bx	lr
    3dde:	f06f 0015 	mvn.w	r0, #21
}
    3de2:	4770      	bx	lr

00003de4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3de6:	4604      	mov	r4, r0
    3de8:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3dea:	f7ff ff90 	bl	3d0e <validate_args>

	if (rv < 0) {
    3dee:	1e06      	subs	r6, r0, #0
    3df0:	db37      	blt.n	3e62 <onoff_request+0x7e>
    3df2:	f04f 0320 	mov.w	r3, #32
    3df6:	f3ef 8211 	mrs	r2, BASEPRI
    3dfa:	f383 8812 	msr	BASEPRI_MAX, r3
    3dfe:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e02:	8b25      	ldrh	r5, [r4, #24]
    3e04:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3e08:	8b63      	ldrh	r3, [r4, #26]
    3e0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3e0e:	428b      	cmp	r3, r1
    3e10:	d02f      	beq.n	3e72 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    3e12:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    3e14:	2d02      	cmp	r5, #2
    3e16:	d00c      	beq.n	3e32 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    3e18:	b18d      	cbz	r5, 3e3e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    3e1a:	2d04      	cmp	r5, #4
    3e1c:	d00f      	beq.n	3e3e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    3e1e:	2d06      	cmp	r5, #6
    3e20:	d00d      	beq.n	3e3e <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    3e22:	2d05      	cmp	r5, #5
    3e24:	d01f      	beq.n	3e66 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    3e26:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    3e2a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    3e2c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    3e2e:	4608      	mov	r0, r1
    3e30:	e00a      	b.n	3e48 <onoff_request+0x64>
		mgr->refs += 1U;
    3e32:	3301      	adds	r3, #1
    3e34:	8363      	strh	r3, [r4, #26]
		notify = true;
    3e36:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    3e38:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    3e3a:	4618      	mov	r0, r3
    3e3c:	e004      	b.n	3e48 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    3e3e:	fab5 f385 	clz	r3, r5
    3e42:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    3e44:	2100      	movs	r1, #0
		add_client = true;
    3e46:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    3e48:	b128      	cbz	r0, 3e56 <onoff_request+0x72>
	parent->next = child;
    3e4a:	2000      	movs	r0, #0
    3e4c:	6038      	str	r0, [r7, #0]
	return list->tail;
    3e4e:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    3e50:	b1a8      	cbz	r0, 3e7e <onoff_request+0x9a>
	parent->next = child;
    3e52:	6007      	str	r7, [r0, #0]
	list->tail = node;
    3e54:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    3e56:	b9ab      	cbnz	r3, 3e84 <onoff_request+0xa0>
	__asm__ volatile(
    3e58:	f382 8811 	msr	BASEPRI, r2
    3e5c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3e60:	b9a9      	cbnz	r1, 3e8e <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    3e62:	4630      	mov	r0, r6
    3e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    3e66:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    3e6a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    3e6c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    3e6e:	4608      	mov	r0, r1
    3e70:	e7ea      	b.n	3e48 <onoff_request+0x64>
		rv = -EAGAIN;
    3e72:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    3e76:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    3e78:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    3e7a:	4608      	mov	r0, r1
    3e7c:	e7e4      	b.n	3e48 <onoff_request+0x64>
    3e7e:	6067      	str	r7, [r4, #4]
	list->head = node;
    3e80:	6027      	str	r7, [r4, #0]
}
    3e82:	e7e8      	b.n	3e56 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    3e84:	2102      	movs	r1, #2
    3e86:	4620      	mov	r0, r4
    3e88:	f7fc fb06 	bl	498 <process_event>
    3e8c:	e7e9      	b.n	3e62 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    3e8e:	2300      	movs	r3, #0
    3e90:	462a      	mov	r2, r5
    3e92:	4639      	mov	r1, r7
    3e94:	4620      	mov	r0, r4
    3e96:	f7ff ff50 	bl	3d3a <notify_one>
    3e9a:	e7e2      	b.n	3e62 <onoff_request+0x7e>

00003e9c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3e9c:	b508      	push	{r3, lr}
    3e9e:	4604      	mov	r4, r0
    3ea0:	4608      	mov	r0, r1
    3ea2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    3ea4:	461a      	mov	r2, r3
    3ea6:	47a0      	blx	r4
	return z_impl_z_current_get();
    3ea8:	f7ff fa94 	bl	33d4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    3eac:	f7fd fd0a 	bl	18c4 <z_impl_k_thread_abort>

00003eb0 <extract_decimal>:
{
    3eb0:	4684      	mov	ip, r0
	const char *sp = *str;
    3eb2:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3eb4:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    3eb6:	e005      	b.n	3ec4 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    3eb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3ebc:	3201      	adds	r2, #1
    3ebe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    3ec2:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3ec4:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    3ec6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    3eca:	2909      	cmp	r1, #9
    3ecc:	d9f4      	bls.n	3eb8 <extract_decimal+0x8>
	*str = sp;
    3ece:	f8cc 2000 	str.w	r2, [ip]
}
    3ed2:	4770      	bx	lr

00003ed4 <encode_uint>:
{
    3ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ed8:	b083      	sub	sp, #12
    3eda:	4604      	mov	r4, r0
    3edc:	460d      	mov	r5, r1
    3ede:	9201      	str	r2, [sp, #4]
    3ee0:	469a      	mov	sl, r3
    3ee2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    3ee4:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    3ee6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    3eea:	2b6f      	cmp	r3, #111	; 0x6f
    3eec:	d00f      	beq.n	3f0e <encode_uint+0x3a>
    3eee:	d906      	bls.n	3efe <encode_uint+0x2a>
    3ef0:	2b70      	cmp	r3, #112	; 0x70
    3ef2:	d00f      	beq.n	3f14 <encode_uint+0x40>
    3ef4:	2b78      	cmp	r3, #120	; 0x78
    3ef6:	d110      	bne.n	3f1a <encode_uint+0x46>
		return 16;
    3ef8:	f04f 0910 	mov.w	r9, #16
    3efc:	e026      	b.n	3f4c <encode_uint+0x78>
	switch (specifier) {
    3efe:	2b58      	cmp	r3, #88	; 0x58
    3f00:	d002      	beq.n	3f08 <encode_uint+0x34>
    3f02:	f04f 090a 	mov.w	r9, #10
    3f06:	e021      	b.n	3f4c <encode_uint+0x78>
		return 16;
    3f08:	f04f 0910 	mov.w	r9, #16
    3f0c:	e01e      	b.n	3f4c <encode_uint+0x78>
		return 8;
    3f0e:	f04f 0908 	mov.w	r9, #8
    3f12:	e01b      	b.n	3f4c <encode_uint+0x78>
		return 16;
    3f14:	f04f 0910 	mov.w	r9, #16
    3f18:	e018      	b.n	3f4c <encode_uint+0x78>
	switch (specifier) {
    3f1a:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    3f1e:	e015      	b.n	3f4c <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3f20:	f1bb 0f19 	cmp.w	fp, #25
    3f24:	d821      	bhi.n	3f6a <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3f26:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3f28:	3237      	adds	r2, #55	; 0x37
    3f2a:	b2d2      	uxtb	r2, r2
    3f2c:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    3f30:	463a      	mov	r2, r7
    3f32:	4643      	mov	r3, r8
    3f34:	4620      	mov	r0, r4
    3f36:	4629      	mov	r1, r5
    3f38:	f7fc f8e2 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    3f3c:	42bc      	cmp	r4, r7
    3f3e:	f175 0300 	sbcs.w	r3, r5, #0
    3f42:	d316      	bcc.n	3f72 <encode_uint+0x9e>
    3f44:	4556      	cmp	r6, sl
    3f46:	d914      	bls.n	3f72 <encode_uint+0x9e>
		value /= radix;
    3f48:	4604      	mov	r4, r0
    3f4a:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    3f4c:	f04f 0800 	mov.w	r8, #0
    3f50:	464f      	mov	r7, r9
    3f52:	464a      	mov	r2, r9
    3f54:	4643      	mov	r3, r8
    3f56:	4620      	mov	r0, r4
    3f58:	4629      	mov	r1, r5
    3f5a:	f7fc f8d1 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3f5e:	2a09      	cmp	r2, #9
    3f60:	d8de      	bhi.n	3f20 <encode_uint+0x4c>
    3f62:	b2d2      	uxtb	r2, r2
    3f64:	3230      	adds	r2, #48	; 0x30
    3f66:	b2d2      	uxtb	r2, r2
    3f68:	e7e0      	b.n	3f2c <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3f6a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3f6c:	3257      	adds	r2, #87	; 0x57
    3f6e:	b2d2      	uxtb	r2, r2
    3f70:	e7dc      	b.n	3f2c <encode_uint+0x58>
	if (conv->flag_hash) {
    3f72:	9b01      	ldr	r3, [sp, #4]
    3f74:	781b      	ldrb	r3, [r3, #0]
    3f76:	f013 0f20 	tst.w	r3, #32
    3f7a:	d005      	beq.n	3f88 <encode_uint+0xb4>
		if (radix == 8) {
    3f7c:	f1b9 0f08 	cmp.w	r9, #8
    3f80:	d006      	beq.n	3f90 <encode_uint+0xbc>
		} else if (radix == 16) {
    3f82:	f1b9 0f10 	cmp.w	r9, #16
    3f86:	d009      	beq.n	3f9c <encode_uint+0xc8>
}
    3f88:	4630      	mov	r0, r6
    3f8a:	b003      	add	sp, #12
    3f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    3f90:	9a01      	ldr	r2, [sp, #4]
    3f92:	7893      	ldrb	r3, [r2, #2]
    3f94:	f043 0308 	orr.w	r3, r3, #8
    3f98:	7093      	strb	r3, [r2, #2]
    3f9a:	e7f5      	b.n	3f88 <encode_uint+0xb4>
			conv->altform_0c = true;
    3f9c:	9a01      	ldr	r2, [sp, #4]
    3f9e:	7893      	ldrb	r3, [r2, #2]
    3fa0:	f043 0310 	orr.w	r3, r3, #16
    3fa4:	7093      	strb	r3, [r2, #2]
    3fa6:	e7ef      	b.n	3f88 <encode_uint+0xb4>

00003fa8 <outs>:
{
    3fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fac:	4607      	mov	r7, r0
    3fae:	460e      	mov	r6, r1
    3fb0:	4614      	mov	r4, r2
    3fb2:	4698      	mov	r8, r3
	size_t count = 0;
    3fb4:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3fb6:	e006      	b.n	3fc6 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    3fb8:	4631      	mov	r1, r6
    3fba:	f814 0b01 	ldrb.w	r0, [r4], #1
    3fbe:	47b8      	blx	r7
		if (rc < 0) {
    3fc0:	2800      	cmp	r0, #0
    3fc2:	db09      	blt.n	3fd8 <outs+0x30>
		++count;
    3fc4:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3fc6:	4544      	cmp	r4, r8
    3fc8:	d3f6      	bcc.n	3fb8 <outs+0x10>
    3fca:	f1b8 0f00 	cmp.w	r8, #0
    3fce:	d102      	bne.n	3fd6 <outs+0x2e>
    3fd0:	7823      	ldrb	r3, [r4, #0]
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d1f0      	bne.n	3fb8 <outs+0x10>
	return (int)count;
    3fd6:	4628      	mov	r0, r5
}
    3fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003fdc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3fdc:	4770      	bx	lr

00003fde <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    3fde:	2200      	movs	r2, #0
    3fe0:	6002      	str	r2, [r0, #0]
    3fe2:	6042      	str	r2, [r0, #4]
    3fe4:	6082      	str	r2, [r0, #8]
}
    3fe6:	4770      	bx	lr

00003fe8 <abort_function>:
{
    3fe8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    3fea:	2000      	movs	r0, #0
    3fec:	f7fc ff72 	bl	ed4 <sys_reboot>

00003ff0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3ff0:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3ff2:	f000 fb59 	bl	46a8 <z_fatal_error>
}
    3ff6:	bd08      	pop	{r3, pc}

00003ff8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3ff8:	b508      	push	{r3, lr}
    3ffa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    3ffc:	6800      	ldr	r0, [r0, #0]
    3ffe:	f7ff fff7 	bl	3ff0 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    4002:	bd08      	pop	{r3, pc}

00004004 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    4004:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4006:	2100      	movs	r1, #0
    4008:	2001      	movs	r0, #1
    400a:	f7ff fff1 	bl	3ff0 <z_arm_fatal_error>
}
    400e:	bd08      	pop	{r3, pc}

00004010 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4010:	b508      	push	{r3, lr}
	handler();
    4012:	f7fd f9b3 	bl	137c <z_SysNmiOnReset>
	z_arm_int_exit();
    4016:	f7fd faa9 	bl	156c <z_arm_exc_exit>
}
    401a:	bd08      	pop	{r3, pc}

0000401c <memory_fault_recoverable>:
}
    401c:	2000      	movs	r0, #0
    401e:	4770      	bx	lr

00004020 <debug_monitor>:
	*recoverable = false;
    4020:	2300      	movs	r3, #0
    4022:	700b      	strb	r3, [r1, #0]
}
    4024:	4770      	bx	lr

00004026 <fault_handle>:
{
    4026:	b508      	push	{r3, lr}
	*recoverable = false;
    4028:	2300      	movs	r3, #0
    402a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    402c:	1ecb      	subs	r3, r1, #3
    402e:	2b09      	cmp	r3, #9
    4030:	d81a      	bhi.n	4068 <fault_handle+0x42>
    4032:	e8df f003 	tbb	[pc, r3]
    4036:	0905      	.short	0x0905
    4038:	1919110d 	.word	0x1919110d
    403c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    4040:	4611      	mov	r1, r2
    4042:	f7fd fb23 	bl	168c <hard_fault>
		break;
    4046:	e010      	b.n	406a <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    4048:	2100      	movs	r1, #0
    404a:	f7fd fad9 	bl	1600 <mem_manage_fault>
		break;
    404e:	e00c      	b.n	406a <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    4050:	2100      	movs	r1, #0
    4052:	f7fd fa99 	bl	1588 <bus_fault>
		break;
    4056:	e008      	b.n	406a <fault_handle+0x44>
		reason = usage_fault(esf);
    4058:	f7fd fac0 	bl	15dc <usage_fault>
		break;
    405c:	e005      	b.n	406a <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    405e:	4611      	mov	r1, r2
    4060:	f7ff ffde 	bl	4020 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4064:	2000      	movs	r0, #0
		break;
    4066:	e000      	b.n	406a <fault_handle+0x44>
	switch (fault) {
    4068:	2000      	movs	r0, #0
}
    406a:	bd08      	pop	{r3, pc}

0000406c <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    406c:	6843      	ldr	r3, [r0, #4]
    406e:	1e5a      	subs	r2, r3, #1
		&&
    4070:	4213      	tst	r3, r2
    4072:	d106      	bne.n	4082 <mpu_partition_is_valid+0x16>
		&&
    4074:	2b1f      	cmp	r3, #31
    4076:	d906      	bls.n	4086 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    4078:	6803      	ldr	r3, [r0, #0]
		&&
    407a:	421a      	tst	r2, r3
    407c:	d005      	beq.n	408a <mpu_partition_is_valid+0x1e>
    407e:	2000      	movs	r0, #0
    4080:	4770      	bx	lr
    4082:	2000      	movs	r0, #0
    4084:	4770      	bx	lr
    4086:	2000      	movs	r0, #0
    4088:	4770      	bx	lr
    408a:	2001      	movs	r0, #1
}
    408c:	4770      	bx	lr

0000408e <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    408e:	2807      	cmp	r0, #7
    4090:	d805      	bhi.n	409e <region_allocate_and_init+0x10>
{
    4092:	b510      	push	{r4, lr}
    4094:	4604      	mov	r4, r0
	region_init(index, region_conf);
    4096:	f7fd fc4b 	bl	1930 <region_init>
	return index;
    409a:	4620      	mov	r0, r4
}
    409c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    409e:	f06f 0015 	mvn.w	r0, #21
}
    40a2:	4770      	bx	lr

000040a4 <mpu_configure_region>:
{
    40a4:	b500      	push	{lr}
    40a6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    40a8:	680b      	ldr	r3, [r1, #0]
    40aa:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    40ac:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    40ae:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    40b0:	2b20      	cmp	r3, #32
    40b2:	d912      	bls.n	40da <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    40b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    40b8:	d811      	bhi.n	40de <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    40ba:	3b01      	subs	r3, #1
    40bc:	fab3 f383 	clz	r3, r3
    40c0:	f1c3 031f 	rsb	r3, r3, #31
    40c4:	005b      	lsls	r3, r3, #1
    40c6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    40ca:	4313      	orrs	r3, r2
    40cc:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    40ce:	a901      	add	r1, sp, #4
    40d0:	f7ff ffdd 	bl	408e <region_allocate_and_init>
}
    40d4:	b005      	add	sp, #20
    40d6:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    40da:	2308      	movs	r3, #8
    40dc:	e7f5      	b.n	40ca <mpu_configure_region+0x26>
		return REGION_4G;
    40de:	233e      	movs	r3, #62	; 0x3e
    40e0:	e7f3      	b.n	40ca <mpu_configure_region+0x26>

000040e2 <mpu_configure_regions>:
{
    40e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    40e6:	4680      	mov	r8, r0
    40e8:	460f      	mov	r7, r1
    40ea:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    40ec:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    40ee:	2500      	movs	r5, #0
    40f0:	e009      	b.n	4106 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    40f2:	4621      	mov	r1, r4
    40f4:	b2f0      	uxtb	r0, r6
    40f6:	f7ff ffd5 	bl	40a4 <mpu_configure_region>
    40fa:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    40fc:	f110 0f16 	cmn.w	r0, #22
    4100:	d014      	beq.n	412c <mpu_configure_regions+0x4a>
		reg_index++;
    4102:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    4104:	3501      	adds	r5, #1
    4106:	42bd      	cmp	r5, r7
    4108:	da10      	bge.n	412c <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    410a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    410e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    4112:	6862      	ldr	r2, [r4, #4]
    4114:	2a00      	cmp	r2, #0
    4116:	d0f5      	beq.n	4104 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    4118:	f1b9 0f00 	cmp.w	r9, #0
    411c:	d0e9      	beq.n	40f2 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    411e:	4620      	mov	r0, r4
    4120:	f7ff ffa4 	bl	406c <mpu_partition_is_valid>
		if (do_sanity_check &&
    4124:	2800      	cmp	r0, #0
    4126:	d1e4      	bne.n	40f2 <mpu_configure_regions+0x10>
			return -EINVAL;
    4128:	f06f 0615 	mvn.w	r6, #21
}
    412c:	4630      	mov	r0, r6
    412e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004132 <arm_core_mpu_configure_static_mpu_regions>:
{
    4132:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    4134:	f7fd fc10 	bl	1958 <mpu_configure_static_mpu_regions>
}
    4138:	bd08      	pop	{r3, pc}

0000413a <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    413a:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    413c:	f7fd fc16 	bl	196c <mpu_configure_dynamic_mpu_regions>
}
    4140:	bd08      	pop	{r3, pc}

00004142 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    4142:	4603      	mov	r3, r0
    4144:	b1a2      	cbz	r2, 4170 <strncpy+0x2e>
{
    4146:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    4148:	780c      	ldrb	r4, [r1, #0]
    414a:	b12c      	cbz	r4, 4158 <strncpy+0x16>
		*d = *s;
    414c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    4150:	3101      	adds	r1, #1
		d++;
		n--;
    4152:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    4154:	2a00      	cmp	r2, #0
    4156:	d1f7      	bne.n	4148 <strncpy+0x6>
	}

	while (n > 0) {
    4158:	b122      	cbz	r2, 4164 <strncpy+0x22>
		*d = '\0';
    415a:	2100      	movs	r1, #0
    415c:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    4160:	3a01      	subs	r2, #1
    4162:	e7f9      	b.n	4158 <strncpy+0x16>
	}

	return dest;
}
    4164:	bc10      	pop	{r4}
    4166:	4770      	bx	lr
		*d = '\0';
    4168:	2100      	movs	r1, #0
    416a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    416e:	3a01      	subs	r2, #1
	while (n > 0) {
    4170:	2a00      	cmp	r2, #0
    4172:	d1f9      	bne.n	4168 <strncpy+0x26>
    4174:	4770      	bx	lr

00004176 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4176:	4603      	mov	r3, r0
	size_t n = 0;
    4178:	2000      	movs	r0, #0

	while (*s != '\0') {
    417a:	e001      	b.n	4180 <strlen+0xa>
		s++;
    417c:	3301      	adds	r3, #1
		n++;
    417e:	3001      	adds	r0, #1
	while (*s != '\0') {
    4180:	781a      	ldrb	r2, [r3, #0]
    4182:	2a00      	cmp	r2, #0
    4184:	d1fa      	bne.n	417c <strlen+0x6>
	}

	return n;
}
    4186:	4770      	bx	lr

00004188 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4188:	4603      	mov	r3, r0
	size_t n = 0;
    418a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    418c:	e001      	b.n	4192 <strnlen+0xa>
		s++;
    418e:	3301      	adds	r3, #1
		n++;
    4190:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    4192:	781a      	ldrb	r2, [r3, #0]
    4194:	b10a      	cbz	r2, 419a <strnlen+0x12>
    4196:	4288      	cmp	r0, r1
    4198:	d3f9      	bcc.n	418e <strnlen+0x6>
	}

	return n;
}
    419a:	4770      	bx	lr

0000419c <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    419c:	ea80 0301 	eor.w	r3, r0, r1
    41a0:	f013 0f03 	tst.w	r3, #3
    41a4:	d001      	beq.n	41aa <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    41a6:	4603      	mov	r3, r0
    41a8:	e023      	b.n	41f2 <memcpy+0x56>
    41aa:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    41ac:	f013 0f03 	tst.w	r3, #3
    41b0:	d00f      	beq.n	41d2 <memcpy+0x36>
			if (n == 0) {
    41b2:	b30a      	cbz	r2, 41f8 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    41b4:	f811 cb01 	ldrb.w	ip, [r1], #1
    41b8:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    41bc:	3a01      	subs	r2, #1
    41be:	e7f5      	b.n	41ac <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    41c0:	f811 cb01 	ldrb.w	ip, [r1], #1
    41c4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    41c8:	3a01      	subs	r2, #1
	while (n > 0) {
    41ca:	2a00      	cmp	r2, #0
    41cc:	d1f8      	bne.n	41c0 <memcpy+0x24>
	}

	return d;
}
    41ce:	bc10      	pop	{r4}
    41d0:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    41d2:	2a03      	cmp	r2, #3
    41d4:	d90d      	bls.n	41f2 <memcpy+0x56>
{
    41d6:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    41d8:	f851 4b04 	ldr.w	r4, [r1], #4
    41dc:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    41e0:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    41e2:	2a03      	cmp	r2, #3
    41e4:	d8f8      	bhi.n	41d8 <memcpy+0x3c>
    41e6:	e7f0      	b.n	41ca <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    41e8:	f811 cb01 	ldrb.w	ip, [r1], #1
    41ec:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    41f0:	3a01      	subs	r2, #1
	while (n > 0) {
    41f2:	2a00      	cmp	r2, #0
    41f4:	d1f8      	bne.n	41e8 <memcpy+0x4c>
    41f6:	4770      	bx	lr
}
    41f8:	4770      	bx	lr

000041fa <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    41fa:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    41fe:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4200:	e002      	b.n	4208 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    4202:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    4206:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4208:	f013 0f03 	tst.w	r3, #3
    420c:	d002      	beq.n	4214 <memset+0x1a>
		if (n == 0) {
    420e:	2a00      	cmp	r2, #0
    4210:	d1f7      	bne.n	4202 <memset+0x8>
    4212:	e00f      	b.n	4234 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    4214:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    4216:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    421a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    421e:	2a03      	cmp	r2, #3
    4220:	d906      	bls.n	4230 <memset+0x36>
		*(d_word++) = c_word;
    4222:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    4226:	3a04      	subs	r2, #4
    4228:	e7f9      	b.n	421e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    422a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    422e:	3a01      	subs	r2, #1
	while (n > 0) {
    4230:	2a00      	cmp	r2, #0
    4232:	d1fa      	bne.n	422a <memset+0x30>
	}

	return buf;
}
    4234:	4770      	bx	lr

00004236 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    4236:	b084      	sub	sp, #16
    4238:	ab04      	add	r3, sp, #16
    423a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    423e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4242:	2b06      	cmp	r3, #6
    4244:	d001      	beq.n	424a <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    4246:	b004      	add	sp, #16
    4248:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    424a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    424e:	2201      	movs	r2, #1
    4250:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    4254:	f3bf 8f4f 	dsb	sy
        __WFE();
    4258:	bf20      	wfe
    while (true)
    425a:	e7fd      	b.n	4258 <pm_power_state_set+0x22>

0000425c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    425c:	b084      	sub	sp, #16
    425e:	ab04      	add	r3, sp, #16
    4260:	e903 0007 	stmdb	r3, {r0, r1, r2}
    4264:	2300      	movs	r3, #0
    4266:	f383 8811 	msr	BASEPRI, r3
    426a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    426e:	b004      	add	sp, #16
    4270:	4770      	bx	lr

00004272 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    4272:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    4274:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4278:	0089      	lsls	r1, r1, #2
    427a:	3138      	adds	r1, #56	; 0x38
}
    427c:	4408      	add	r0, r1
    427e:	4770      	bx	lr

00004280 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    4280:	6840      	ldr	r0, [r0, #4]
}
    4282:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    4286:	4770      	bx	lr

00004288 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    4288:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    428a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    428e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    4292:	4770      	bx	lr

00004294 <get_status>:
{
    4294:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4296:	b2c9      	uxtb	r1, r1
    4298:	f7ff ffeb 	bl	4272 <get_sub_data>
    429c:	6880      	ldr	r0, [r0, #8]
}
    429e:	f000 0007 	and.w	r0, r0, #7
    42a2:	bd08      	pop	{r3, pc}

000042a4 <set_off_state>:
	__asm__ volatile(
    42a4:	f04f 0320 	mov.w	r3, #32
    42a8:	f3ef 8211 	mrs	r2, BASEPRI
    42ac:	f383 8812 	msr	BASEPRI_MAX, r3
    42b0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    42b4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    42b6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    42ba:	d001      	beq.n	42c0 <set_off_state+0x1c>
    42bc:	428b      	cmp	r3, r1
    42be:	d107      	bne.n	42d0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    42c0:	2301      	movs	r3, #1
    42c2:	6003      	str	r3, [r0, #0]
	int err = 0;
    42c4:	2000      	movs	r0, #0
	__asm__ volatile(
    42c6:	f382 8811 	msr	BASEPRI, r2
    42ca:	f3bf 8f6f 	isb	sy
}
    42ce:	4770      	bx	lr
		err = -EPERM;
    42d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42d4:	e7f7      	b.n	42c6 <set_off_state+0x22>

000042d6 <set_starting_state>:
	__asm__ volatile(
    42d6:	f04f 0320 	mov.w	r3, #32
    42da:	f3ef 8211 	mrs	r2, BASEPRI
    42de:	f383 8812 	msr	BASEPRI_MAX, r3
    42e2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    42e6:	6803      	ldr	r3, [r0, #0]
    42e8:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    42ec:	f003 0307 	and.w	r3, r3, #7
    42f0:	2b01      	cmp	r3, #1
    42f2:	d008      	beq.n	4306 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    42f4:	458c      	cmp	ip, r1
    42f6:	d009      	beq.n	430c <set_starting_state+0x36>
		err = -EPERM;
    42f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    42fc:	f382 8811 	msr	BASEPRI, r2
    4300:	f3bf 8f6f 	isb	sy
}
    4304:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4306:	6001      	str	r1, [r0, #0]
	int err = 0;
    4308:	2000      	movs	r0, #0
    430a:	e7f7      	b.n	42fc <set_starting_state+0x26>
		err = -EALREADY;
    430c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4310:	e7f4      	b.n	42fc <set_starting_state+0x26>

00004312 <set_on_state>:
	__asm__ volatile(
    4312:	f04f 0320 	mov.w	r3, #32
    4316:	f3ef 8211 	mrs	r2, BASEPRI
    431a:	f383 8812 	msr	BASEPRI_MAX, r3
    431e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4322:	6803      	ldr	r3, [r0, #0]
    4324:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4328:	f043 0302 	orr.w	r3, r3, #2
    432c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    432e:	f382 8811 	msr	BASEPRI, r2
    4332:	f3bf 8f6f 	isb	sy
}
    4336:	4770      	bx	lr

00004338 <clkstarted_handle>:
{
    4338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    433a:	4606      	mov	r6, r0
    433c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    433e:	f7ff ff98 	bl	4272 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    4342:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    4344:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    4346:	2300      	movs	r3, #0
    4348:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    434c:	f7ff ffe1 	bl	4312 <set_on_state>
	if (callback) {
    4350:	b11d      	cbz	r5, 435a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4352:	463a      	mov	r2, r7
    4354:	4621      	mov	r1, r4
    4356:	4630      	mov	r0, r6
    4358:	47a8      	blx	r5
}
    435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000435c <stop>:
{
    435c:	b570      	push	{r4, r5, r6, lr}
    435e:	4606      	mov	r6, r0
    4360:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    4362:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4364:	4621      	mov	r1, r4
    4366:	f7ff ff84 	bl	4272 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    436a:	4629      	mov	r1, r5
    436c:	3008      	adds	r0, #8
    436e:	f7ff ff99 	bl	42a4 <set_off_state>
	if (err < 0) {
    4372:	2800      	cmp	r0, #0
    4374:	db06      	blt.n	4384 <stop+0x28>
	get_sub_config(dev, type)->stop();
    4376:	4621      	mov	r1, r4
    4378:	4630      	mov	r0, r6
    437a:	f7ff ff81 	bl	4280 <get_sub_config>
    437e:	6843      	ldr	r3, [r0, #4]
    4380:	4798      	blx	r3
	return 0;
    4382:	2000      	movs	r0, #0
}
    4384:	bd70      	pop	{r4, r5, r6, pc}

00004386 <api_stop>:
{
    4386:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    4388:	2280      	movs	r2, #128	; 0x80
    438a:	f7ff ffe7 	bl	435c <stop>
}
    438e:	bd08      	pop	{r3, pc}

00004390 <async_start>:
{
    4390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4394:	4606      	mov	r6, r0
    4396:	4690      	mov	r8, r2
    4398:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    439a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    439c:	4629      	mov	r1, r5
    439e:	f7ff ff68 	bl	4272 <get_sub_data>
    43a2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    43a4:	9906      	ldr	r1, [sp, #24]
    43a6:	3008      	adds	r0, #8
    43a8:	f7ff ff95 	bl	42d6 <set_starting_state>
	if (err < 0) {
    43ac:	2800      	cmp	r0, #0
    43ae:	db09      	blt.n	43c4 <async_start+0x34>
	subdata->cb = cb;
    43b0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    43b4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    43b6:	4629      	mov	r1, r5
    43b8:	4630      	mov	r0, r6
    43ba:	f7ff ff61 	bl	4280 <get_sub_config>
    43be:	6803      	ldr	r3, [r0, #0]
    43c0:	4798      	blx	r3
	return 0;
    43c2:	2000      	movs	r0, #0
}
    43c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000043c8 <api_start>:
{
    43c8:	b510      	push	{r4, lr}
    43ca:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    43cc:	2480      	movs	r4, #128	; 0x80
    43ce:	9400      	str	r4, [sp, #0]
    43d0:	f7ff ffde 	bl	4390 <async_start>
}
    43d4:	b002      	add	sp, #8
    43d6:	bd10      	pop	{r4, pc}

000043d8 <onoff_started_callback>:
{
    43d8:	b510      	push	{r4, lr}
    43da:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    43dc:	b2c9      	uxtb	r1, r1
    43de:	f7ff ff53 	bl	4288 <get_onoff_manager>
	notify(mgr, 0);
    43e2:	2100      	movs	r1, #0
    43e4:	47a0      	blx	r4
}
    43e6:	bd10      	pop	{r4, pc}

000043e8 <hfclk_start>:
{
    43e8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    43ea:	2001      	movs	r0, #1
    43ec:	f000 f927 	bl	463e <nrfx_clock_start>
}
    43f0:	bd08      	pop	{r3, pc}

000043f2 <lfclk_start>:
{
    43f2:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    43f4:	2000      	movs	r0, #0
    43f6:	f000 f922 	bl	463e <nrfx_clock_start>
}
    43fa:	bd08      	pop	{r3, pc}

000043fc <hfclk_stop>:
{
    43fc:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    43fe:	2001      	movs	r0, #1
    4400:	f7fe f81c 	bl	243c <nrfx_clock_stop>
}
    4404:	bd08      	pop	{r3, pc}

00004406 <lfclk_stop>:
{
    4406:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4408:	2000      	movs	r0, #0
    440a:	f7fe f817 	bl	243c <nrfx_clock_stop>
}
    440e:	bd08      	pop	{r3, pc}

00004410 <blocking_start_callback>:
{
    4410:	b508      	push	{r3, lr}
    4412:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4414:	f7fe fbd0 	bl	2bb8 <z_impl_k_sem_give>
}
    4418:	bd08      	pop	{r3, pc}

0000441a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    441a:	4770      	bx	lr

0000441c <counter_sub>:
	return (a - b) & COUNTER_MAX;
    441c:	1a40      	subs	r0, r0, r1
}
    441e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4422:	4770      	bx	lr

00004424 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4424:	f100 0350 	add.w	r3, r0, #80	; 0x50
    4428:	009b      	lsls	r3, r3, #2
    442a:	b29b      	uxth	r3, r3
    442c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4430:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4434:	2200      	movs	r2, #0
    4436:	601a      	str	r2, [r3, #0]
    4438:	681b      	ldr	r3, [r3, #0]
}
    443a:	4770      	bx	lr

0000443c <absolute_time_to_cc>:
}
    443c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4440:	4770      	bx	lr

00004442 <full_int_lock>:
	__asm__ volatile(
    4442:	f04f 0320 	mov.w	r3, #32
    4446:	f3ef 8011 	mrs	r0, BASEPRI
    444a:	f383 8812 	msr	BASEPRI_MAX, r3
    444e:	f3bf 8f6f 	isb	sy
}
    4452:	4770      	bx	lr

00004454 <full_int_unlock>:
	__asm__ volatile(
    4454:	f380 8811 	msr	BASEPRI, r0
    4458:	f3bf 8f6f 	isb	sy
}
    445c:	4770      	bx	lr

0000445e <set_absolute_alarm>:
{
    445e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4460:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4462:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    4466:	f7fd fc9f 	bl	1da8 <get_comparator>
    446a:	4607      	mov	r7, r0
    446c:	e019      	b.n	44a2 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    446e:	2013      	movs	r0, #19
    4470:	f000 fb4b 	bl	4b0a <z_impl_k_busy_wait>
}
    4474:	e022      	b.n	44bc <set_absolute_alarm+0x5e>
		event_clear(chan);
    4476:	4630      	mov	r0, r6
    4478:	f7ff ffd4 	bl	4424 <event_clear>
		event_enable(chan);
    447c:	4630      	mov	r0, r6
    447e:	f7fd fc9b 	bl	1db8 <event_enable>
		set_comparator(chan, cc_val);
    4482:	4629      	mov	r1, r5
    4484:	4630      	mov	r0, r6
    4486:	f7fd fc85 	bl	1d94 <set_comparator>
		now2 = counter();
    448a:	f7fd fca9 	bl	1de0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    448e:	4284      	cmp	r4, r0
    4490:	d01e      	beq.n	44d0 <set_absolute_alarm+0x72>
    4492:	1c81      	adds	r1, r0, #2
    4494:	4628      	mov	r0, r5
    4496:	f7ff ffc1 	bl	441c <counter_sub>
	} while ((now2 != now) &&
    449a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    449e:	d917      	bls.n	44d0 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    44a0:	462f      	mov	r7, r5
		now = counter();
    44a2:	f7fd fc9d 	bl	1de0 <counter>
    44a6:	4604      	mov	r4, r0
		set_comparator(chan, now);
    44a8:	4601      	mov	r1, r0
    44aa:	4630      	mov	r0, r6
    44ac:	f7fd fc72 	bl	1d94 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    44b0:	4621      	mov	r1, r4
    44b2:	4638      	mov	r0, r7
    44b4:	f7ff ffb2 	bl	441c <counter_sub>
    44b8:	2801      	cmp	r0, #1
    44ba:	d0d8      	beq.n	446e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    44bc:	1ca7      	adds	r7, r4, #2
    44be:	4639      	mov	r1, r7
    44c0:	4628      	mov	r0, r5
    44c2:	f7ff ffab 	bl	441c <counter_sub>
    44c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    44ca:	d9d4      	bls.n	4476 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    44cc:	463d      	mov	r5, r7
    44ce:	e7d2      	b.n	4476 <set_absolute_alarm+0x18>
}
    44d0:	4628      	mov	r0, r5
    44d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000044d4 <compare_set>:
{
    44d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44d6:	b083      	sub	sp, #12
    44d8:	4604      	mov	r4, r0
    44da:	4617      	mov	r7, r2
    44dc:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    44de:	f7fd fc85 	bl	1dec <compare_int_lock>
    44e2:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    44e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    44e6:	9301      	str	r3, [sp, #4]
    44e8:	9b08      	ldr	r3, [sp, #32]
    44ea:	9300      	str	r3, [sp, #0]
    44ec:	463a      	mov	r2, r7
    44ee:	462b      	mov	r3, r5
    44f0:	4620      	mov	r0, r4
    44f2:	f7fd fd6b 	bl	1fcc <compare_set_nolocks>
    44f6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    44f8:	4631      	mov	r1, r6
    44fa:	4620      	mov	r0, r4
    44fc:	f7fd fcda 	bl	1eb4 <compare_int_unlock>
}
    4500:	4628      	mov	r0, r5
    4502:	b003      	add	sp, #12
    4504:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004506 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4506:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4508:	2000      	movs	r0, #0
    450a:	f7fd fa95 	bl	1a38 <sys_arch_reboot>

0000450e <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    450e:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    4510:	f7ff f934 	bl	377c <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    4514:	bd08      	pop	{r3, pc}

00004516 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    4516:	b510      	push	{r4, lr}
    4518:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    451a:	f7fc fe0d 	bl	1138 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    451e:	f7fc fec9 	bl	12b4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    4522:	4620      	mov	r0, r4
    4524:	f7ff fff3 	bl	450e <hw_cc3xx_init_internal>
	return res;
}
    4528:	bd10      	pop	{r4, pc}

0000452a <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    452a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    452e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4532:	2b08      	cmp	r3, #8
    4534:	d001      	beq.n	453a <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    4536:	2000      	movs	r0, #0
    4538:	4770      	bx	lr
                        return true;
    453a:	2001      	movs	r0, #1
    #endif
}
    453c:	4770      	bx	lr

0000453e <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    453e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4542:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4546:	2b08      	cmp	r3, #8
    4548:	d001      	beq.n	454e <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    454a:	2000      	movs	r0, #0
    454c:	4770      	bx	lr
                        return true;
    454e:	2001      	movs	r0, #1
    #endif
}
    4550:	4770      	bx	lr

00004552 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4556:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    455a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    455e:	2a08      	cmp	r2, #8
    4560:	d001      	beq.n	4566 <nrf52_errata_98+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    4562:	2000      	movs	r0, #0
    4564:	4770      	bx	lr
                switch(var2)
    4566:	2b00      	cmp	r3, #0
    4568:	d804      	bhi.n	4574 <nrf52_errata_98+0x22>
    456a:	e8df f003 	tbb	[pc, r3]
    456e:	01          	.byte	0x01
    456f:	00          	.byte	0x00
    4570:	2001      	movs	r0, #1
    4572:	4770      	bx	lr
                        return false;
    4574:	2000      	movs	r0, #0
    #endif
}
    4576:	4770      	bx	lr

00004578 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    457c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4580:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4584:	2a08      	cmp	r2, #8
    4586:	d001      	beq.n	458c <nrf52_errata_103+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    4588:	2000      	movs	r0, #0
    458a:	4770      	bx	lr
                switch(var2)
    458c:	2b00      	cmp	r3, #0
    458e:	d804      	bhi.n	459a <nrf52_errata_103+0x22>
    4590:	e8df f003 	tbb	[pc, r3]
    4594:	01          	.byte	0x01
    4595:	00          	.byte	0x00
    4596:	2001      	movs	r0, #1
    4598:	4770      	bx	lr
                        return false;
    459a:	2000      	movs	r0, #0
    #endif
}
    459c:	4770      	bx	lr

0000459e <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    459e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    45a2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    45a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    45aa:	2a08      	cmp	r2, #8
    45ac:	d001      	beq.n	45b2 <nrf52_errata_115+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    45ae:	2000      	movs	r0, #0
    45b0:	4770      	bx	lr
                switch(var2)
    45b2:	2b00      	cmp	r3, #0
    45b4:	d804      	bhi.n	45c0 <nrf52_errata_115+0x22>
    45b6:	e8df f003 	tbb	[pc, r3]
    45ba:	01          	.byte	0x01
    45bb:	00          	.byte	0x00
    45bc:	2001      	movs	r0, #1
    45be:	4770      	bx	lr
                        return false;
    45c0:	2000      	movs	r0, #0
    #endif
}
    45c2:	4770      	bx	lr

000045c4 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    45c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    45c8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    45cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    45d0:	2a08      	cmp	r2, #8
    45d2:	d001      	beq.n	45d8 <nrf52_errata_120+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    45d4:	2000      	movs	r0, #0
    45d6:	4770      	bx	lr
                switch(var2)
    45d8:	2b00      	cmp	r3, #0
    45da:	d804      	bhi.n	45e6 <nrf52_errata_120+0x22>
    45dc:	e8df f003 	tbb	[pc, r3]
    45e0:	01          	.byte	0x01
    45e1:	00          	.byte	0x00
    45e2:	2001      	movs	r0, #1
    45e4:	4770      	bx	lr
                        return false;
    45e6:	2000      	movs	r0, #0
    #endif
}
    45e8:	4770      	bx	lr

000045ea <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    45ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    45ee:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    45f2:	2b08      	cmp	r3, #8
    45f4:	d001      	beq.n	45fa <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    45f6:	2000      	movs	r0, #0
    45f8:	4770      	bx	lr
                        return true;
    45fa:	2001      	movs	r0, #1
    #endif
}
    45fc:	4770      	bx	lr

000045fe <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    45fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4602:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4606:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    460a:	2a08      	cmp	r2, #8
    460c:	d001      	beq.n	4612 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    460e:	2000      	movs	r0, #0
    4610:	4770      	bx	lr
                switch(var2)
    4612:	2b04      	cmp	r3, #4
    4614:	d801      	bhi.n	461a <nrf52_configuration_249+0x1c>
    4616:	2000      	movs	r0, #0
    4618:	4770      	bx	lr
                        return true;
    461a:	2001      	movs	r0, #1
    #endif
}
    461c:	4770      	bx	lr

0000461e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    461e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    4620:	4780      	blx	r0
}
    4622:	bd08      	pop	{r3, pc}

00004624 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    4624:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    4626:	f000 fa70 	bl	4b0a <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    462a:	bd08      	pop	{r3, pc}

0000462c <nrfx_clock_enable>:
{
    462c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    462e:	2000      	movs	r0, #0
    4630:	f7fc fe80 	bl	1334 <arch_irq_is_enabled>
    4634:	b100      	cbz	r0, 4638 <nrfx_clock_enable+0xc>
}
    4636:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4638:	f7fc fe6e 	bl	1318 <arch_irq_enable>
    463c:	e7fb      	b.n	4636 <nrfx_clock_enable+0xa>

0000463e <nrfx_clock_start>:
    switch (domain)
    463e:	b110      	cbz	r0, 4646 <nrfx_clock_start+0x8>
    4640:	2801      	cmp	r0, #1
    4642:	d025      	beq.n	4690 <nrfx_clock_start+0x52>
    4644:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    464a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    464e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4652:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4656:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    465a:	d111      	bne.n	4680 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    465c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4660:	2200      	movs	r2, #0
    4662:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    466a:	2200      	movs	r2, #0
    466c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4670:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    4674:	2202      	movs	r2, #2
    4676:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    467a:	2201      	movs	r2, #1
    467c:	609a      	str	r2, [r3, #8]
}
    467e:	4770      	bx	lr
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    4680:	2b01      	cmp	r3, #1
    4682:	d1eb      	bne.n	465c <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4688:	2201      	movs	r2, #1
    468a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    468e:	e7ea      	b.n	4666 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4694:	2200      	movs	r2, #0
    4696:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    469a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    469e:	2201      	movs	r2, #1
    46a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46a4:	601a      	str	r2, [r3, #0]
}
    46a6:	4770      	bx	lr

000046a8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    46a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46aa:	4605      	mov	r5, r0
    46ac:	460e      	mov	r6, r1
	__asm__ volatile(
    46ae:	f04f 0320 	mov.w	r3, #32
    46b2:	f3ef 8711 	mrs	r7, BASEPRI
    46b6:	f383 8812 	msr	BASEPRI_MAX, r3
    46ba:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    46be:	f7fe fe89 	bl	33d4 <z_impl_z_current_get>
    46c2:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    46c4:	4631      	mov	r1, r6
    46c6:	4628      	mov	r0, r5
    46c8:	f7ff ff1d 	bl	4506 <k_sys_fatal_error_handler>
	__asm__ volatile(
    46cc:	f387 8811 	msr	BASEPRI, r7
    46d0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    46d4:	4620      	mov	r0, r4
    46d6:	f7fd f8f5 	bl	18c4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    46da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000046dc <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    46dc:	68c2      	ldr	r2, [r0, #12]
    46de:	6903      	ldr	r3, [r0, #16]
    46e0:	431a      	orrs	r2, r3
    46e2:	f012 0203 	ands.w	r2, r2, #3
    46e6:	d10d      	bne.n	4704 <create_free_list+0x28>
	slab->free_list = NULL;
    46e8:	2100      	movs	r1, #0
    46ea:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    46ec:	e005      	b.n	46fa <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    46ee:	6941      	ldr	r1, [r0, #20]
    46f0:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    46f2:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    46f4:	68c1      	ldr	r1, [r0, #12]
    46f6:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    46f8:	3201      	adds	r2, #1
    46fa:	6881      	ldr	r1, [r0, #8]
    46fc:	4291      	cmp	r1, r2
    46fe:	d8f6      	bhi.n	46ee <create_free_list+0x12>
	return 0;
    4700:	2000      	movs	r0, #0
    4702:	4770      	bx	lr
		return -EINVAL;
    4704:	f06f 0015 	mvn.w	r0, #21
}
    4708:	4770      	bx	lr

0000470a <k_mem_slab_init>:
{
    470a:	b510      	push	{r4, lr}
    470c:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    470e:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    4710:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    4712:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    4714:	2300      	movs	r3, #0
    4716:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    4718:	f7ff ffe0 	bl	46dc <create_free_list>
	if (rc < 0) {
    471c:	2800      	cmp	r0, #0
    471e:	db01      	blt.n	4724 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    4720:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    4722:	6064      	str	r4, [r4, #4]
}
    4724:	bd10      	pop	{r4, pc}

00004726 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4728:	4604      	mov	r4, r0
    472a:	460d      	mov	r5, r1
	__asm__ volatile(
    472c:	f04f 0320 	mov.w	r3, #32
    4730:	f3ef 8611 	mrs	r6, BASEPRI
    4734:	f383 8812 	msr	BASEPRI_MAX, r3
    4738:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    473c:	6943      	ldr	r3, [r0, #20]
    473e:	b163      	cbz	r3, 475a <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    4740:	682b      	ldr	r3, [r5, #0]
    4742:	6962      	ldr	r2, [r4, #20]
    4744:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4746:	682b      	ldr	r3, [r5, #0]
    4748:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    474a:	69a3      	ldr	r3, [r4, #24]
    474c:	3b01      	subs	r3, #1
    474e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4750:	f386 8811 	msr	BASEPRI, r6
    4754:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    475a:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    475e:	f000 f92a 	bl	49b6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    4762:	2800      	cmp	r0, #0
    4764:	d0ec      	beq.n	4740 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4766:	682a      	ldr	r2, [r5, #0]
    4768:	2100      	movs	r1, #0
    476a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    476e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    4770:	f000 f881 	bl	4876 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4774:	4631      	mov	r1, r6
    4776:	4638      	mov	r0, r7
    4778:	f7fe fac8 	bl	2d0c <z_reschedule>
			return;
    477c:	e7ec      	b.n	4758 <k_mem_slab_free+0x32>

0000477e <setup_thread_stack>:
{
    477e:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4780:	3207      	adds	r2, #7
    4782:	f022 0207 	bic.w	r2, r2, #7
    4786:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    478a:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    478e:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    4792:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    4796:	2200      	movs	r2, #0
    4798:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    479c:	18c8      	adds	r0, r1, r3
    479e:	bc10      	pop	{r4}
    47a0:	4770      	bx	lr

000047a2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    47a2:	f3ef 8005 	mrs	r0, IPSR
}
    47a6:	3800      	subs	r0, #0
    47a8:	bf18      	it	ne
    47aa:	2001      	movne	r0, #1
    47ac:	4770      	bx	lr

000047ae <z_impl_k_thread_start>:
{
    47ae:	b508      	push	{r3, lr}
	z_sched_start(thread);
    47b0:	f7fe fbe2 	bl	2f78 <z_sched_start>
}
    47b4:	bd08      	pop	{r3, pc}

000047b6 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    47b6:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    47b8:	2400      	movs	r4, #0
    47ba:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    47bc:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    47be:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    47c0:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    47c2:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    47c4:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    47c6:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    47c8:	bc10      	pop	{r4}
    47ca:	4770      	bx	lr

000047cc <z_pm_save_idle_exit>:
{
    47cc:	b508      	push	{r3, lr}
	pm_system_resume();
    47ce:	f7fc fb95 	bl	efc <pm_system_resume>
	sys_clock_idle_exit();
    47d2:	f7ff fe22 	bl	441a <sys_clock_idle_exit>
}
    47d6:	bd08      	pop	{r3, pc}

000047d8 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    47d8:	4288      	cmp	r0, r1
    47da:	da00      	bge.n	47de <new_prio_for_inheritance+0x6>
    47dc:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    47de:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    47e2:	db01      	blt.n	47e8 <new_prio_for_inheritance+0x10>
    47e4:	4608      	mov	r0, r1
    47e6:	4770      	bx	lr
    47e8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    47ec:	4770      	bx	lr

000047ee <adjust_owner_prio>:
{
    47ee:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    47f0:	6880      	ldr	r0, [r0, #8]
    47f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    47f6:	428b      	cmp	r3, r1
    47f8:	d101      	bne.n	47fe <adjust_owner_prio+0x10>
	return false;
    47fa:	2000      	movs	r0, #0
}
    47fc:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    47fe:	f7fe fc09 	bl	3014 <z_set_prio>
    4802:	e7fb      	b.n	47fc <adjust_owner_prio+0xe>

00004804 <z_impl_k_mutex_init>:
{
    4804:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4806:	2000      	movs	r0, #0
    4808:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    480a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    480c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    480e:	605b      	str	r3, [r3, #4]
}
    4810:	4770      	bx	lr

00004812 <thread_active_elsewhere>:
}
    4812:	2000      	movs	r0, #0
    4814:	4770      	bx	lr

00004816 <pended_on_thread>:
}
    4816:	6880      	ldr	r0, [r0, #8]
    4818:	4770      	bx	lr

0000481a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    481a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    481e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    4822:	4283      	cmp	r3, r0
    4824:	d001      	beq.n	482a <z_sched_prio_cmp+0x10>
		return b2 - b1;
    4826:	1ac0      	subs	r0, r0, r3
    4828:	4770      	bx	lr
	return 0;
    482a:	2000      	movs	r0, #0
}
    482c:	4770      	bx	lr

0000482e <z_reschedule_irqlock>:
{
    482e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4830:	4603      	mov	r3, r0
    4832:	b920      	cbnz	r0, 483e <z_reschedule_irqlock+0x10>
    4834:	f3ef 8205 	mrs	r2, IPSR
    4838:	b942      	cbnz	r2, 484c <z_reschedule_irqlock+0x1e>
    483a:	2201      	movs	r2, #1
    483c:	e000      	b.n	4840 <z_reschedule_irqlock+0x12>
    483e:	2200      	movs	r2, #0
	if (resched(key)) {
    4840:	b932      	cbnz	r2, 4850 <z_reschedule_irqlock+0x22>
    4842:	f383 8811 	msr	BASEPRI, r3
    4846:	f3bf 8f6f 	isb	sy
}
    484a:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    484c:	2200      	movs	r2, #0
    484e:	e7f7      	b.n	4840 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    4850:	4618      	mov	r0, r3
    4852:	f7fc fdb3 	bl	13bc <arch_swap>
	return ret;
    4856:	e7f8      	b.n	484a <z_reschedule_irqlock+0x1c>

00004858 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    4858:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    485a:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    485c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    485e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4860:	2300      	movs	r3, #0
    4862:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    4864:	604b      	str	r3, [r1, #4]
}
    4866:	4770      	bx	lr

00004868 <z_priq_dumb_best>:
{
    4868:	4603      	mov	r3, r0
	return list->head == list;
    486a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    486c:	4283      	cmp	r3, r0
    486e:	d000      	beq.n	4872 <z_priq_dumb_best+0xa>
}
    4870:	4770      	bx	lr
	struct k_thread *thread = NULL;
    4872:	2000      	movs	r0, #0
	return thread;
    4874:	e7fc      	b.n	4870 <z_priq_dumb_best+0x8>

00004876 <z_ready_thread>:
{
    4876:	b538      	push	{r3, r4, r5, lr}
    4878:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    487a:	2300      	movs	r3, #0
	__asm__ volatile(
    487c:	f04f 0220 	mov.w	r2, #32
    4880:	f3ef 8511 	mrs	r5, BASEPRI
    4884:	f382 8812 	msr	BASEPRI_MAX, r2
    4888:	f3bf 8f6f 	isb	sy
    488c:	e004      	b.n	4898 <z_ready_thread+0x22>
	__asm__ volatile(
    488e:	f385 8811 	msr	BASEPRI, r5
    4892:	f3bf 8f6f 	isb	sy
    4896:	2301      	movs	r3, #1
    4898:	b943      	cbnz	r3, 48ac <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    489a:	4620      	mov	r0, r4
    489c:	f7ff ffb9 	bl	4812 <thread_active_elsewhere>
    48a0:	2800      	cmp	r0, #0
    48a2:	d1f4      	bne.n	488e <z_ready_thread+0x18>
			ready_thread(thread);
    48a4:	4620      	mov	r0, r4
    48a6:	f7fe fb27 	bl	2ef8 <ready_thread>
    48aa:	e7f0      	b.n	488e <z_ready_thread+0x18>
}
    48ac:	bd38      	pop	{r3, r4, r5, pc}

000048ae <z_thread_timeout>:
{
    48ae:	b570      	push	{r4, r5, r6, lr}
    48b0:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    48b2:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    48b6:	2300      	movs	r3, #0
	__asm__ volatile(
    48b8:	f04f 0220 	mov.w	r2, #32
    48bc:	f3ef 8611 	mrs	r6, BASEPRI
    48c0:	f382 8812 	msr	BASEPRI_MAX, r2
    48c4:	f3bf 8f6f 	isb	sy
    48c8:	e011      	b.n	48ee <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    48ca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    48ce:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    48d2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    48d6:	f023 0310 	bic.w	r3, r3, #16
    48da:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    48de:	4628      	mov	r0, r5
    48e0:	f7fe fb0a 	bl	2ef8 <ready_thread>
	__asm__ volatile(
    48e4:	f386 8811 	msr	BASEPRI, r6
    48e8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    48ec:	2301      	movs	r3, #1
    48ee:	b9ab      	cbnz	r3, 491c <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    48f0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    48f4:	f013 0f28 	tst.w	r3, #40	; 0x28
    48f8:	d1f4      	bne.n	48e4 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    48fa:	f854 3c10 	ldr.w	r3, [r4, #-16]
    48fe:	2b00      	cmp	r3, #0
    4900:	d0e3      	beq.n	48ca <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4902:	4628      	mov	r0, r5
    4904:	f7ff ff87 	bl	4816 <pended_on_thread>
    4908:	4629      	mov	r1, r5
    490a:	f7ff ffa5 	bl	4858 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    490e:	7b6b      	ldrb	r3, [r5, #13]
    4910:	f023 0302 	bic.w	r3, r3, #2
    4914:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    4916:	2300      	movs	r3, #0
    4918:	60ab      	str	r3, [r5, #8]
}
    491a:	e7d6      	b.n	48ca <z_thread_timeout+0x1c>
}
    491c:	bd70      	pop	{r4, r5, r6, pc}

0000491e <add_to_waitq_locked>:
{
    491e:	b570      	push	{r4, r5, r6, lr}
    4920:	4605      	mov	r5, r0
    4922:	460e      	mov	r6, r1
	unready_thread(thread);
    4924:	f7fe fb46 	bl	2fb4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4928:	7b6b      	ldrb	r3, [r5, #13]
    492a:	f043 0302 	orr.w	r3, r3, #2
    492e:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    4930:	b1b6      	cbz	r6, 4960 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    4932:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    4934:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4936:	42a6      	cmp	r6, r4
    4938:	d019      	beq.n	496e <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    493a:	b164      	cbz	r4, 4956 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    493c:	4621      	mov	r1, r4
    493e:	4628      	mov	r0, r5
    4940:	f7ff ff6b 	bl	481a <z_sched_prio_cmp>
    4944:	2800      	cmp	r0, #0
    4946:	dc0c      	bgt.n	4962 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4948:	b12c      	cbz	r4, 4956 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    494a:	6873      	ldr	r3, [r6, #4]
    494c:	429c      	cmp	r4, r3
    494e:	d002      	beq.n	4956 <add_to_waitq_locked+0x38>
    4950:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4952:	2c00      	cmp	r4, #0
    4954:	d1f1      	bne.n	493a <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    4956:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    4958:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    495a:	606b      	str	r3, [r5, #4]
	tail->next = node;
    495c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    495e:	6075      	str	r5, [r6, #4]
}
    4960:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    4962:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4964:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4966:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4968:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    496a:	6065      	str	r5, [r4, #4]
}
    496c:	e7f8      	b.n	4960 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    496e:	2400      	movs	r4, #0
    4970:	e7e3      	b.n	493a <add_to_waitq_locked+0x1c>

00004972 <pend>:
{
    4972:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4976:	4605      	mov	r5, r0
    4978:	460e      	mov	r6, r1
    497a:	4691      	mov	r9, r2
    497c:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    497e:	2400      	movs	r4, #0
	__asm__ volatile(
    4980:	f04f 0320 	mov.w	r3, #32
    4984:	f3ef 8711 	mrs	r7, BASEPRI
    4988:	f383 8812 	msr	BASEPRI_MAX, r3
    498c:	f3bf 8f6f 	isb	sy
    4990:	e008      	b.n	49a4 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    4992:	4631      	mov	r1, r6
    4994:	4628      	mov	r0, r5
    4996:	f7ff ffc2 	bl	491e <add_to_waitq_locked>
	__asm__ volatile(
    499a:	f387 8811 	msr	BASEPRI, r7
    499e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    49a2:	2401      	movs	r4, #1
    49a4:	2c00      	cmp	r4, #0
    49a6:	d0f4      	beq.n	4992 <pend+0x20>
	add_thread_timeout(thread, timeout);
    49a8:	464a      	mov	r2, r9
    49aa:	4643      	mov	r3, r8
    49ac:	4628      	mov	r0, r5
    49ae:	f7fe f94f 	bl	2c50 <add_thread_timeout>
}
    49b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000049b6 <z_unpend_first_thread>:
{
    49b6:	b570      	push	{r4, r5, r6, lr}
    49b8:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    49ba:	2300      	movs	r3, #0
	__asm__ volatile(
    49bc:	f04f 0220 	mov.w	r2, #32
    49c0:	f3ef 8611 	mrs	r6, BASEPRI
    49c4:	f382 8812 	msr	BASEPRI_MAX, r2
    49c8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    49cc:	461c      	mov	r4, r3
    49ce:	e004      	b.n	49da <z_unpend_first_thread+0x24>
	__asm__ volatile(
    49d0:	f386 8811 	msr	BASEPRI, r6
    49d4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    49d8:	2301      	movs	r3, #1
    49da:	b9ab      	cbnz	r3, 4a08 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    49dc:	4628      	mov	r0, r5
    49de:	f7ff ff43 	bl	4868 <z_priq_dumb_best>
		if (thread != NULL) {
    49e2:	4604      	mov	r4, r0
    49e4:	2800      	cmp	r0, #0
    49e6:	d0f3      	beq.n	49d0 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    49e8:	f7ff ff15 	bl	4816 <pended_on_thread>
    49ec:	4621      	mov	r1, r4
    49ee:	f7ff ff33 	bl	4858 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    49f2:	7b63      	ldrb	r3, [r4, #13]
    49f4:	f023 0302 	bic.w	r3, r3, #2
    49f8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    49fa:	2300      	movs	r3, #0
    49fc:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    49fe:	f104 0018 	add.w	r0, r4, #24
    4a02:	f000 f81e 	bl	4a42 <z_abort_timeout>
    4a06:	e7e3      	b.n	49d0 <z_unpend_first_thread+0x1a>
}
    4a08:	4620      	mov	r0, r4
    4a0a:	bd70      	pop	{r4, r5, r6, pc}

00004a0c <init_ready_q>:
	sys_dlist_init(&rq->runq);
    4a0c:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    4a0e:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    4a10:	6083      	str	r3, [r0, #8]
}
    4a12:	4770      	bx	lr

00004a14 <remove_timeout>:
{
    4a14:	b510      	push	{r4, lr}
    4a16:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    4a18:	f7fe fd2e 	bl	3478 <next>
    4a1c:	b148      	cbz	r0, 4a32 <remove_timeout+0x1e>
    4a1e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    4a20:	6920      	ldr	r0, [r4, #16]
    4a22:	6961      	ldr	r1, [r4, #20]
    4a24:	6913      	ldr	r3, [r2, #16]
    4a26:	181b      	adds	r3, r3, r0
    4a28:	6950      	ldr	r0, [r2, #20]
    4a2a:	eb41 0100 	adc.w	r1, r1, r0
    4a2e:	6113      	str	r3, [r2, #16]
    4a30:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    4a32:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    4a34:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    4a36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4a38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4a3a:	2300      	movs	r3, #0
    4a3c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    4a3e:	6063      	str	r3, [r4, #4]
}
    4a40:	bd10      	pop	{r4, pc}

00004a42 <z_abort_timeout>:
{
    4a42:	b570      	push	{r4, r5, r6, lr}
    4a44:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    4a46:	2300      	movs	r3, #0
	__asm__ volatile(
    4a48:	f04f 0220 	mov.w	r2, #32
    4a4c:	f3ef 8611 	mrs	r6, BASEPRI
    4a50:	f382 8812 	msr	BASEPRI_MAX, r2
    4a54:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    4a58:	f06f 0015 	mvn.w	r0, #21
    4a5c:	e004      	b.n	4a68 <z_abort_timeout+0x26>
	__asm__ volatile(
    4a5e:	f386 8811 	msr	BASEPRI, r6
    4a62:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4a66:	2301      	movs	r3, #1
    4a68:	461d      	mov	r5, r3
    4a6a:	b93b      	cbnz	r3, 4a7c <z_abort_timeout+0x3a>
	return node->next != NULL;
    4a6c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d0f5      	beq.n	4a5e <z_abort_timeout+0x1c>
			remove_timeout(to);
    4a72:	4620      	mov	r0, r4
    4a74:	f7ff ffce 	bl	4a14 <remove_timeout>
			ret = 0;
    4a78:	4628      	mov	r0, r5
    4a7a:	e7f0      	b.n	4a5e <z_abort_timeout+0x1c>
}
    4a7c:	bd70      	pop	{r4, r5, r6, pc}

00004a7e <z_get_next_timeout_expiry>:
{
    4a7e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    4a80:	2300      	movs	r3, #0
	__asm__ volatile(
    4a82:	f04f 0220 	mov.w	r2, #32
    4a86:	f3ef 8411 	mrs	r4, BASEPRI
    4a8a:	f382 8812 	msr	BASEPRI_MAX, r2
    4a8e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    4a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4a96:	e006      	b.n	4aa6 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    4a98:	f7fe fd06 	bl	34a8 <next_timeout>
	__asm__ volatile(
    4a9c:	f384 8811 	msr	BASEPRI, r4
    4aa0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4aa4:	2301      	movs	r3, #1
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d0f6      	beq.n	4a98 <z_get_next_timeout_expiry+0x1a>
}
    4aaa:	bd10      	pop	{r4, pc}

00004aac <z_set_timeout_expiry>:
{
    4aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aae:	4605      	mov	r5, r0
    4ab0:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    4ab2:	2300      	movs	r3, #0
	__asm__ volatile(
    4ab4:	f04f 0220 	mov.w	r2, #32
    4ab8:	f3ef 8611 	mrs	r6, BASEPRI
    4abc:	f382 8812 	msr	BASEPRI_MAX, r2
    4ac0:	f3bf 8f6f 	isb	sy
    4ac4:	e00a      	b.n	4adc <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    4ac6:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    4ac8:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4acc:	2801      	cmp	r0, #1
    4ace:	dd00      	ble.n	4ad2 <z_set_timeout_expiry+0x26>
    4ad0:	b97c      	cbnz	r4, 4af2 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    4ad2:	f386 8811 	msr	BASEPRI, r6
    4ad6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4ada:	2301      	movs	r3, #1
    4adc:	461c      	mov	r4, r3
    4ade:	b97b      	cbnz	r3, 4b00 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    4ae0:	f7fe fce2 	bl	34a8 <next_timeout>
			      || (ticks <= next_to);
    4ae4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4ae8:	d0ed      	beq.n	4ac6 <z_set_timeout_expiry+0x1a>
    4aea:	42a8      	cmp	r0, r5
    4aec:	dbec      	blt.n	4ac8 <z_set_timeout_expiry+0x1c>
    4aee:	2401      	movs	r4, #1
    4af0:	e7ea      	b.n	4ac8 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4af2:	4639      	mov	r1, r7
    4af4:	42a8      	cmp	r0, r5
    4af6:	bfa8      	it	ge
    4af8:	4628      	movge	r0, r5
    4afa:	f7fd fb5d 	bl	21b8 <sys_clock_set_timeout>
    4afe:	e7e8      	b.n	4ad2 <z_set_timeout_expiry+0x26>
}
    4b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004b02 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    4b02:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    4b04:	f7fe fde6 	bl	36d4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4b08:	bd08      	pop	{r3, pc}

00004b0a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4b0a:	b900      	cbnz	r0, 4b0e <z_impl_k_busy_wait+0x4>
    4b0c:	4770      	bx	lr
{
    4b0e:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    4b10:	f7fc ffa8 	bl	1a64 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    4b14:	bd08      	pop	{r3, pc}

00004b16 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    4b16:	4770      	bx	lr

00004b18 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    4b18:	f7fd bba6 	b.w	2268 <SystemInit>
